{"version":3,"file":"xeokit-convert.cjs.js","mappings":"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","sources":["webpack://convert2xkt/webpack/universalModuleDefinition","webpack://convert2xkt/external commonjs \"fs\"","webpack://convert2xkt/webpack/bootstrap","webpack://convert2xkt/webpack/runtime/define property getters","webpack://convert2xkt/webpack/runtime/hasOwnProperty shorthand","webpack://convert2xkt/webpack/runtime/make namespace object","webpack://convert2xkt/external commonjs \"@loaders.gl/polyfills\"","webpack://convert2xkt/./src/XKT_INFO.js","webpack://convert2xkt/./src/lib/math.js","webpack://convert2xkt/./src/XKTModel/lib/geometryCompression.js","webpack://convert2xkt/./src/constants.js","webpack://convert2xkt/./src/XKTModel/lib/buildEdgeIndices.js","webpack://convert2xkt/./src/XKTModel/lib/isTriangleMeshSolid.js","webpack://convert2xkt/./src/XKTModel/XKTMesh.js","webpack://convert2xkt/./src/XKTModel/lib/rebucketPositions.js","webpack://convert2xkt/./src/XKTModel/lib/calculateUniquePositions.js","webpack://convert2xkt/./src/XKTModel/XKTGeometry.js","webpack://convert2xkt/./src/XKTModel/XKTEntity.js","webpack://convert2xkt/./src/XKTModel/XKTTile.js","webpack://convert2xkt/./src/XKTModel/KDNode.js","webpack://convert2xkt/./src/XKTModel/XKTMetaObject.js","webpack://convert2xkt/./src/XKTModel/XKTPropertySet.js","webpack://convert2xkt/./src/XKTModel/XKTTexture.js","webpack://convert2xkt/./src/XKTModel/XKTTextureSet.js","webpack://convert2xkt/external commonjs \"@loaders.gl/core\"","webpack://convert2xkt/external commonjs \"@loaders.gl/textures\"","webpack://convert2xkt/external commonjs \"@loaders.gl/images\"","webpack://convert2xkt/./src/XKTModel/XKTModel.js","webpack://convert2xkt/./src/lib/mergeVertices.js","webpack://convert2xkt/external commonjs \"pako\"","webpack://convert2xkt/./src/exporters/xkt/writeXKTModelToArrayBuffer.js","webpack://convert2xkt/./src/lib/earcut.js","webpack://convert2xkt/./src/parsers/parseCityJSONIntoXKTModel.js","webpack://convert2xkt/./src/XKTModel/lib/utils.js","webpack://convert2xkt/external commonjs \"@loaders.gl/gltf\"","webpack://convert2xkt/./src/parsers/parseGLTFIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseGLTFJSONIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseIFCIntoXKTModel.js","webpack://convert2xkt/external commonjs \"@loaders.gl/las\"","webpack://convert2xkt/./src/parsers/parseLASIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseMetaModelIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parsePCDIntoXKTModel.js","webpack://convert2xkt/external commonjs \"@loaders.gl/ply\"","webpack://convert2xkt/./src/parsers/parsePLYIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseSTLIntoXKTModel.js","webpack://convert2xkt/./src/lib/faceToVertexNormals.js","webpack://convert2xkt/./src/geometryBuilders/buildBoxGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildBoxLinesGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildCylinderGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildGridGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildPlaneGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildSphereGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildTorusGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildVectorTextGeometry.js","webpack://convert2xkt/./src/XKTModel/lib/toArraybuffer.js","webpack://convert2xkt/./src/convert2xkt.js","webpack://convert2xkt/./index.dist.node.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"convert2xkt\"] = factory();\n\telse\n\t\troot[\"convert2xkt\"] = factory();\n})(global, () => {\nreturn ","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/polyfills\");","/**\n * @desc Provides info on the XKT generated by xeokit-convert.\n */\nconst XKT_INFO = {\n\n    /**\n     * The XKT version generated by xeokit-convert.\n     *\n     * This is the XKT version that's modeled by {@link XKTModel}, serialized\n     * by {@link writeXKTModelToArrayBuffer}, and written by {@link convert2xkt}.\n     *\n     * * Current XKT version: **10**\n     * * [XKT format specs](https://github.com/xeokit/xeokit-convert/blob/main/specs/index.md)\n     *\n     * @property xktVersion\n     * @type {number}\n     */\n    xktVersion: 10\n};\n\nexport {XKT_INFO};","// Some temporary vars to help avoid garbage collection\n\nconst doublePrecision = true;\nconst FloatArrayType = doublePrecision ? Float64Array : Float32Array;\n\nconst tempMat1 = new FloatArrayType(16);\nconst tempMat2 = new FloatArrayType(16);\nconst tempVec4 = new FloatArrayType(4);\n\n/**\n * @private\n */\nconst math = {\n\n    MIN_DOUBLE: -Number.MAX_SAFE_INTEGER,\n    MAX_DOUBLE:  Number.MAX_SAFE_INTEGER,\n\n    /**\n     * The number of radiians in a degree (0.0174532925).\n     * @property DEGTORAD\n     * @type {Number}\n     */\n    DEGTORAD: 0.0174532925,\n\n    /**\n     * The number of degrees in a radian.\n     * @property RADTODEG\n     * @type {Number}\n     */\n    RADTODEG: 57.295779513,\n\n    /**\n     * Returns a new, uninitialized two-element vector.\n     * @method vec2\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec2(values) {\n        return new FloatArrayType(values || 2);\n    },\n\n    /**\n     * Returns a new, uninitialized three-element vector.\n     * @method vec3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec3(values) {\n        return new FloatArrayType(values || 3);\n    },\n\n    /**\n     * Returns a new, uninitialized four-element vector.\n     * @method vec4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec4(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3x3 matrix.\n     * @method mat3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat3(values) {\n        return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Converts a 3x3 matrix to 4x4\n     * @method mat3ToMat4\n     * @param mat3 3x3 matrix.\n     * @param mat4 4x4 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat3ToMat4(mat3, mat4 = new FloatArrayType(16)) {\n        mat4[0] = mat3[0];\n        mat4[1] = mat3[1];\n        mat4[2] = mat3[2];\n        mat4[3] = 0;\n        mat4[4] = mat3[3];\n        mat4[5] = mat3[4];\n        mat4[6] = mat3[5];\n        mat4[7] = 0;\n        mat4[8] = mat3[6];\n        mat4[9] = mat3[7];\n        mat4[10] = mat3[8];\n        mat4[11] = 0;\n        mat4[12] = 0;\n        mat4[13] = 0;\n        mat4[14] = 0;\n        mat4[15] = 1;\n        return mat4;\n    },\n\n    /**\n     * Returns a new, uninitialized 4x4 matrix.\n     * @method mat4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat4(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /**\n     * Converts a 4x4 matrix to 3x3\n     * @method mat4ToMat3\n     * @param mat4 4x4 matrix.\n     * @param mat3 3x3 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat4ToMat3(mat4, mat3) { // TODO\n        //return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Returns a new UUID.\n     * @method createUUID\n     * @static\n     * @return string The new UUID\n     */\n    createUUID: ((() => {\n        const self = {};\n        const lut = [];\n        for (let i = 0; i < 256; i++) {\n            lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n        }\n        return () => {\n            const d0 = Math.random() * 0xffffffff | 0;\n            const d1 = Math.random() * 0xffffffff | 0;\n            const d2 = Math.random() * 0xffffffff | 0;\n            const d3 = Math.random() * 0xffffffff | 0;\n            return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n        };\n    }))(),\n\n    /**\n     * Clamps a value to the given range.\n     * @param {Number} value Value to clamp.\n     * @param {Number} min Lower bound.\n     * @param {Number} max Upper bound.\n     * @returns {Number} Clamped result.\n     */\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    },\n\n    /**\n     * Floating-point modulus\n     * @method fmod\n     * @static\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {*}\n     */\n    fmod(a, b) {\n        if (a < b) {\n            console.error(\"math.fmod : Attempting to find modulus within negative range - would be infinite loop - ignoring\");\n            return a;\n        }\n        while (b <= a) {\n            a -= b;\n        }\n        return a;\n    },\n\n    /**\n     * Negates a four-element vector.\n     * @method negateVec4\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec4(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        dest[3] = -v[3];\n        return dest;\n    },\n\n    /**\n     * Adds one four-element vector to another.\n     * @method addVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        dest[3] = u[3] + v[3];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a four-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        dest[3] = v[3] + s;\n        return dest;\n    },\n\n    /**\n     * Adds one three-element vector to another.\n     * @method addVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a three-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        return dest;\n    },\n\n    /**\n     * Subtracts one four-element vector from another.\n     * @method subVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        dest[3] = u[3] - v[3];\n        return dest;\n    },\n\n    /**\n     * Subtracts one three-element vector from another.\n     * @method subVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        return dest;\n    },\n\n    /**\n     * Subtracts one two-element vector from another.\n     * @method subVec2\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec2(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        return dest;\n    },\n\n    /**\n     * Subtracts a scalar value from each element of a four-element vector.\n     * @method subVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] - s;\n        dest[1] = v[1] - s;\n        dest[2] = v[2] - s;\n        dest[3] = v[3] - s;\n        return dest;\n    },\n\n    /**\n     * Sets each element of a 4-element vector to a scalar value minus the value of that element.\n     * @method subScalarVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subScalarVec4(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s - v[0];\n        dest[1] = s - v[1];\n        dest[2] = s - v[2];\n        dest[3] = s - v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies one three-element vector by another.\n     * @method mulVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    mulVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] * v[0];\n        dest[1] = u[1] * v[1];\n        dest[2] = u[2] * v[2];\n        dest[3] = u[3] * v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a four-element vector by a scalar.\n     * @method mulVec34calar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        dest[3] = v[3] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a three-element vector by a scalar.\n     * @method mulVec3Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a two-element vector by a scalar.\n     * @method mulVec2Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec2Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        return dest;\n    },\n\n    /**\n     * Divides one three-element vector by another.\n     * @method divVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides one four-element vector by another.\n     * @method divVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        dest[3] = u[3] / v[3];\n        return dest;\n    },\n\n    /**\n     * Divides a scalar by a three-element vector, returning a new vector.\n     * @method divScalarVec3\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec3(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides a three-element vector by a scalar.\n     * @method divVec3Scalar\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        return dest;\n    },\n\n    /**\n     * Divides a four-element vector by a scalar.\n     * @method divVec4Scalar\n     * @static\n     * @param v vec4\n     * @param s scalar\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        dest[3] = v[3] / s;\n        return dest;\n    },\n\n\n    /**\n     * Divides a scalar by a four-element vector, returning a new vector.\n     * @method divScalarVec4\n     * @static\n     * @param s scalar\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec4(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        dest[3] = s / v[3];\n        return dest;\n    },\n\n    /**\n     * Returns the dot product of two four-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec4(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3]);\n    },\n\n    /**\n     * Returns the cross product of two four-element vectors.\n     * @method cross3Vec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec4(u, v) {\n        const u0 = u[0];\n        const u1 = u[1];\n        const u2 = u[2];\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return [\n            u1 * v2 - u2 * v1,\n            u2 * v0 - u0 * v2,\n            u0 * v1 - u1 * v0,\n            0.0];\n    },\n\n    /**\n     * Returns the cross product of two three-element vectors.\n     * @method cross3Vec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        const x = u[0];\n        const y = u[1];\n        const z = u[2];\n        const x2 = v[0];\n        const y2 = v[1];\n        const z2 = v[2];\n        dest[0] = y * z2 - z * y2;\n        dest[1] = z * x2 - x * z2;\n        dest[2] = x * y2 - y * x2;\n        return dest;\n    },\n\n\n    sqLenVec4(v) { // TODO\n        return math.dotVec4(v, v);\n    },\n\n    /**\n     * Returns the length of a four-element vector.\n     * @method lenVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec4(v) {\n        return Math.sqrt(math.sqLenVec4(v));\n    },\n\n    /**\n     * Returns the dot product of two three-element vectors.\n     * @method dotVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec3(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2]);\n    },\n\n    /**\n     * Returns the dot product of two two-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec2(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]);\n    },\n\n\n    sqLenVec3(v) {\n        return math.dotVec3(v, v);\n    },\n\n\n    sqLenVec2(v) {\n        return math.dotVec2(v, v);\n    },\n\n    /**\n     * Returns the length of a three-element vector.\n     * @method lenVec3\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec3(v) {\n        return Math.sqrt(math.sqLenVec3(v));\n    },\n\n    distVec3: ((() => {\n        const vec = new FloatArrayType(3);\n        return (v, w) => math.lenVec3(math.subVec3(v, w, vec));\n    }))(),\n\n    /**\n     * Returns the length of a two-element vector.\n     * @method lenVec2\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec2(v) {\n        return Math.sqrt(math.sqLenVec2(v));\n    },\n\n    distVec2: ((() => {\n        const vec = new FloatArrayType(2);\n        return (v, w) => math.lenVec2(math.subVec2(v, w, vec));\n    }))(),\n\n    /**\n     * @method rcpVec3\n     * @static\n     * @param v vec3\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    rcpVec3(v, dest) {\n        return math.divScalarVec3(1.0, v, dest);\n    },\n\n    /**\n     * Normalizes a four-element vector\n     * @method normalizeVec4\n     * @static\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    normalizeVec4(v, dest) {\n        const f = 1.0 / math.lenVec4(v);\n        return math.mulVec4Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a three-element vector\n     * @method normalizeVec4\n     * @static\n     */\n    normalizeVec3(v, dest) {\n        const f = 1.0 / math.lenVec3(v);\n        return math.mulVec3Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a two-element vector\n     * @method normalizeVec2\n     * @static\n     */\n    normalizeVec2(v, dest) {\n        const f = 1.0 / math.lenVec2(v);\n        return math.mulVec2Scalar(v, f, dest);\n    },\n\n    /**\n     * Gets the angle between two vectors\n     * @method angleVec3\n     * @param v\n     * @param w\n     * @returns {number}\n     */\n    angleVec3(v, w) {\n        let theta = math.dotVec3(v, w) / (Math.sqrt(math.sqLenVec3(v) * math.sqLenVec3(w)));\n        theta = theta < -1 ? -1 : (theta > 1 ? 1 : theta);  // Clamp to handle numerical problems\n        return Math.acos(theta);\n    },\n\n    /**\n     * Creates a three-element vector from the rotation part of a sixteen-element matrix.\n     * @param m\n     * @param dest\n     */\n    vec3FromMat4Scale: ((() => {\n\n        const tempVec3 = new FloatArrayType(3);\n\n        return (m, dest) => {\n\n            tempVec3[0] = m[0];\n            tempVec3[1] = m[1];\n            tempVec3[2] = m[2];\n\n            dest[0] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[4];\n            tempVec3[1] = m[5];\n            tempVec3[2] = m[6];\n\n            dest[1] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[8];\n            tempVec3[1] = m[9];\n            tempVec3[2] = m[10];\n\n            dest[2] = math.lenVec3(tempVec3);\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Converts an n-element vector to a JSON-serializable\n     * array with values rounded to two decimal places.\n     */\n    vecToArray: ((() => {\n        function trunc(v) {\n            return Math.round(v * 100000) / 100000\n        }\n\n        return v => {\n            v = Array.prototype.slice.call(v);\n            for (let i = 0, len = v.length; i < len; i++) {\n                v[i] = trunc(v[i]);\n            }\n            return v;\n        };\n    }))(),\n\n    /**\n     * Converts a 3-element vector from an array to an object of the form ````{x:999, y:999, z:999}````.\n     * @param arr\n     * @returns {{x: *, y: *, z: *}}\n     */\n    xyzArrayToObject(arr) {\n        return {\"x\": arr[0], \"y\": arr[1], \"z\": arr[2]};\n    },\n\n    /**\n     * Converts a 3-element vector object of the form ````{x:999, y:999, z:999}```` to an array.\n     * @param xyz\n     * @param  [arry]\n     * @returns {*[]}\n     */\n    xyzObjectToArray(xyz, arry) {\n        arry = arry || new FloatArrayType(3);\n        arry[0] = xyz.x;\n        arry[1] = xyz.y;\n        arry[2] = xyz.z;\n        return arry;\n    },\n\n    /**\n     * Duplicates a 4x4 identity matrix.\n     * @method dupMat4\n     * @static\n     */\n    dupMat4(m) {\n        return m.slice(0, 16);\n    },\n\n    /**\n     * Extracts a 3x3 matrix from a 4x4 matrix.\n     * @method mat4To3\n     * @static\n     */\n    mat4To3(m) {\n        return [\n            m[0], m[1], m[2],\n            m[4], m[5], m[6],\n            m[8], m[9], m[10]\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to the given scalar value.\n     * @method m4s\n     * @static\n     */\n    m4s(s) {\n        return [\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to zero.\n     * @method setMat4ToZeroes\n     * @static\n     */\n    setMat4ToZeroes() {\n        return math.m4s(0.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    setMat4ToOnes() {\n        return math.m4s(1.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    diagonalMat4v(v) {\n        return new FloatArrayType([\n            v[0], 0.0, 0.0, 0.0,\n            0.0, v[1], 0.0, 0.0,\n            0.0, 0.0, v[2], 0.0,\n            0.0, 0.0, 0.0, v[3]\n        ]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given vector.\n     * @method diagonalMat4c\n     * @static\n     */\n    diagonalMat4c(x, y, z, w) {\n        return math.diagonalMat4v([x, y, z, w]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given scalar.\n     * @method diagonalMat4s\n     * @static\n     */\n    diagonalMat4s(s) {\n        return math.diagonalMat4c(s, s, s, s);\n    },\n\n    /**\n     * Returns a 4x4 identity matrix.\n     * @method identityMat4\n     * @static\n     */\n    identityMat4(mat = new FloatArrayType(16)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n        mat[3] = 0.0;\n\n        mat[4] = 0.0;\n        mat[5] = 1.0;\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n\n        mat[8] = 0.0;\n        mat[9] = 0.0;\n        mat[10] = 1.0;\n        mat[11] = 0.0;\n\n        mat[12] = 0.0;\n        mat[13] = 0.0;\n        mat[14] = 0.0;\n        mat[15] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Returns a 3x3 identity matrix.\n     * @method identityMat3\n     * @static\n     */\n    identityMat3(mat = new FloatArrayType(9)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n\n        mat[3] = 0.0;\n        mat[4] = 1.0;\n        mat[5] = 0.0;\n\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n        mat[8] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Tests if the given 4x4 matrix is the identity matrix.\n     * @method isIdentityMat4\n     * @static\n     */\n    isIdentityMat4(m) {\n        if (m[0] !== 1.0 || m[1] !== 0.0 || m[2] !== 0.0 || m[3] !== 0.0 ||\n            m[4] !== 0.0 || m[5] !== 1.0 || m[6] !== 0.0 || m[7] !== 0.0 ||\n            m[8] !== 0.0 || m[9] !== 0.0 || m[10] !== 1.0 || m[11] !== 0.0 ||\n            m[12] !== 0.0 || m[13] !== 0.0 || m[14] !== 0.0 || m[15] !== 1.0) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Negates the given 4x4 matrix.\n     * @method negateMat4\n     * @static\n     */\n    negateMat4(m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = -m[0];\n        dest[1] = -m[1];\n        dest[2] = -m[2];\n        dest[3] = -m[3];\n        dest[4] = -m[4];\n        dest[5] = -m[5];\n        dest[6] = -m[6];\n        dest[7] = -m[7];\n        dest[8] = -m[8];\n        dest[9] = -m[9];\n        dest[10] = -m[10];\n        dest[11] = -m[11];\n        dest[12] = -m[12];\n        dest[13] = -m[13];\n        dest[14] = -m[14];\n        dest[15] = -m[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given 4x4 matrices together.\n     * @method addMat4\n     * @static\n     */\n    addMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] + b[0];\n        dest[1] = a[1] + b[1];\n        dest[2] = a[2] + b[2];\n        dest[3] = a[3] + b[3];\n        dest[4] = a[4] + b[4];\n        dest[5] = a[5] + b[5];\n        dest[6] = a[6] + b[6];\n        dest[7] = a[7] + b[7];\n        dest[8] = a[8] + b[8];\n        dest[9] = a[9] + b[9];\n        dest[10] = a[10] + b[10];\n        dest[11] = a[11] + b[11];\n        dest[12] = a[12] + b[12];\n        dest[13] = a[13] + b[13];\n        dest[14] = a[14] + b[14];\n        dest[15] = a[15] + b[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addMat4Scalar\n     * @static\n     */\n    addMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] + s;\n        dest[1] = m[1] + s;\n        dest[2] = m[2] + s;\n        dest[3] = m[3] + s;\n        dest[4] = m[4] + s;\n        dest[5] = m[5] + s;\n        dest[6] = m[6] + s;\n        dest[7] = m[7] + s;\n        dest[8] = m[8] + s;\n        dest[9] = m[9] + s;\n        dest[10] = m[10] + s;\n        dest[11] = m[11] + s;\n        dest[12] = m[12] + s;\n        dest[13] = m[13] + s;\n        dest[14] = m[14] + s;\n        dest[15] = m[15] + s;\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addScalarMat4\n     * @static\n     */\n    addScalarMat4(s, m, dest) {\n        return math.addMat4Scalar(m, s, dest);\n    },\n\n    /**\n     * Subtracts the second 4x4 matrix from the first.\n     * @method subMat4\n     * @static\n     */\n    subMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] - b[0];\n        dest[1] = a[1] - b[1];\n        dest[2] = a[2] - b[2];\n        dest[3] = a[3] - b[3];\n        dest[4] = a[4] - b[4];\n        dest[5] = a[5] - b[5];\n        dest[6] = a[6] - b[6];\n        dest[7] = a[7] - b[7];\n        dest[8] = a[8] - b[8];\n        dest[9] = a[9] - b[9];\n        dest[10] = a[10] - b[10];\n        dest[11] = a[11] - b[11];\n        dest[12] = a[12] - b[12];\n        dest[13] = a[13] - b[13];\n        dest[14] = a[14] - b[14];\n        dest[15] = a[15] - b[15];\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subMat4Scalar\n     * @static\n     */\n    subMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] - s;\n        dest[1] = m[1] - s;\n        dest[2] = m[2] - s;\n        dest[3] = m[3] - s;\n        dest[4] = m[4] - s;\n        dest[5] = m[5] - s;\n        dest[6] = m[6] - s;\n        dest[7] = m[7] - s;\n        dest[8] = m[8] - s;\n        dest[9] = m[9] - s;\n        dest[10] = m[10] - s;\n        dest[11] = m[11] - s;\n        dest[12] = m[12] - s;\n        dest[13] = m[13] - s;\n        dest[14] = m[14] - s;\n        dest[15] = m[15] - s;\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subScalarMat4\n     * @static\n     */\n    subScalarMat4(s, m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = s - m[0];\n        dest[1] = s - m[1];\n        dest[2] = s - m[2];\n        dest[3] = s - m[3];\n        dest[4] = s - m[4];\n        dest[5] = s - m[5];\n        dest[6] = s - m[6];\n        dest[7] = s - m[7];\n        dest[8] = s - m[8];\n        dest[9] = s - m[9];\n        dest[10] = s - m[10];\n        dest[11] = s - m[11];\n        dest[12] = s - m[12];\n        dest[13] = s - m[13];\n        dest[14] = s - m[14];\n        dest[15] = s - m[15];\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 4x4 matrix by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = a[0];\n\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4];\n        const a11 = a[5];\n        const a12 = a[6];\n        const a13 = a[7];\n        const a20 = a[8];\n        const a21 = a[9];\n        const a22 = a[10];\n        const a23 = a[11];\n        const a30 = a[12];\n        const a31 = a[13];\n        const a32 = a[14];\n        const a33 = a[15];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4];\n        const b11 = b[5];\n        const b12 = b[6];\n        const b13 = b[7];\n        const b20 = b[8];\n        const b21 = b[9];\n        const b22 = b[10];\n        const b23 = b[11];\n        const b30 = b[12];\n        const b31 = b[13];\n        const b32 = b[14];\n        const b33 = b[15];\n\n        dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n        dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n        dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n        dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n        dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n        dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n        dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n        dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n        dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n        dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n        dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n        dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n        dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n        dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n        dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n        dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 3x3 matrices by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat3(a, b, dest) {\n        if (!dest) {\n            dest = new FloatArrayType(9);\n        }\n\n        const a11 = a[0];\n        const a12 = a[3];\n        const a13 = a[6];\n        const a21 = a[1];\n        const a22 = a[4];\n        const a23 = a[7];\n        const a31 = a[2];\n        const a32 = a[5];\n        const a33 = a[8];\n        const b11 = b[0];\n        const b12 = b[3];\n        const b13 = b[6];\n        const b21 = b[1];\n        const b22 = b[4];\n        const b23 = b[7];\n        const b31 = b[2];\n        const b32 = b[5];\n        const b33 = b[8];\n\n        dest[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        dest[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        dest[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        dest[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        dest[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        dest[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        dest[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        dest[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        dest[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of the given 4x4 matrix by the given scalar.\n     * @method mulMat4Scalar\n     * @static\n     */\n    mulMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] * s;\n        dest[1] = m[1] * s;\n        dest[2] = m[2] * s;\n        dest[3] = m[3] * s;\n        dest[4] = m[4] * s;\n        dest[5] = m[5] * s;\n        dest[6] = m[6] * s;\n        dest[7] = m[7] * s;\n        dest[8] = m[8] * s;\n        dest[9] = m[9] * s;\n        dest[10] = m[10] * s;\n        dest[11] = m[11] * s;\n        dest[12] = m[12] * s;\n        dest[13] = m[13] * s;\n        dest[14] = m[14] * s;\n        dest[15] = m[15] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies the given 4x4 matrix by the given four-element vector.\n     * @method mulMat4v4\n     * @static\n     */\n    mulMat4v4(m, v, dest = math.vec4()) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Transposes the given 4x4 matrix.\n     * @method transposeMat4\n     * @static\n     */\n    transposeMat4(mat, dest) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        const m4 = mat[4];\n\n        const m14 = mat[14];\n        const m8 = mat[8];\n        const m13 = mat[13];\n        const m12 = mat[12];\n        const m9 = mat[9];\n        if (!dest || mat === dest) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a03 = mat[3];\n            const a12 = mat[6];\n            const a13 = mat[7];\n            const a23 = mat[11];\n            mat[1] = m4;\n            mat[2] = m8;\n            mat[3] = m12;\n            mat[4] = a01;\n            mat[6] = m9;\n            mat[7] = m13;\n            mat[8] = a02;\n            mat[9] = a12;\n            mat[11] = m14;\n            mat[12] = a03;\n            mat[13] = a13;\n            mat[14] = a23;\n            return mat;\n        }\n        dest[0] = mat[0];\n        dest[1] = m4;\n        dest[2] = m8;\n        dest[3] = m12;\n        dest[4] = mat[1];\n        dest[5] = mat[5];\n        dest[6] = m9;\n        dest[7] = m13;\n        dest[8] = mat[2];\n        dest[9] = mat[6];\n        dest[10] = mat[10];\n        dest[11] = m14;\n        dest[12] = mat[3];\n        dest[13] = mat[7];\n        dest[14] = mat[11];\n        dest[15] = mat[15];\n        return dest;\n    },\n\n    /**\n     * Transposes the given 3x3 matrix.\n     *\n     * @method transposeMat3\n     * @static\n     */\n    transposeMat3(mat, dest) {\n        if (dest === mat) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a12 = mat[5];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = a01;\n            dest[5] = mat[7];\n            dest[6] = a02;\n            dest[7] = a12;\n        } else {\n            dest[0] = mat[0];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = mat[1];\n            dest[4] = mat[4];\n            dest[5] = mat[7];\n            dest[6] = mat[2];\n            dest[7] = mat[5];\n            dest[8] = mat[8];\n        }\n        return dest;\n    },\n\n    /**\n     * Returns the determinant of the given 4x4 matrix.\n     * @method determinantMat4\n     * @static\n     */\n    determinantMat4(mat) {\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +\n            a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +\n            a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +\n            a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +\n            a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +\n            a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n    },\n\n    /**\n     * Returns the inverse of the given 4x4 matrix.\n     * @method inverseMat4\n     * @static\n     */\n    inverseMat4(mat, dest) {\n        if (!dest) {\n            dest = mat;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        const b00 = a00 * a11 - a01 * a10;\n        const b01 = a00 * a12 - a02 * a10;\n        const b02 = a00 * a13 - a03 * a10;\n        const b03 = a01 * a12 - a02 * a11;\n        const b04 = a01 * a13 - a03 * a11;\n        const b05 = a02 * a13 - a03 * a12;\n        const b06 = a20 * a31 - a21 * a30;\n        const b07 = a20 * a32 - a22 * a30;\n        const b08 = a20 * a33 - a23 * a30;\n        const b09 = a21 * a32 - a22 * a31;\n        const b10 = a21 * a33 - a23 * a31;\n        const b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant (inlined to avoid double-caching)\n        const invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\n\n        dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n        dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n        dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n        dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n        dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n        dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n        dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n        dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n        dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n        dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n        dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n        dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n        dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n        dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n        dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n        dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n\n        return dest;\n    },\n\n    /**\n     * Returns the trace of the given 4x4 matrix.\n     * @method traceMat4\n     * @static\n     */\n    traceMat4(m) {\n        return (m[0] + m[5] + m[10] + m[15]);\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4\n     * @static\n     */\n    translationMat4v(v, dest) {\n        const m = dest || math.identityMat4();\n        m[12] = v[0];\n        m[13] = v[1];\n        m[14] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 translation matrix.\n     * @method translationMat3\n     * @static\n     */\n    translationMat3v(v, dest) {\n        const m = dest || math.identityMat3();\n        m[6] = v[0];\n        m[7] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4c\n     * @static\n     */\n    translationMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.translationMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4s\n     * @static\n     */\n    translationMat4s(s, dest) {\n        return math.translationMat4c(s, s, s, dest);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param v\n     * @param m\n     */\n    translateMat4v(xyz, m) {\n        return math.translateMat4c(xyz[0], xyz[1], xyz[2], m);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    OLDtranslateMat4c(x, y, z, m) {\n\n        const m12 = m[12];\n        m[0] += m12 * x;\n        m[4] += m12 * y;\n        m[8] += m12 * z;\n\n        const m13 = m[13];\n        m[1] += m13 * x;\n        m[5] += m13 * y;\n        m[9] += m13 * z;\n\n        const m14 = m[14];\n        m[2] += m14 * x;\n        m[6] += m14 * y;\n        m[10] += m14 * z;\n\n        const m15 = m[15];\n        m[3] += m15 * x;\n        m[7] += m15 * y;\n        m[11] += m15 * z;\n\n        return m;\n    },\n\n    translateMat4c(x, y, z, m) {\n\n        const m3 = m[3];\n        m[0] += m3 * x;\n        m[1] += m3 * y;\n        m[2] += m3 * z;\n\n        const m7 = m[7];\n        m[4] += m7 * x;\n        m[5] += m7 * y;\n        m[6] += m7 * z;\n\n        const m11 = m[11];\n        m[8] += m11 * x;\n        m[9] += m11 * y;\n        m[10] += m11 * z;\n\n        const m15 = m[15];\n        m[12] += m15 * x;\n        m[13] += m15 * y;\n        m[14] += m15 * z;\n\n        return m;\n    },\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4v\n     * @static\n     */\n    rotationMat4v(anglerad, axis, m) {\n        const ax = math.normalizeVec4([axis[0], axis[1], axis[2], 0.0], []);\n        const s = Math.sin(anglerad);\n        const c = Math.cos(anglerad);\n        const q = 1.0 - c;\n\n        const x = ax[0];\n        const y = ax[1];\n        const z = ax[2];\n\n        let xy;\n        let yz;\n        let zx;\n        let xs;\n        let ys;\n        let zs;\n\n        //xx = x * x; used once\n        //yy = y * y; used once\n        //zz = z * z; used once\n        xy = x * y;\n        yz = y * z;\n        zx = z * x;\n        xs = x * s;\n        ys = y * s;\n        zs = z * s;\n\n        m = m || math.mat4();\n\n        m[0] = (q * x * x) + c;\n        m[1] = (q * xy) + zs;\n        m[2] = (q * zx) - ys;\n        m[3] = 0.0;\n\n        m[4] = (q * xy) - zs;\n        m[5] = (q * y * y) + c;\n        m[6] = (q * yz) + xs;\n        m[7] = 0.0;\n\n        m[8] = (q * zx) + ys;\n        m[9] = (q * yz) - xs;\n        m[10] = (q * z * z) + c;\n        m[11] = 0.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4c\n     * @static\n     */\n    rotationMat4c(anglerad, x, y, z, mat) {\n        return math.rotationMat4v(anglerad, [x, y, z], mat);\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4v\n     * @static\n     */\n    scalingMat4v(v, m = math.identityMat4()) {\n        m[0] = v[0];\n        m[5] = v[1];\n        m[10] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 scale matrix.\n     * @method scalingMat3v\n     * @static\n     */\n    scalingMat3v(v, m = math.identityMat3()) {\n        m[0] = v[0];\n        m[4] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4c\n     * @static\n     */\n    scalingMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.scalingMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    scaleMat4c(x, y, z, m) {\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n        return m;\n    },\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param xyz\n     * @param m\n     */\n    scaleMat4v(xyz, m) {\n\n        const x = xyz[0];\n        const y = xyz[1];\n        const z = xyz[2];\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4s\n     * @static\n     */\n    scalingMat4s(s) {\n        return math.scalingMat4c(s, s, s);\n    },\n\n    /**\n     * Creates a matrix from a quaternion rotation and vector translation\n     *\n     * @param {Number[]} q Rotation quaternion\n     * @param {Number[]} v Translation vector\n     * @param {Number[]} dest Destination matrix\n     * @returns {Number[]} dest\n     */\n    rotationTranslationMat4(q, v, dest = math.mat4()) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        dest[0] = 1 - (yy + zz);\n        dest[1] = xy + wz;\n        dest[2] = xz - wy;\n        dest[3] = 0;\n        dest[4] = xy - wz;\n        dest[5] = 1 - (xx + zz);\n        dest[6] = yz + wx;\n        dest[7] = 0;\n        dest[8] = xz + wy;\n        dest[9] = yz - wx;\n        dest[10] = 1 - (xx + yy);\n        dest[11] = 0;\n        dest[12] = v[0];\n        dest[13] = v[1];\n        dest[14] = v[2];\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Gets Euler angles from a 4x4 matrix.\n     *\n     * @param {Number[]} mat The 4x4 matrix.\n     * @param {String} order Desired Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination Euler angles, created by default.\n     * @returns {Number[]} The Euler angles.\n     */\n    mat4ToEuler(mat, order, dest = math.vec4()) {\n        const clamp = math.clamp;\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = mat[0];\n\n        const m12 = mat[4];\n        const m13 = mat[8];\n        const m21 = mat[1];\n        const m22 = mat[5];\n        const m23 = mat[9];\n        const m31 = mat[2];\n        const m32 = mat[6];\n        const m33 = mat[10];\n\n        if (order === 'XYZ') {\n\n            dest[1] = Math.asin(clamp(m13, -1, 1));\n\n            if (Math.abs(m13) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[2] = Math.atan2(-m12, m11);\n            } else {\n                dest[0] = Math.atan2(m32, m22);\n                dest[2] = 0;\n\n            }\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = Math.asin(-clamp(m23, -1, 1));\n\n            if (Math.abs(m23) < 0.99999) {\n                dest[1] = Math.atan2(m13, m33);\n                dest[2] = Math.atan2(m21, m22);\n            } else {\n                dest[1] = Math.atan2(-m31, m11);\n                dest[2] = 0;\n            }\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = Math.asin(clamp(m32, -1, 1));\n\n            if (Math.abs(m32) < 0.99999) {\n                dest[1] = Math.atan2(-m31, m33);\n                dest[2] = Math.atan2(-m12, m22);\n            } else {\n                dest[1] = 0;\n                dest[2] = Math.atan2(m21, m11);\n            }\n\n        } else if (order === 'ZYX') {\n\n            dest[1] = Math.asin(-clamp(m31, -1, 1));\n\n            if (Math.abs(m31) < 0.99999) {\n                dest[0] = Math.atan2(m32, m33);\n                dest[2] = Math.atan2(m21, m11);\n            } else {\n                dest[0] = 0;\n                dest[2] = Math.atan2(-m12, m22);\n            }\n\n        } else if (order === 'YZX') {\n\n            dest[2] = Math.asin(clamp(m21, -1, 1));\n\n            if (Math.abs(m21) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m22);\n                dest[1] = Math.atan2(-m31, m11);\n            } else {\n                dest[0] = 0;\n                dest[1] = Math.atan2(m13, m33);\n            }\n\n        } else if (order === 'XZY') {\n\n            dest[2] = Math.asin(-clamp(m12, -1, 1));\n\n            if (Math.abs(m12) < 0.99999) {\n                dest[0] = Math.atan2(m32, m22);\n                dest[1] = Math.atan2(m13, m11);\n            } else {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[1] = 0;\n            }\n        }\n\n        return dest;\n    },\n\n    composeMat4(position, quaternion, scale, mat = math.mat4()) {\n        math.quaternionToRotationMat4(quaternion, mat);\n        math.scaleMat4v(scale, mat);\n        math.translateMat4v(position, mat);\n\n        return mat;\n    },\n\n    decomposeMat4: (() => {\n\n        const vec = new FloatArrayType(3);\n        const matrix = new FloatArrayType(16);\n\n        return function decompose(mat, position, quaternion, scale) {\n\n            vec[0] = mat[0];\n            vec[1] = mat[1];\n            vec[2] = mat[2];\n\n            let sx = math.lenVec3(vec);\n\n            vec[0] = mat[4];\n            vec[1] = mat[5];\n            vec[2] = mat[6];\n\n            const sy = math.lenVec3(vec);\n\n            vec[8] = mat[8];\n            vec[9] = mat[9];\n            vec[10] = mat[10];\n\n            const sz = math.lenVec3(vec);\n\n            // if determine is negative, we need to invert one scale\n            const det = math.determinantMat4(mat);\n\n            if (det < 0) {\n                sx = -sx;\n            }\n\n            position[0] = mat[12];\n            position[1] = mat[13];\n            position[2] = mat[14];\n\n            // scale the rotation part\n            matrix.set(mat);\n\n            const invSX = 1 / sx;\n            const invSY = 1 / sy;\n            const invSZ = 1 / sz;\n\n            matrix[0] *= invSX;\n            matrix[1] *= invSX;\n            matrix[2] *= invSX;\n\n            matrix[4] *= invSY;\n            matrix[5] *= invSY;\n            matrix[6] *= invSY;\n\n            matrix[8] *= invSZ;\n            matrix[9] *= invSZ;\n            matrix[10] *= invSZ;\n\n            math.mat4ToQuaternion(matrix, quaternion);\n\n            scale[0] = sx;\n            scale[1] = sy;\n            scale[2] = sz;\n\n            return this;\n\n        };\n\n    })(),\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4v\n     * @param pos vec3 position of the viewer\n     * @param target vec3 point the viewer is looking at\n     * @param up vec3 pointing \"up\"\n     * @param dest mat4 Optional, mat4 matrix will be written into\n     *\n     * @return {mat4} dest if specified, a new mat4 otherwise\n     */\n    lookAtMat4v(pos, target, up, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n\n        const posx = pos[0];\n        const posy = pos[1];\n        const posz = pos[2];\n        const upx = up[0];\n        const upy = up[1];\n        const upz = up[2];\n        const targetx = target[0];\n        const targety = target[1];\n        const targetz = target[2];\n\n        if (posx === targetx && posy === targety && posz === targetz) {\n            return math.identityMat4();\n        }\n\n        let z0;\n        let z1;\n        let z2;\n        let x0;\n        let x1;\n        let x2;\n        let y0;\n        let y1;\n        let y2;\n        let len;\n\n        //vec3.direction(eye, center, z);\n        z0 = posx - targetx;\n        z1 = posy - targety;\n        z2 = posz - targetz;\n\n        // normalize (no check needed for 0 because of early return)\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n\n        //vec3.normalize(vec3.cross(up, z, x));\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n        if (!len) {\n            x0 = 0;\n            x1 = 0;\n            x2 = 0;\n        } else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n\n        //vec3.normalize(vec3.cross(z, x, y));\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n        if (!len) {\n            y0 = 0;\n            y1 = 0;\n            y2 = 0;\n        } else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n\n        dest[0] = x0;\n        dest[1] = y0;\n        dest[2] = z0;\n        dest[3] = 0;\n        dest[4] = x1;\n        dest[5] = y1;\n        dest[6] = z1;\n        dest[7] = 0;\n        dest[8] = x2;\n        dest[9] = y2;\n        dest[10] = z2;\n        dest[11] = 0;\n        dest[12] = -(x0 * posx + x1 * posy + x2 * posz);\n        dest[13] = -(y0 * posx + y1 * posy + y2 * posz);\n        dest[14] = -(z0 * posx + z1 * posy + z2 * posz);\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4c\n     * @static\n     */\n    lookAtMat4c(posx, posy, posz, targetx, targety, targetz, upx, upy, upz) {\n        return math.lookAtMat4v([posx, posy, posz], [targetx, targety, targetz], [upx, upy, upz], []);\n    },\n\n    /**\n     * Returns a 4x4 orthographic projection matrix.\n     * @method orthoMat4c\n     * @static\n     */\n    orthoMat4c(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n\n        dest[0] = 2.0 / rl;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 0.0;\n\n        dest[4] = 0.0;\n        dest[5] = 2.0 / tb;\n        dest[6] = 0.0;\n        dest[7] = 0.0;\n\n        dest[8] = 0.0;\n        dest[9] = 0.0;\n        dest[10] = -2.0 / fn;\n        dest[11] = 0.0;\n\n        dest[12] = -(left + right) / rl;\n        dest[13] = -(top + bottom) / tb;\n        dest[14] = -(far + near) / fn;\n        dest[15] = 1.0;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4v(fmin, fmax, m) {\n        if (!m) {\n            m = math.mat4();\n        }\n\n        const fmin4 = [fmin[0], fmin[1], fmin[2], 0.0];\n        const fmax4 = [fmax[0], fmax[1], fmax[2], 0.0];\n\n        math.addVec4(fmax4, fmin4, tempMat1);\n        math.subVec4(fmax4, fmin4, tempMat2);\n\n        const t = 2.0 * fmin4[2];\n\n        const tempMat20 = tempMat2[0];\n        const tempMat21 = tempMat2[1];\n        const tempMat22 = tempMat2[2];\n\n        m[0] = t / tempMat20;\n        m[1] = 0.0;\n        m[2] = 0.0;\n        m[3] = 0.0;\n\n        m[4] = 0.0;\n        m[5] = t / tempMat21;\n        m[6] = 0.0;\n        m[7] = 0.0;\n\n        m[8] = tempMat1[0] / tempMat20;\n        m[9] = tempMat1[1] / tempMat21;\n        m[10] = -tempMat1[2] / tempMat22;\n        m[11] = -1.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = -t * fmax4[2] / tempMat22;\n        m[15] = 0.0;\n\n        return m;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n        dest[0] = (near * 2) / rl;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 0;\n        dest[4] = 0;\n        dest[5] = (near * 2) / tb;\n        dest[6] = 0;\n        dest[7] = 0;\n        dest[8] = (right + left) / rl;\n        dest[9] = (top + bottom) / tb;\n        dest[10] = -(far + near) / fn;\n        dest[11] = -1;\n        dest[12] = 0;\n        dest[13] = 0;\n        dest[14] = -(far * near * 2) / fn;\n        dest[15] = 0;\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method perspectiveMat4v\n     * @static\n     */\n    perspectiveMat4(fovyrad, aspectratio, znear, zfar, m) {\n        const pmin = [];\n        const pmax = [];\n\n        pmin[2] = znear;\n        pmax[2] = zfar;\n\n        pmax[1] = pmin[2] * Math.tan(fovyrad / 2.0);\n        pmin[1] = -pmax[1];\n\n        pmax[0] = pmax[1] * aspectratio;\n        pmin[0] = -pmax[0];\n\n        return math.frustumMat4v(pmin, pmax, m);\n    },\n\n    /**\n     * Transforms a three-element position by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint3(m, p, dest = math.vec3()) {\n\n        const x = p[0];\n        const y = p[1];\n        const z = p[2];\n\n        dest[0] = (m[0] * x) + (m[4] * y) + (m[8] * z) + m[12];\n        dest[1] = (m[1] * x) + (m[5] * y) + (m[9] * z) + m[13];\n        dest[2] = (m[2] * x) + (m[6] * y) + (m[10] * z) + m[14];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a homogeneous coordinate by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint4(m, v, dest = math.vec4()) {\n        dest[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n        dest[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n        dest[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n        dest[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n\n        return dest;\n    },\n\n\n    /**\n     * Transforms an array of three-element positions by a 4x4 matrix.\n     * @method transformPoints3\n     * @static\n     */\n    transformPoints3(m, points, points2) {\n        const result = points2 || [];\n        const len = points.length;\n        let p0;\n        let p1;\n        let p2;\n        let pi;\n\n        // cache values\n        const m0 = m[0];\n\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        let r;\n\n        for (let i = 0; i < len; ++i) {\n\n            // cache values\n            pi = points[i];\n\n            p0 = pi[0];\n            p1 = pi[1];\n            p2 = pi[2];\n\n            r = result[i] || (result[i] = [0, 0, 0]);\n\n            r[0] = (m0 * p0) + (m4 * p1) + (m8 * p2) + m12;\n            r[1] = (m1 * p0) + (m5 * p1) + (m9 * p2) + m13;\n            r[2] = (m2 * p0) + (m6 * p1) + (m10 * p2) + m14;\n            r[3] = (m3 * p0) + (m7 * p1) + (m11 * p2) + m15;\n        }\n\n        result.length = len;\n\n        return result;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions3\n     * @static\n     */\n    transformPositions3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 3) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions4\n     * @static\n     */\n    transformPositions4(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms a three-element vector by a 4x4 matrix.\n     * @method transformVec3\n     * @static\n     */\n    transformVec3(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dest = dest || this.vec3();\n        dest[0] = (m[0] * v0) + (m[4] * v1) + (m[8] * v2);\n        dest[1] = (m[1] * v0) + (m[5] * v1) + (m[9] * v2);\n        dest[2] = (m[2] * v0) + (m[6] * v1) + (m[10] * v2);\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 matrix.\n     * @method transformVec4\n     * @static\n     */\n    transformVec4(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest = dest || math.vec4();\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @method rotateVec3X\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3X(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @method rotateVec3Y\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Y(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @method rotateVec3Z\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Z(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n        r[2] = p[2];\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 projection matrix.\n     *\n     * @method projectVec4\n     * @param {Number[]} p 3D View-space coordinate\n     * @param {Number[]} q 2D Projected coordinate\n     * @returns {Number[]} 2D Projected coordinate\n     * @static\n     */\n    projectVec4(p, q) {\n        const f = 1.0 / p[3];\n        q = q || math.vec2();\n        q[0] = v[0] * f;\n        q[1] = v[1] * f;\n        return q;\n    },\n\n    /**\n     * Unprojects a three-element vector.\n     *\n     * @method unprojectVec3\n     * @param {Number[]} p 3D Projected coordinate\n     * @param {Number[]} viewMat View matrix\n     * @returns {Number[]} projMat Projection matrix\n     * @static\n     */\n    unprojectVec3: ((() => {\n        const mat = new FloatArrayType(16);\n        const mat2 = new FloatArrayType(16);\n        const mat3 = new FloatArrayType(16);\n        return function (p, viewMat, projMat, q) {\n            return this.transformVec3(this.mulMat4(this.inverseMat4(viewMat, mat), this.inverseMat4(projMat, mat2), mat3), p, q)\n        };\n    }))(),\n\n    /**\n     * Linearly interpolates between two 3D vectors.\n     * @method lerpVec3\n     * @static\n     */\n    lerpVec3(t, t1, t2, p1, p2, dest) {\n        const result = dest || math.vec3();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = p1[0] + (f * (p2[0] - p1[0]));\n        result[1] = p1[1] + (f * (p2[1] - p1[1]));\n        result[2] = p1[2] + (f * (p2[2] - p1[2]));\n        return result;\n    },\n\n\n    /**\n     * Flattens a two-dimensional array into a one-dimensional array.\n     *\n     * @method flatten\n     * @static\n     * @param {Array of Arrays} a A 2D array\n     * @returns Flattened 1D array\n     */\n    flatten(a) {\n\n        const result = [];\n\n        let i;\n        let leni;\n        let j;\n        let lenj;\n        let item;\n\n        for (i = 0, leni = a.length; i < leni; i++) {\n            item = a[i];\n            for (j = 0, lenj = item.length; j < lenj; j++) {\n                result.push(item[j]);\n            }\n        }\n\n        return result;\n    },\n\n\n    identityQuaternion(dest = math.vec4()) {\n        dest[0] = 0.0;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 1.0;\n        return dest;\n    },\n\n    /**\n     * Initializes a quaternion from Euler angles.\n     *\n     * @param {Number[]} euler The Euler angles.\n     * @param {String} order Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination quaternion, created by default.\n     * @returns {Number[]} The quaternion.\n     */\n    eulerToQuaternion(euler, order, dest = math.vec4()) {\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        const a = (euler[0] * math.DEGTORAD) / 2;\n        const b = (euler[1] * math.DEGTORAD) / 2;\n        const c = (euler[2] * math.DEGTORAD) / 2;\n\n        const c1 = Math.cos(a);\n        const c2 = Math.cos(b);\n        const c3 = Math.cos(c);\n        const s1 = Math.sin(a);\n        const s2 = Math.sin(b);\n        const s3 = Math.sin(c);\n\n        if (order === 'XYZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'ZYX') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'YZX') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'XZY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n\n        return dest;\n    },\n\n    mat4ToQuaternion(m, dest = math.vec4()) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = m[0];\n        const m12 = m[4];\n        const m13 = m[8];\n        const m21 = m[1];\n        const m22 = m[5];\n        const m23 = m[9];\n        const m31 = m[2];\n        const m32 = m[6];\n        const m33 = m[10];\n        let s;\n\n        const trace = m11 + m22 + m33;\n\n        if (trace > 0) {\n\n            s = 0.5 / Math.sqrt(trace + 1.0);\n\n            dest[3] = 0.25 / s;\n            dest[0] = (m32 - m23) * s;\n            dest[1] = (m13 - m31) * s;\n            dest[2] = (m21 - m12) * s;\n\n        } else if (m11 > m22 && m11 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n            dest[3] = (m32 - m23) / s;\n            dest[0] = 0.25 * s;\n            dest[1] = (m12 + m21) / s;\n            dest[2] = (m13 + m31) / s;\n\n        } else if (m22 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n            dest[3] = (m13 - m31) / s;\n            dest[0] = (m12 + m21) / s;\n            dest[1] = 0.25 * s;\n            dest[2] = (m23 + m32) / s;\n\n        } else {\n\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n            dest[3] = (m21 - m12) / s;\n            dest[0] = (m13 + m31) / s;\n            dest[1] = (m23 + m32) / s;\n            dest[2] = 0.25 * s;\n        }\n\n        return dest;\n    },\n\n    vec3PairToQuaternion(u, v, dest = math.vec4()) {\n        const norm_u_norm_v = Math.sqrt(math.dotVec3(u, u) * math.dotVec3(v, v));\n        let real_part = norm_u_norm_v + math.dotVec3(u, v);\n\n        if (real_part < 0.00000001 * norm_u_norm_v) {\n\n            // If u and v are exactly opposite, rotate 180 degrees\n            // around an arbitrary orthogonal axis. Axis normalisation\n            // can happen later, when we normalise the quaternion.\n\n            real_part = 0.0;\n\n            if (Math.abs(u[0]) > Math.abs(u[2])) {\n\n                dest[0] = -u[1];\n                dest[1] = u[0];\n                dest[2] = 0;\n\n            } else {\n                dest[0] = 0;\n                dest[1] = -u[2];\n                dest[2] = u[1]\n            }\n\n        } else {\n\n            // Otherwise, build quaternion the standard way.\n            math.cross3Vec3(u, v, dest);\n        }\n\n        dest[3] = real_part;\n\n        return math.normalizeQuaternion(dest);\n    },\n\n    angleAxisToQuaternion(angleAxis, dest = math.vec4()) {\n        const halfAngle = angleAxis[3] / 2.0;\n        const fsin = Math.sin(halfAngle);\n        dest[0] = fsin * angleAxis[0];\n        dest[1] = fsin * angleAxis[1];\n        dest[2] = fsin * angleAxis[2];\n        dest[3] = Math.cos(halfAngle);\n        return dest;\n    },\n\n    quaternionToEuler: ((() => {\n        const mat = new FloatArrayType(16);\n        return (q, order, dest) => {\n            dest = dest || math.vec3();\n            math.quaternionToRotationMat4(q, mat);\n            math.mat4ToEuler(mat, order, dest);\n            return dest;\n        };\n    }))(),\n\n    mulQuaternions(p, q, dest = math.vec4()) {\n        const p0 = p[0];\n        const p1 = p[1];\n        const p2 = p[2];\n        const p3 = p[3];\n        const q0 = q[0];\n        const q1 = q[1];\n        const q2 = q[2];\n        const q3 = q[3];\n        dest[0] = p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1;\n        dest[1] = p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2;\n        dest[2] = p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0;\n        dest[3] = p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2;\n        return dest;\n    },\n\n    vec3ApplyQuaternion(q, vec, dest = math.vec3()) {\n        const x = vec[0];\n        const y = vec[1];\n        const z = vec[2];\n\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n\n        // calculate quat * vector\n\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n\n        dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n        return dest;\n    },\n\n    quaternionToMat4(q, dest) {\n\n        dest = math.identityMat4(dest);\n\n        const q0 = q[0];  //x\n        const q1 = q[1];  //y\n        const q2 = q[2];  //z\n        const q3 = q[3];  //w\n\n        const tx = 2.0 * q0;\n        const ty = 2.0 * q1;\n        const tz = 2.0 * q2;\n\n        const twx = tx * q3;\n        const twy = ty * q3;\n        const twz = tz * q3;\n\n        const txx = tx * q0;\n        const txy = ty * q0;\n        const txz = tz * q0;\n\n        const tyy = ty * q1;\n        const tyz = tz * q1;\n        const tzz = tz * q2;\n\n        dest[0] = 1.0 - (tyy + tzz);\n        dest[1] = txy + twz;\n        dest[2] = txz - twy;\n\n        dest[4] = txy - twz;\n        dest[5] = 1.0 - (txx + tzz);\n        dest[6] = tyz + twx;\n\n        dest[8] = txz + twy;\n        dest[9] = tyz - twx;\n\n        dest[10] = 1.0 - (txx + tyy);\n\n        return dest;\n    },\n\n    quaternionToRotationMat4(q, m) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        m[0] = 1 - (yy + zz);\n        m[4] = xy - wz;\n        m[8] = xz + wy;\n\n        m[1] = xy + wz;\n        m[5] = 1 - (xx + zz);\n        m[9] = yz - wx;\n\n        m[2] = xz - wy;\n        m[6] = yz + wx;\n        m[10] = 1 - (xx + yy);\n\n        // last column\n        m[3] = 0;\n        m[7] = 0;\n        m[11] = 0;\n\n        // bottom row\n        m[12] = 0;\n        m[13] = 0;\n        m[14] = 0;\n        m[15] = 1;\n\n        return m;\n    },\n\n    normalizeQuaternion(q, dest = q) {\n        const len = math.lenVec4([q[0], q[1], q[2], q[3]]);\n        dest[0] = q[0] / len;\n        dest[1] = q[1] / len;\n        dest[2] = q[2] / len;\n        dest[3] = q[3] / len;\n        return dest;\n    },\n\n    conjugateQuaternion(q, dest = q) {\n        dest[0] = -q[0];\n        dest[1] = -q[1];\n        dest[2] = -q[2];\n        dest[3] = q[3];\n        return dest;\n    },\n\n    inverseQuaternion(q, dest) {\n        return math.normalizeQuaternion(math.conjugateQuaternion(q, dest));\n    },\n\n    quaternionToAngleAxis(q, angleAxis = math.vec4()) {\n        q = math.normalizeQuaternion(q, tempVec4);\n        const q3 = q[3];\n        const angle = 2 * Math.acos(q3);\n        const s = Math.sqrt(1 - q3 * q3);\n        if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n            angleAxis[0] = q[0];\n            angleAxis[1] = q[1];\n            angleAxis[2] = q[2];\n        } else {\n            angleAxis[0] = q[0] / s;\n            angleAxis[1] = q[1] / s;\n            angleAxis[2] = q[2] / s;\n        }\n        angleAxis[3] = angle; // * 57.295779579;\n        return angleAxis;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundaries\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns a new, uninitialized 3D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB3(values) {\n        return new FloatArrayType(values || 6);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB2(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB3(values) {\n        return new FloatArrayType(values || 32);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB2(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /** Returns a new 3D bounding sphere */\n    Sphere3(x, y, z, r) {\n        return new FloatArrayType([x, y, z, r]);\n    },\n\n    /**\n     * Transforms an OBB3 by a 4x4 matrix.\n     *\n     * @private\n     */\n    transformOBB3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /** Returns true if the first AABB contains the second AABB.\n     * @param aabb1\n     * @param aabb2\n     * @returns {boolean}\n     */\n    containsAABB3: function (aabb1, aabb2) {\n        const result = (\n            aabb1[0] <= aabb2[0] && aabb2[3] <= aabb1[3] &&\n            aabb1[1] <= aabb2[1] && aabb2[4] <= aabb1[4] &&\n            aabb1[2] <= aabb2[2] && aabb2[5] <= aabb1[5]);\n        return result;\n    },\n\n    /**\n     * Gets the diagonal size of an AABB3 given as minima and maxima.\n     *\n     * @private\n     */\n    getAABB3Diag: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return aabb => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            math.subVec3(max, min, tempVec3);\n\n            return Math.abs(math.lenVec3(tempVec3));\n        };\n    }))(),\n\n    /**\n     * Get a diagonal boundary size that is symmetrical about the given point.\n     *\n     * @private\n     */\n    getAABB3DiagPoint: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return (aabb, p) => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            const diagVec = math.subVec3(max, min, tempVec3);\n\n            const xneg = p[0] - aabb[0];\n            const xpos = aabb[3] - p[0];\n            const yneg = p[1] - aabb[1];\n            const ypos = aabb[4] - p[1];\n            const zneg = p[2] - aabb[2];\n            const zpos = aabb[5] - p[2];\n\n            diagVec[0] += (xneg > xpos) ? xneg : xpos;\n            diagVec[1] += (yneg > ypos) ? yneg : ypos;\n            diagVec[2] += (zneg > zpos) ? zneg : zpos;\n\n            return Math.abs(math.lenVec3(diagVec));\n        };\n    }))(),\n\n    /**\n     * Gets the center of an AABB.\n     *\n     * @private\n     */\n    getAABB3Center(aabb, dest) {\n        const r = dest || math.vec3();\n\n        r[0] = (aabb[0] + aabb[3]) / 2;\n        r[1] = (aabb[1] + aabb[4]) / 2;\n        r[2] = (aabb[2] + aabb[5]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Gets the center of a 2D AABB.\n     *\n     * @private\n     */\n    getAABB2Center(aabb, dest) {\n        const r = dest || math.vec2();\n\n        r[0] = (aabb[2] + aabb[0]) / 2;\n        r[1] = (aabb[3] + aabb[1]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB3(aabb = math.AABB3()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MAX_DOUBLE;\n        aabb[3] = -math.MAX_DOUBLE;\n        aabb[4] = -math.MAX_DOUBLE;\n        aabb[5] = -math.MAX_DOUBLE;\n\n        return aabb;\n    },\n\n    decompressAABB(aabb, decodeMatrix, dest = aabb) {\n        dest[0] = aabb[0] * decodeMatrix[0] + decodeMatrix[12];\n        dest[1] = aabb[1] * decodeMatrix[5] + decodeMatrix[13];\n        dest[2] = aabb[2] * decodeMatrix[10] + decodeMatrix[14];\n        dest[3] = aabb[3] * decodeMatrix[0] + decodeMatrix[12];\n        dest[4] = aabb[4] * decodeMatrix[5] + decodeMatrix[13];\n        dest[5] = aabb[5] * decodeMatrix[10] + decodeMatrix[14];\n        return dest;\n    },\n\n    /**\n     * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n     * an array of eight 3D positions, one for each corner of the boundary.\n     *\n     * @private\n     */\n    AABB3ToOBB3(aabb, obb = math.OBB3()) {\n        obb[0] = aabb[0];\n        obb[1] = aabb[1];\n        obb[2] = aabb[2];\n        obb[3] = 1;\n\n        obb[4] = aabb[3];\n        obb[5] = aabb[1];\n        obb[6] = aabb[2];\n        obb[7] = 1;\n\n        obb[8] = aabb[3];\n        obb[9] = aabb[4];\n        obb[10] = aabb[2];\n        obb[11] = 1;\n\n        obb[12] = aabb[0];\n        obb[13] = aabb[4];\n        obb[14] = aabb[2];\n        obb[15] = 1;\n\n        obb[16] = aabb[0];\n        obb[17] = aabb[1];\n        obb[18] = aabb[5];\n        obb[19] = 1;\n\n        obb[20] = aabb[3];\n        obb[21] = aabb[1];\n        obb[22] = aabb[5];\n        obb[23] = 1;\n\n        obb[24] = aabb[3];\n        obb[25] = aabb[4];\n        obb[26] = aabb[5];\n        obb[27] = 1;\n\n        obb[28] = aabb[0];\n        obb[29] = aabb[4];\n        obb[30] = aabb[5];\n        obb[31] = 1;\n\n        return obb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    positions3ToAABB3: ((() => {\n\n        const p = new FloatArrayType(3);\n\n        return (positions, aabb, positionsDecodeMatrix) => {\n            aabb = aabb || math.AABB3();\n\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = -math.MAX_DOUBLE;\n            let ymax = -math.MAX_DOUBLE;\n            let zmax = -math.MAX_DOUBLE;\n\n            let x;\n            let y;\n            let z;\n\n            for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                if (positionsDecodeMatrix) {\n\n                    p[0] = positions[i + 0];\n                    p[1] = positions[i + 1];\n                    p[2] = positions[i + 2];\n\n                    math.decompressPosition(p, positionsDecodeMatrix, p);\n\n                    x = p[0];\n                    y = p[1];\n                    z = p[2];\n\n                } else {\n                    x = positions[i + 0];\n                    y = positions[i + 1];\n                    z = positions[i + 2];\n                }\n\n                if (x < xmin) {\n                    xmin = x;\n                }\n\n                if (y < ymin) {\n                    ymin = y;\n                }\n\n                if (z < zmin) {\n                    zmin = z;\n                }\n\n                if (x > xmax) {\n                    xmax = x;\n                }\n\n                if (y > ymax) {\n                    ymax = y;\n                }\n\n                if (z > zmax) {\n                    zmax = z;\n                }\n            }\n\n            aabb[0] = xmin;\n            aabb[1] = ymin;\n            aabb[2] = zmin;\n            aabb[3] = xmax;\n            aabb[4] = ymax;\n            aabb[5] = zmax;\n\n            return aabb;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    OBB3ToAABB3(obb, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n        let zmax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = obb.length; i < len; i += 4) {\n\n            x = obb[i + 0];\n            y = obb[i + 1];\n            z = obb[i + 2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToAABB3(points, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n        let zmax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = points.length; i < len; i++) {\n\n            x = points[i][0];\n            y = points[i][1];\n            z = points[i][2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToSphere3: ((() => {\n\n        const tempVec3 = new FloatArrayType(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const numPoints = points.length;\n\n            for (i = 0; i < numPoints; i++) {\n                x += points[i][0];\n                y += points[i][1];\n                z += points[i][2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < numPoints; i++) {\n\n                dist = Math.abs(math.lenVec3(math.subVec3(points[i], sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D positions.\n     *\n     * @private\n     */\n    positions3ToSphere3: ((() => {\n\n        const tempVec3a = new FloatArrayType(3);\n        const tempVec3b = new FloatArrayType(3);\n\n        return (positions, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPositions = positions.length;\n            let radius = 0;\n\n            for (i = 0; i < lenPositions; i += 3) {\n                x += positions[i];\n                y += positions[i + 1];\n                z += positions[i + 2];\n            }\n\n            const numPositions = lenPositions / 3;\n\n            sphere[0] = x / numPositions;\n            sphere[1] = y / numPositions;\n            sphere[2] = z / numPositions;\n\n            let dist;\n\n            for (i = 0; i < lenPositions; i += 3) {\n\n                tempVec3a[0] = positions[i];\n                tempVec3a[1] = positions[i + 1];\n                tempVec3a[2] = positions[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(tempVec3a, sphere, tempVec3b)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToSphere3: ((() => {\n\n        const point = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPoints = points.length;\n            const numPoints = lenPoints / 4;\n\n            for (i = 0; i < lenPoints; i += 4) {\n                x += points[i + 0];\n                y += points[i + 1];\n                z += points[i + 2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < lenPoints; i += 4) {\n\n                point[0] = points[i + 0];\n                point[1] = points[i + 1];\n                point[2] = points[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(point, sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Gets the center of a bounding sphere.\n     *\n     * @private\n     */\n    getSphere3Center(sphere, dest = math.vec3()) {\n        dest[0] = sphere[0];\n        dest[1] = sphere[1];\n        dest[2] = sphere[2];\n\n        return dest;\n    },\n\n    /**\n     * Expands the first axis-aligned 3D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB3(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] > aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        if (aabb1[4] < aabb2[4]) {\n            aabb1[4] = aabb2[4];\n        }\n\n        if (aabb1[5] < aabb2[5]) {\n            aabb1[5] = aabb2[5];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given point, if needed.\n     *\n     * @private\n     */\n    expandAABB3Point3(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] > p[2]) {\n            aabb[2] = p[2];\n        }\n\n        if (aabb[3] < p[0]) {\n            aabb[3] = p[0];\n        }\n\n        if (aabb[4] < p[1]) {\n            aabb[4] = p[1];\n        }\n\n        if (aabb[5] < p[2]) {\n            aabb[5] = p[2];\n        }\n\n        return aabb;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given points, if needed.\n     *\n     * @private\n     */\n    expandAABB3Points3(aabb, positions) {\n        var x;\n        var y;\n        var z;\n        for (var i = 0, len = positions.length; i < len; i += 3) {\n            x = positions[i];\n            y = positions[i + 1];\n            z = positions[i + 2];\n            if (aabb[0] > x) {\n                aabb[0] = x;\n            }\n            if (aabb[1] > y) {\n                aabb[1] = y;\n            }\n            if (aabb[2] > z) {\n                aabb[2] = z;\n            }\n            if (aabb[3] < x) {\n                aabb[3] = x;\n            }\n            if (aabb[4] < y) {\n                aabb[4] = y;\n            }\n            if (aabb[5] < z) {\n                aabb[5] = z;\n            }\n        }\n        return aabb;\n    },\n\n    /**\n     * Calculates the normal vector of a triangle.\n     *\n     * @private\n     */\n    triangleNormal(a, b, c, normal = math.vec3()) {\n        const p1x = b[0] - a[0];\n        const p1y = b[1] - a[1];\n        const p1z = b[2] - a[2];\n\n        const p2x = c[0] - a[0];\n        const p2y = c[1] - a[1];\n        const p2z = c[2] - a[2];\n\n        const p3x = p1y * p2z - p1z * p2y;\n        const p3y = p1z * p2x - p1x * p2z;\n        const p3z = p1x * p2y - p1y * p2x;\n\n        const mag = Math.sqrt(p3x * p3x + p3y * p3y + p3z * p3z);\n        if (mag === 0) {\n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else {\n            normal[0] = p3x / mag;\n            normal[1] = p3y / mag;\n            normal[2] = p3z / mag;\n        }\n\n        return normal\n    }\n};\n\nexport {math};","import {math} from \"../../lib/math.js\";\n\nfunction quantizePositions (positions, lenPositions, aabb, quantizedPositions) {\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xwid = aabb[3] - xmin;\n    const ywid = aabb[4] - ymin;\n    const zwid = aabb[5] - zmin;\n    const maxInt = 65535;\n    const xMultiplier = maxInt / xwid;\n    const yMultiplier = maxInt / ywid;\n    const zMultiplier = maxInt / zwid;\n    const verify = (num) => num >= 0 ? num : 0;\n    for (let i = 0; i < lenPositions; i += 3) {\n        quantizedPositions[i + 0] = Math.max(0, Math.min(65535,Math.floor(verify(positions[i + 0] - xmin) * xMultiplier)));\n        quantizedPositions[i + 1] = Math.max(0, Math.min(65535,Math.floor(verify(positions[i + 1] - ymin) * yMultiplier)));\n        quantizedPositions[i + 2] = Math.max(0, Math.min(65535,Math.floor(verify(positions[i + 2] - zmin) * zMultiplier)));\n    }\n}\n\nfunction compressPosition(p, aabb, q) {\n    const multiplier = new Float32Array([\n        aabb[3] !== aabb[0] ? 65535 / (aabb[3] - aabb[0]) : 0,\n        aabb[4] !== aabb[1] ? 65535 / (aabb[4] - aabb[1]) : 0,\n        aabb[5] !== aabb[2] ? 65535 / (aabb[5] - aabb[2]) : 0\n    ]);\n    q[0] = Math.max(0, Math.min(65535, Math.floor((p[0] - aabb[0]) * multiplier[0])));\n    q[1] = Math.max(0, Math.min(65535, Math.floor((p[1] - aabb[1]) * multiplier[1])));\n    q[2] = Math.max(0, Math.min(65535, Math.floor((p[2] - aabb[2]) * multiplier[2])));\n}\n\nvar createPositionsDecodeMatrix = (function () {\n    const translate = math.mat4();\n    const scale = math.mat4();\n    return function (aabb, positionsDecodeMatrix) {\n        positionsDecodeMatrix = positionsDecodeMatrix || math.mat4();\n        const xmin = aabb[0];\n        const ymin = aabb[1];\n        const zmin = aabb[2];\n        const xwid = aabb[3] - xmin;\n        const ywid = aabb[4] - ymin;\n        const zwid = aabb[5] - zmin;\n        const maxInt = 65535;\n        math.identityMat4(translate);\n        math.translationMat4v(aabb, translate);\n        math.identityMat4(scale);\n        math.scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n        math.mulMat4(translate, scale, positionsDecodeMatrix);\n        return positionsDecodeMatrix;\n    };\n})();\n\nfunction transformAndOctEncodeNormals(modelNormalMatrix, normals, lenNormals, compressedNormals, lenCompressedNormals) {\n    // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    let i, ei;\n    let localNormal = math.vec3();\n    let worldNormal =  math.vec3();\n    for (i = 0; i < lenNormals; i += 3) {\n        localNormal[0] = normals[i];\n        localNormal[1] = normals[i + 1];\n        localNormal[2] = normals[i + 2];\n\n        math.transformVec3(modelNormalMatrix, localNormal, worldNormal);\n        math.normalizeVec3(worldNormal, worldNormal);\n\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(worldNormal, 0, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(worldNormal, 0, dec);\n        oct = octEncodeVec3(worldNormal, 0, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, 0, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, 0, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, 0, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, 0, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, 0, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\nfunction octEncodeNormals(normals, lenNormals, compressedNormals, lenCompressedNormals) { // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < lenNormals; i += 3) {\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(normals, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(normals, i, dec);\n        oct = octEncodeVec3(normals, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(normals, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(normals, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\n/**\n * @private\n */\nfunction octEncodeVec3(array, i, xfunc, yfunc) { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\n/**\n * Decode an oct-encoded normal\n */\nfunction octDecodeVec2(oct) {\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\n/**\n * Dot product of a normal in an array against a candidate decoding\n * @private\n */\nfunction dot(array, i, vec3) {\n    return array[i] * vec3[0] + array[i + 1] * vec3[1] + array[i + 2] * vec3[2];\n}\n\n/**\n * @private\n */\nconst geometryCompression = {\n    quantizePositions,\n    compressPosition,\n    createPositionsDecodeMatrix,\n    transformAndOctEncodeNormals,\n    octEncodeNormals,\n};\n\nexport {geometryCompression}","/*----------------------------------------------------------------------------------------------------------------------\n * NOTE: The values of these constants must match those within xeokit-sdk\n *--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * Texture wrapping mode in which the texture repeats to infinity.\n */\nexport const RepeatWrapping = 1000;\n\n/**\n * Texture wrapping mode in which the last pixel of the texture stretches to the edge of the mesh.\n */\nexport const ClampToEdgeWrapping = 1001;\n\n/**\n * Texture wrapping mode in which the texture repeats to infinity, mirroring on each repeat.\n */\nexport const MirroredRepeatWrapping = 1002;\n\n/**\n * Texture magnification and minification filter that returns the nearest texel to the given sample coordinates.\n */\nexport const NearestFilter = 1003;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured and returns the nearest texel to the given sample coordinates.\n */\nexport const NearestMipMapNearestFilter = 1004;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured\n * and returns the nearest texel to the given sample coordinates.\n */\nexport const NearestMipmapNearestFilter = 1004;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured\n * and returns the nearest texel to the center of the pixel at the given sample coordinates.\n */\nexport const NearestMipmapLinearFilter = 1005;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured\n * and returns the nearest texel to the center of the pixel at the given sample coordinates.\n */\nexport const NearestMipMapLinearFilter = 1005;\n\n/**\n * Texture magnification and minification filter that returns the weighted average of the four nearest texels to the given sample coordinates.\n */\nexport const LinearFilter = 1006;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured and\n * returns the weighted average of the four nearest texels to the given sample coordinates.\n */\nexport const LinearMipmapNearestFilter = 1007;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured and\n * returns the weighted average of the four nearest texels to the given sample coordinates.\n */\nexport const LinearMipMapNearestFilter = 1007;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured,\n * finds within each mipmap the weighted average of the nearest texel to the center of the pixel, then returns the\n * weighted average of those two values.\n */\nexport const LinearMipmapLinearFilter = 1008;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured,\n * finds within each mipmap the weighted average of the nearest texel to the center of the pixel, then returns the\n * weighted average of those two values.\n */\nexport const LinearMipMapLinearFilter = 1008;\n\n/**\n * Media type for GIF images.\n */\nexport const GIFMediaType = 10000;\n\n/**\n * Media type for JPEG images.\n */\nexport const JPEGMediaType = 10001;\n\n/**\n * Media type for PNG images.\n */\nexport const PNGMediaType = 10002;","import {math} from \"../../lib/math.js\";\n\n/**\n * @private\n */\nconst buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n// TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = math.vec3();\n    const b = math.vec3();\n    const c = math.vec3();\n    const cb = math.vec3();\n    const ab = math.vec3();\n    const cross = math.vec3();\n    const normal = math.vec3();\n    const inverseNormal = math.vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                math.decompressPosition(compa, positionsDecodeMatrix, a);\n                math.decompressPosition(compb, positionsDecodeMatrix, b);\n                math.decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            math.subVec3(c, b, cb);\n            math.subVec3(a, b, ab);\n            math.cross3Vec3(cb, ab, cross);\n            math.normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: math.vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(math.DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + ',' + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined,\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                inverseNormal[0] = -normal2[0];\n                inverseNormal[1] = -normal2[1];\n                inverseNormal[2] = -normal2[2];\n                dot = Math.abs(math.dotVec3(normal1, normal2));\n                const dot2 = Math.abs(math.dotVec3(normal1, inverseNormal));\n                if (dot > thresholdDot && dot2 > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\n\nexport {buildEdgeIndices};","/**\n * Uses edge adjacency counts to identify if the given triangle mesh can be rendered with backface culling enabled.\n *\n * If all edges are connected to exactly two triangles, then the mesh will likely be a closed solid, and we can safely\n * render it with backface culling enabled.\n *\n * Otherwise, the mesh is a surface, and we must render it with backface culling disabled.\n *\n * @private\n */\nconst isTriangleMeshSolid = (indices, positions, vertexIndexMapping, edges) => {\n\n    function compareIndexPositions(a, b)\n    {\n        let posA, posB;\n\n        for (let i = 0; i < 3; i++) {\n            posA = positions [a*3+i];\n            posB = positions [b*3+i];\n\n            if (posA !== posB) {\n                return posB - posA;\n            }\n        }\n\n        return 0;\n    };\n\n    // Group together indices corresponding to same position coordinates\n    let newIndices = indices.slice ().sort (compareIndexPositions);\n\n    // Calculate the mapping:\n    // - from original index in indices array\n    // - to indices-for-unique-positions\n    let uniqueVertexIndex = null;\n\n    for (let i = 0, len = newIndices.length; i < len; i++) {\n        if (i == 0 || 0 != compareIndexPositions (\n            newIndices[i],\n            newIndices[i-1],\n        )) {\n            // different position\n            uniqueVertexIndex = newIndices [i];\n        }\n\n        vertexIndexMapping [\n            newIndices[i]\n            ] = uniqueVertexIndex;\n    }\n\n    // Generate the list of edges\n    for (let i = 0, len = indices.length; i < len; i += 3) {\n\n        const a = vertexIndexMapping[indices[i]];\n        const b = vertexIndexMapping[indices[i+1]];\n        const c = vertexIndexMapping[indices[i+2]];\n\n        let a2 = a;\n        let b2 = b;\n        let c2 = c;\n\n        if (a > b && a > c) {\n            if (b > c) {\n                a2 = a;\n                b2 = b;\n                c2 = c;\n            } else {\n                a2 = a;\n                b2 = c;\n                c2 = b;\n            }\n        } else if (b > a && b > c) {\n            if (a > c) {\n                a2 = b;\n                b2 = a;\n                c2 = c;\n            } else {\n                a2 = b;\n                b2 = c;\n                c2 = a;\n            }\n        } else if (c > a && c > b) {\n            if (a > b) {\n                a2 = c;\n                b2 = a;\n                c2 = b;\n            } else {\n                a2 = c;\n                b2 = b;\n                c2 = a;\n            }\n        }\n\n        edges[i+0] = [\n            a2, b2\n        ];\n        edges[i+1] = [\n            b2, c2\n        ];\n\n        if (a2 > c2) {\n            const temp = c2;\n            c2 = a2;\n            a2 = temp;\n        }\n\n        edges[i+2] = [\n            c2, a2\n        ];\n    }\n\n    // Group semantically equivalent edgdes together\n    function compareEdges (e1, e2) {\n        let a, b;\n\n        for (let i = 0; i < 2; i++) {\n            a = e1[i];\n            b = e2[i];\n\n            if (b !== a) {\n                return b - a;\n            }\n        }\n\n        return 0;\n    }\n\n    edges = edges.slice(0, indices.length);\n\n    edges.sort (compareEdges);\n\n    // Make sure each edge is used exactly twice\n    let sameEdgeCount = 0;\n\n    for (let i = 0; i < edges.length; i++)\n    {\n        if (i === 0 || 0 !== compareEdges (\n            edges[i], edges[i-1]\n        )) {\n            // different edge\n            if (0 !== i && sameEdgeCount !== 2)\n            {\n                return false;\n            }\n\n            sameEdgeCount = 1;\n        }\n        else\n        {\n            // same edge\n            sameEdgeCount++;\n        }\n    }\n\n    if (edges.length > 0 && sameEdgeCount !== 2)\n    {\n        return false;\n    }\n\n    // Each edge is used exactly twice, this is a\n    // watertight surface and hence a solid geometry.\n    return true;\n};\n\nexport {isTriangleMeshSolid};","/**\n * Represents the usage of a {@link XKTGeometry} by an {@link XKTEntity}.\n *\n * * Created by {@link XKTModel#createEntity}\n * * Stored in {@link XKTEntity#meshes} and {@link XKTModel#meshesList}\n * * Has an {@link XKTGeometry}, and an optional {@link XKTTextureSet}, both of which it can share with other {@link XKTMesh}es\n * * Has {@link XKTMesh#color}, {@link XKTMesh#opacity}, {@link XKTMesh#metallic} and {@link XKTMesh#roughness} PBR attributes\n * @class XKTMesh\n */\nclass XKTMesh {\n\n    /**\n     * @private\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTMesh in {@link XKTModel#meshes}.\n         *\n         * @type {Number}\n         */\n        this.meshId = cfg.meshId;\n\n        /**\n         * Index of this XKTMesh in {@link XKTModel#meshesList};\n         *\n         * @type {Number}\n         */\n        this.meshIndex = cfg.meshIndex;\n\n        /**\n         * The 4x4 modeling transform matrix.\n         *\n         * Transform is relative to the center of the {@link XKTTile} that contains this XKTMesh's {@link XKTEntity},\n         * which is given in {@link XKTMesh#entity}.\n         *\n         * When the ````XKTEntity```` shares its {@link XKTGeometry}s with other ````XKTEntity````s, this matrix is used\n         * to transform this XKTMesh's XKTGeometry into World-space. When this XKTMesh does not share its ````XKTGeometry````,\n         * then this matrix is ignored.\n         *\n         * @type {Number[]}\n         */\n        this.matrix = cfg.matrix;\n\n        /**\n         * The instanced {@link XKTGeometry}.\n         *\n         * @type {XKTGeometry}\n         */\n        this.geometry = cfg.geometry;\n\n        /**\n         * RGB color of this XKTMesh.\n         *\n         * @type {Float32Array}\n         */\n        this.color = cfg.color || new Float32Array([1, 1, 1]);\n\n        /**\n         * PBR metallness of this XKTMesh.\n         *\n         * @type {Number}\n         */\n        this.metallic = (cfg.metallic !== null && cfg.metallic !== undefined) ? cfg.metallic : 0;\n\n        /**\n         * PBR roughness of this XKTMesh.\n         * The {@link XKTTextureSet} that defines the appearance of this XKTMesh.\n         *\n         * @type {Number}\n         * @type {XKTTextureSet}\n         */\n        this.roughness = (cfg.roughness !== null && cfg.roughness !== undefined) ? cfg.roughness : 1;\n\n        /**\n         * Opacity of this XKTMesh.\n         *\n         * @type {Number}\n         */\n        this.opacity = (cfg.opacity !== undefined && cfg.opacity !== null) ? cfg.opacity : 1.0;\n\n        /**\n         * The {@link XKTTextureSet} that defines the appearance of this XKTMesh.\n         *\n         * @type {XKTTextureSet}\n         */\n        this.textureSet = cfg.textureSet;\n\n        /**\n         * The owner {@link XKTEntity}.\n         *\n         * Set by {@link XKTModel#createEntity}.\n         *\n         * @type {XKTEntity}\n         */\n        this.entity = null; // Set after instantiation, when the Entity is known\n    }\n}\n\nexport {XKTMesh};","/**\n * @author https://github.com/tmarti, with support from https://tribia.com/\n * @license MIT\n **/\n\nconst MAX_RE_BUCKET_FAN_OUT = 8;\n\nlet bucketsForIndices = null;\n\nfunction compareBuckets(a, b) {\n    const aa = a * 3;\n    const bb = b * 3;\n    let aa1, aa2, aa3, bb1, bb2, bb3;\n    const minBucketA = Math.min(\n        aa1 = bucketsForIndices[aa],\n        aa2 = bucketsForIndices[aa + 1],\n        aa3 = bucketsForIndices[aa + 2]\n    );\n    const minBucketB = Math.min(\n        bb1 = bucketsForIndices[bb],\n        bb2 = bucketsForIndices[bb + 1],\n        bb3 = bucketsForIndices[bb + 2]\n    );\n    if (minBucketA !== minBucketB) {\n        return minBucketA - minBucketB;\n    }\n    const maxBucketA = Math.max(aa1, aa2, aa3);\n    const maxBucketB = Math.max(bb1, bb2, bb3,);\n    if (maxBucketA !== maxBucketB) {\n        return maxBucketA - maxBucketB;\n    }\n    return 0;\n}\n\nfunction preSortIndices(indices, bitsPerBucket) {\n    const seq = new Int32Array(indices.length / 3);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        seq[i] = i;\n    }\n    bucketsForIndices = new Int32Array(indices.length);\n    for (let i = 0, len = indices.length; i < len; i++) {\n        bucketsForIndices[i] = indices[i] >> bitsPerBucket;\n    }\n    seq.sort(compareBuckets);\n    const sortedIndices = new Int32Array(indices.length);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        sortedIndices[i * 3 + 0] = indices[seq[i] * 3 + 0];\n        sortedIndices[i * 3 + 1] = indices[seq[i] * 3 + 1];\n        sortedIndices[i * 3 + 2] = indices[seq[i] * 3 + 2];\n    }\n    return sortedIndices;\n}\n\nlet compareEdgeIndices = null;\n\nfunction compareIndices(a, b) {\n    let retVal = compareEdgeIndices[a * 2] - compareEdgeIndices[b * 2];\n    if (retVal !== 0) {\n        return retVal;\n    }\n    return compareEdgeIndices[a * 2 + 1] - compareEdgeIndices[b * 2 + 1];\n}\n\nfunction preSortEdgeIndices(edgeIndices) {\n    if ((edgeIndices || []).length === 0) {\n        return [];\n    }\n    let seq = new Int32Array(edgeIndices.length / 2);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        seq[i] = i;\n    }\n    for (let i = 0, j = 0, len = edgeIndices.length; i < len; i += 2) {\n        if (edgeIndices[i] > edgeIndices[i + 1]) {\n            let tmp = edgeIndices[i];\n            edgeIndices[i] = edgeIndices[i + 1];\n            edgeIndices[i + 1] = tmp;\n        }\n    }\n    compareEdgeIndices = new Int32Array(edgeIndices);\n    seq.sort(compareIndices);\n    const sortedEdgeIndices = new Int32Array(edgeIndices.length);\n    for (let i = 0, len = seq.length; i < len; i++) {\n        sortedEdgeIndices[i * 2 + 0] = edgeIndices[seq[i] * 2 + 0];\n        sortedEdgeIndices[i * 2 + 1] = edgeIndices[seq[i] * 2 + 1];\n    }\n    return sortedEdgeIndices;\n}\n\nfunction rebucketPositions(mesh, bitsPerBucket, checkResult = false) {\n    const positionsCompressed = (mesh.positionsCompressed || []);\n    const indices = preSortIndices(mesh.indices || [], bitsPerBucket);\n    const edgeIndices = preSortEdgeIndices(mesh.edgeIndices || []);\n\n    function edgeSearch(el0, el1) { // Code adapted from https://stackoverflow.com/questions/22697936/binary-search-in-javascript\n        if (el0 > el1) {\n            let tmp = el0;\n            el0 = el1;\n            el1 = tmp;\n        }\n\n        function compare_fn(a, b) {\n            if (a !== el0) {\n                return el0 - a;\n            }\n            if (b !== el1) {\n                return el1 - b;\n            }\n            return 0;\n        }\n\n        let m = 0;\n        let n = (edgeIndices.length >> 1) - 1;\n        while (m <= n) {\n            const k = (n + m) >> 1;\n            const cmp = compare_fn(edgeIndices[k * 2], edgeIndices[k * 2 + 1]);\n            if (cmp > 0) {\n                m = k + 1;\n            } else if (cmp < 0) {\n                n = k - 1;\n            } else {\n                return k;\n            }\n        }\n        return -m - 1;\n    }\n\n    const alreadyOutputEdgeIndices = new Int32Array(edgeIndices.length / 2);\n    alreadyOutputEdgeIndices.fill(0);\n\n    const numPositions = positionsCompressed.length / 3;\n\n    if (numPositions > ((1 << bitsPerBucket) * MAX_RE_BUCKET_FAN_OUT)) {\n        return [mesh];\n    }\n\n    const bucketIndicesRemap = new Int32Array(numPositions);\n    bucketIndicesRemap.fill(-1);\n\n    const buckets = [];\n\n    function addEmptyBucket() {\n        bucketIndicesRemap.fill(-1);\n\n        const newBucket = {\n            positionsCompressed: [],\n            indices: [],\n            edgeIndices: [],\n            maxNumPositions: (1 << bitsPerBucket) - bitsPerBucket,\n            numPositions: 0,\n            bucketNumber: buckets.length,\n        };\n\n        buckets.push(newBucket);\n\n        return newBucket;\n    }\n\n    let currentBucket = addEmptyBucket();\n\n    // let currentBucket = 0;\n\n    let retVal = 0;\n\n    for (let i = 0, len = indices.length; i < len; i += 3) {\n        let additonalPositionsInBucket = 0;\n\n        const ii0 = indices[i];\n        const ii1 = indices[i + 1];\n        const ii2 = indices[i + 2];\n\n        if (bucketIndicesRemap[ii0] === -1) {\n            additonalPositionsInBucket++;\n        }\n\n        if (bucketIndicesRemap[ii1] === -1) {\n            additonalPositionsInBucket++;\n        }\n\n        if (bucketIndicesRemap[ii2] === -1) {\n            additonalPositionsInBucket++;\n        }\n\n        if ((additonalPositionsInBucket + currentBucket.numPositions) > currentBucket.maxNumPositions) {\n            currentBucket = addEmptyBucket();\n        }\n\n        if (currentBucket.bucketNumber > MAX_RE_BUCKET_FAN_OUT) {\n            return [mesh];\n        }\n\n        if (bucketIndicesRemap[ii0] === -1) {\n            bucketIndicesRemap[ii0] = currentBucket.numPositions++;\n            currentBucket.positionsCompressed.push(positionsCompressed[ii0 * 3]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii0 * 3 + 1]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii0 * 3 + 2]);\n        }\n\n        if (bucketIndicesRemap[ii1] === -1) {\n            bucketIndicesRemap[ii1] = currentBucket.numPositions++;\n            currentBucket.positionsCompressed.push(positionsCompressed[ii1 * 3]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii1 * 3 + 1]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii1 * 3 + 2]);\n        }\n\n        if (bucketIndicesRemap[ii2] === -1) {\n            bucketIndicesRemap[ii2] = currentBucket.numPositions++;\n            currentBucket.positionsCompressed.push(positionsCompressed[ii2 * 3]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii2 * 3 + 1]);\n            currentBucket.positionsCompressed.push(positionsCompressed[ii2 * 3 + 2]);\n        }\n\n        currentBucket.indices.push(bucketIndicesRemap[ii0]);\n        currentBucket.indices.push(bucketIndicesRemap[ii1]);\n        currentBucket.indices.push(bucketIndicesRemap[ii2]);\n\n        // Check possible edge1\n        let edgeIndex;\n\n        if ((edgeIndex = edgeSearch(ii0, ii1)) >= 0) {\n            if (alreadyOutputEdgeIndices[edgeIndex] === 0) {\n                alreadyOutputEdgeIndices[edgeIndex] = 1;\n\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2]]);\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2 + 1]]);\n            }\n        }\n\n        if ((edgeIndex = edgeSearch(ii0, ii2)) >= 0) {\n            if (alreadyOutputEdgeIndices[edgeIndex] === 0) {\n                alreadyOutputEdgeIndices[edgeIndex] = 1;\n\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2]]);\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2 + 1]]);\n            }\n        }\n\n        if ((edgeIndex = edgeSearch(ii1, ii2)) >= 0) {\n            if (alreadyOutputEdgeIndices[edgeIndex] === 0) {\n                alreadyOutputEdgeIndices[edgeIndex] = 1;\n\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2]]);\n                currentBucket.edgeIndices.push(bucketIndicesRemap[edgeIndices[edgeIndex * 2 + 1]]);\n            }\n        }\n    }\n\n    const prevBytesPerIndex = bitsPerBucket / 8 * 2;\n    const newBytesPerIndex = bitsPerBucket / 8;\n\n    const originalSize = positionsCompressed.length * 2 + (indices.length + edgeIndices.length) * prevBytesPerIndex;\n\n    let newSize = 0;\n    let newPositions = -positionsCompressed.length / 3;\n\n    buckets.forEach(bucket => {\n        newSize += bucket.positionsCompressed.length * 2 + (bucket.indices.length + bucket.edgeIndices.length) * newBytesPerIndex;\n        newPositions += bucket.positionsCompressed.length / 3;\n    });\n    if (newSize > originalSize) {\n        return [mesh];\n    }\n    if (checkResult) {\n        doCheckResult(buckets, mesh);\n    }\n    return buckets;\n}\n\nfunction unbucket(buckets) {\n    const positionsCompressed = [];\n    const indices = [];\n    const edgeIndices = [];\n    let positionsBase = 0;\n    buckets.forEach(bucket => {\n        bucket.positionsCompressed.forEach(coord => {\n            positionsCompressed.push(coord);\n        });\n        bucket.indices.forEach(index => {\n            indices.push(index + positionsBase);\n        });\n        bucket.edgeIndices.forEach(edgeIndex => {\n            edgeIndices.push(edgeIndex + positionsBase);\n        });\n        positionsBase += positionsCompressed.length / 3;\n    });\n    return {positionsCompressed, indices, edgeIndices};\n}\n\nfunction doCheckResult(buckets, mesh) {\n    const meshDict = {};\n    const edgesDict = {};\n\n    let edgeIndicesCount = 0;\n\n    buckets.forEach(bucket => {\n        const indices = bucket.indices;\n        const edgeIndices = bucket.edgeIndices;\n        const positionsCompressed = bucket.positionsCompressed;\n\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const key = positionsCompressed[indices[i] * 3] + \"_\" + positionsCompressed[indices[i] * 3 + 1] + \"_\" + positionsCompressed[indices[i] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 1] * 3] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 2] * 3] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 2];\n            meshDict[key] = true;\n        }\n\n        edgeIndicesCount += bucket.edgeIndices.length / 2;\n\n        for (let i = 0, len = edgeIndices.length; i < len; i += 2) {\n            const key = positionsCompressed[edgeIndices[i] * 3] + \"_\" + positionsCompressed[edgeIndices[i] * 3 + 1] + \"_\" + positionsCompressed[edgeIndices[i] * 3 + 2] + \"/\" +\n                positionsCompressed[edgeIndices[i + 1] * 3] + \"_\" + positionsCompressed[edgeIndices[i + 1] * 3 + 1] + \"_\" + positionsCompressed[edgeIndices[i + 1] * 3 + 2] + \"/\";\n            edgesDict[key] = true;\n        }\n    });\n\n    {\n        const indices = mesh.indices;\n        const edgeIndices = mesh.edgeIndices;\n        const positionsCompressed = mesh.positionsCompressed;\n\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const key = positionsCompressed[indices[i] * 3] + \"_\" + positionsCompressed[indices[i] * 3 + 1] + \"_\" + positionsCompressed[indices[i] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 1] * 3] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 1] * 3 + 2] + \"/\" +\n                positionsCompressed[indices[i + 2] * 3] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 1] + \"_\" + positionsCompressed[indices[i + 2] * 3 + 2];\n\n            if (!(key in meshDict)) {\n                console.log(\"Not found \" + key);\n                throw \"Ohhhh!\";\n            }\n        }\n\n        //  for (var i = 0, len = edgeIndices.length; i < len; i+=2)\n        //  {\n        //      var key = positionsCompressed[edgeIndices[i]*3] + \"_\" + positionsCompressed[edgeIndices[i]*3+1] + \"_\" + positionsCompressed[edgeIndices[i]*3+2] + \"/\" +\n        //                positionsCompressed[edgeIndices[i+1]*3] + \"_\" + positionsCompressed[edgeIndices[i+1]*3+1] + \"_\" + positionsCompressed[edgeIndices[i+1]*3+2] + \"/\";\n\n        //      if (!(key in edgesDict)) {\n        //          var key2 = edgeIndices[i] + \"_\" + edgeIndices[i+1];\n\n        //          console.log (\"   - Not found \" + key);\n        //          console.log (\"   - Not found \" + key2);\n        //         //  throw \"Ohhhh2!\";\n        //      }\n        //  }\n    }\n}\n\nexport {rebucketPositions}","/**\n * @author https://github.com/tmarti, with support from https://tribia.com/\n * @license MIT\n *\n * This file takes a geometry given by { positionsQuantized, indices }, and returns\n * equivalent { positionsQuantized, indices } arrays but which only contain unique\n * positionsQuantized.\n *\n * The time is O(N logN) with the number of positionsQuantized due to a pre-sorting\n * step, but is much more GC-friendly and actually faster than the classic O(N)\n * approach based in keeping a hash-based LUT to identify unique positionsQuantized.\n */\nlet comparePositions = null;\n\nfunction compareVertex(a, b) {\n    let res;\n    for (let i = 0; i < 3; i++) {\n        if (0 != (res = comparePositions[a * 3 + i] - comparePositions[b * 3 + i])) {\n            return res;\n        }\n    }\n    return 0;\n}\n\nlet seqInit = null;\n\nfunction setMaxNumberOfPositions(maxPositions) {\n    if (seqInit !== null && seqInit.length >= maxPositions) {\n        return;\n    }\n    seqInit = new Uint32Array(maxPositions);\n    for (let i = 0; i < maxPositions; i++) {\n        seqInit[i] = i;\n    }\n}\n\n/**\n * This function obtains unique positionsQuantized in the provided object\n * .positionsQuantized array and calculates an index mapping, which is then\n * applied to the provided object .indices and .edgeindices.\n *\n * The input object items are not modified, and instead new set\n * of positionsQuantized, indices and edgeIndices with the applied optimization\n * are returned.\n *\n * The algorithm, instead of being based in a hash-like LUT for\n * identifying unique positionsQuantized, is based in pre-sorting the input\n * positionsQuantized...\n *\n * (it's possible to define a _\"consistent ordering\"_ for the positionsQuantized\n *  as positionsQuantized are quantized and thus not suffer from float number\n *  comparison artifacts)\n *\n * ... so same positionsQuantized are adjacent in the sorted array, and then\n * it's easy to scan linearly the sorted array. During the linear run,\n * we will know that we found a different position because the comparison\n * function will return != 0 between current and previous element.\n *\n * During this linear traversal of the array, a `unique counter` is used\n * in order to calculate the mapping between original indices and unique\n * indices.\n *\n * @param {*} mesh The input mesh to process, with `positionsQuantized`, `indices` and `edgeIndices` keys.\n *\n * @returns An array with 3 elements: 0 => the uniquified positionsQuantized; 1 and 2 => the remapped edges and edgeIndices arrays\n */\nexport function uniquifyPositions(geometry) {\n    console.log(\"Welding geometry; geometry.positionsQuantized.length = \" + geometry.positionsQuantized.length);\n    const _positions = geometry.positionsQuantized;\n    const _indices = geometry.indices;\n    const _edgeIndices = geometry.edgeIndices;\n\n    setMaxNumberOfPositions(_positions.length / 3);\n\n    const seq = seqInit.slice(0, _positions.length / 3);\n    const remappings = seqInit.slice(0, _positions.length / 3);\n\n    comparePositions = _positions;\n\n    seq.sort(compareVertex);\n\n    let uniqueIdx = 0\n\n    remappings[seq[0]] = 0;\n\n    for (let i = 1, len = seq.length; i < len; i++) {\n        if (0 !== compareVertex(seq[i], seq[i - 1])) {\n            uniqueIdx++;\n        }\n        remappings[seq[i]] = uniqueIdx;\n    }\n\n    const numUniquePositions = uniqueIdx + 1;\n    const newPositions = new Uint16Array(numUniquePositions * 3);\n\n    uniqueIdx = 0\n\n    newPositions [uniqueIdx * 3 + 0] = _positions [seq[0] * 3 + 0];\n    newPositions [uniqueIdx * 3 + 1] = _positions [seq[0] * 3 + 1];\n    newPositions [uniqueIdx * 3 + 2] = _positions [seq[0] * 3 + 2];\n\n    for (let i = 1, len = seq.length; i < len; i++) {\n        if (0 !== compareVertex(seq[i], seq[i - 1])) {\n            uniqueIdx++;\n            newPositions [uniqueIdx * 3 + 0] = _positions [seq[i] * 3 + 0];\n            newPositions [uniqueIdx * 3 + 1] = _positions [seq[i] * 3 + 1];\n            newPositions [uniqueIdx * 3 + 2] = _positions [seq[i] * 3 + 2];\n        }\n        remappings[seq[i]] = uniqueIdx;\n    }\n\n    comparePositions = null;\n\n    const newIndices = new Uint32Array(_indices.length);\n\n    for (let i = 0, len = _indices.length; i < len; i++) {\n        newIndices[i] = remappings [_indices[i]];\n    }\n\n    const newEdgeIndices = new Uint32Array(_edgeIndices.length);\n\n    for (let i = 0, len = _edgeIndices.length; i < len; i++) {\n        newEdgeIndices[i] = remappings [_edgeIndices[i]];\n    }\n\n    geometry.positionsQuantized = newPositions;\n    geometry.indices = newIndices;\n    geometry.edgeIndices = newEdgeIndices;\n    console.log(\"Welded geometry; geometry.positionsQuantized.length = \" + geometry.positionsQuantized.length);\n}","/**\n * An element of reusable geometry within an {@link XKTModel}.\n *\n * * Created by {@link XKTModel#createGeometry}\n * * Stored in {@link XKTModel#geometries} and {@link XKTModel#geometriesList}\n * * Referenced by {@link XKTMesh}s, which belong to {@link XKTEntity}s\n *\n * @class XKTGeometry\n */\nimport {rebucketPositions} from \"./lib/rebucketPositions\";\nimport {uniquifyPositions} from \"./lib/calculateUniquePositions\";\n\nclass XKTGeometry {\n\n    /**\n     * @private\n     * @param {*} cfg Configuration for the XKTGeometry.\n     * @param {Number} cfg.geometryId Unique ID of the geometry in {@link XKTModel#geometries}.\n     * @param {String} cfg.primitiveType Type of this geometry - \"triangles\", \"points\" or \"lines\" so far.\n     * @param {Number} cfg.geometryIndex Index of this XKTGeometry in {@link XKTModel#geometriesList}.\n     * @param {Float64Array} cfg.positions Non-quantized 3D vertex positions.\n     * @param {Float32Array} cfg.normals Non-compressed vertex normals.\n     * @param {Uint8Array} cfg.colorsCompressed Unsigned 8-bit integer RGBA vertex colors.\n     * @param {Float32Array} cfg.uvs Non-compressed vertex UV coordinates.\n     * @param {Uint32Array} cfg.indices Indices to organize the vertex positions and normals into triangles.\n     * @param {Uint32Array} cfg.edgeIndices Indices to organize the vertex positions into edges.\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTGeometry in {@link XKTModel#geometries}.\n         *\n         * @type {Number}\n         */\n        this.geometryId = cfg.geometryId;\n\n        /**\n         * The type of primitive - \"triangles\" | \"points\" | \"lines\".\n         *\n         * @type {String}\n         */\n        this.primitiveType = cfg.primitiveType;\n\n        /**\n         * Index of this XKTGeometry in {@link XKTModel#geometriesList}.\n         *\n         * @type {Number}\n         */\n        this.geometryIndex = cfg.geometryIndex;\n\n        /**\n         * The number of {@link XKTMesh}s that reference this XKTGeometry.\n         *\n         * @type {Number}\n         */\n        this.numInstances = 0;\n\n        /**\n         * Non-quantized 3D vertex positions.\n         *\n         * Defined for all primitive types.\n         *\n         * @type {Float64Array}\n         */\n        this.positions = cfg.positions;\n\n        /**\n         * Quantized vertex positions.\n         *\n         * Defined for all primitive types.\n         *\n         * This array is later created from {@link XKTGeometry#positions} by {@link XKTModel#finalize}.\n         *\n         * @type {Uint16Array}\n         */\n        this.positionsQuantized = new Uint16Array(cfg.positions.length);\n\n        /**\n         * Non-compressed 3D vertex normals.\n         *\n         * Defined only for triangle primitives. Can be null if we want xeokit to auto-generate them. Ignored for points and lines.\n         *\n         * @type {Float32Array}\n         */\n        this.normals = cfg.normals;\n\n        /**\n         * Compressed vertex normals.\n         *\n         * Defined only for triangle primitives. Ignored for points and lines.\n         *\n         * This array is later created from {@link XKTGeometry#normals} by {@link XKTModel#finalize}.\n         *\n         * Will be null if {@link XKTGeometry#normals} is also null.\n         *\n         * @type {Int8Array}\n         */\n        this.normalsOctEncoded = null;\n\n        /**\n         * Compressed RGBA vertex colors.\n         *\n         * Defined only for point primitives. Ignored for triangles and lines.\n         *\n         * @type {Uint8Array}\n         */\n        this.colorsCompressed = cfg.colorsCompressed;\n\n        /**\n         * Non-compressed vertex UVs.\n         *\n         * @type {Float32Array}\n         */\n        this.uvs = cfg.uvs;\n\n        /**\n         * Compressed vertex UVs.\n         *\n         * @type {Uint16Array}\n         */\n        this.uvsCompressed = cfg.uvsCompressed;\n\n        /**\n         * Indices that organize the vertex positions and normals as triangles.\n         *\n         * Defined only for triangle and lines primitives. Ignored for points.\n         *\n         * @type {Uint32Array}\n         */\n        this.indices = cfg.indices;\n\n        /**\n         * Indices that organize the vertex positions as edges.\n         *\n         * Defined only for triangle primitives. Ignored for points and lines.\n         *\n         * @type {Uint32Array}\n         */\n        this.edgeIndices = cfg.edgeIndices;\n\n        /**\n         * When {@link XKTGeometry#primitiveType} is \"triangles\", this is ````true```` when this geometry is a watertight mesh.\n         *\n         * Defined only for triangle primitives. Ignored for points and lines.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * @type {boolean}\n         */\n        this.solid = false;\n\n        this._buckets = null;\n    }\n\n    /**\n     * Get positions indices and edge indices as buckets.\n     * @returns {*} The buckets.\n     */\n    get buckets() {\n        if (!this._buckets) {\n            let uniquePositionsCompressed, uniqueIndices, uniqueEdgeIndices;\n            [\n                uniquePositionsCompressed,\n                uniqueIndices,\n                uniqueEdgeIndices,\n            ] = uniquifyPositions({\n                positionsCompressed: this.positionsQuantized,\n                indices: this.indices,\n                edgeIndices: this.edgeIndices\n            });\n            const numUniquePositions = uniquePositionsCompressed.length / 3;\n            this._buckets = rebucketPositions({\n                    positionsCompressed: uniquePositionsCompressed,\n                    indices: uniqueIndices,\n                    edgeIndices: uniqueEdgeIndices,\n                },\n                (numUniquePositions > (1 << 16)) ? 16 : 8,\n                // true\n            );\n        }\n        return this._buckets;\n    }\n\n    /**\n     * Convenience property that is ````true```` when {@link XKTGeometry#numInstances} is greater that one.\n     * @returns {boolean}\n     */\n    get reused() {\n        return (this.numInstances > 1);\n    }\n}\n\n\nexport {XKTGeometry};","import {math} from \"../lib/math.js\";\n\n/**\n * An object within an {@link XKTModel}.\n *\n * * Created by {@link XKTModel#createEntity}\n * * Stored in {@link XKTModel#entities} and {@link XKTModel#entitiesList}\n * * Has one or more {@link XKTMesh}s, each having an {@link XKTGeometry}\n *\n * @class XKTEntity\n */\nclass XKTEntity {\n\n    /**\n     * @private\n     * @param entityId\n     * @param meshes\n     */\n    constructor(entityId,  meshes) {\n\n        /**\n         * Unique ID of this ````XKTEntity```` in {@link XKTModel#entities}.\n         *\n         * For a BIM model, this will be an IFC product ID.\n         *\n         * We can also use {@link XKTModel#createMetaObject} to create an {@link XKTMetaObject} to specify metadata for\n         * this ````XKTEntity````. To associate the {@link XKTMetaObject} with our {@link XKTEntity}, we give\n         * {@link XKTMetaObject#metaObjectId} the same value as {@link XKTEntity#entityId}.\n         *\n         * @type {String}\n         */\n        this.entityId = entityId;\n\n        /**\n         * Index of this ````XKTEntity```` in {@link XKTModel#entitiesList}.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * @type {Number}\n         */\n        this.entityIndex = null;\n\n        /**\n         * A list of {@link XKTMesh}s that indicate which {@link XKTGeometry}s are used by this Entity.\n         *\n         * @type {XKTMesh[]}\n         */\n        this.meshes = meshes;\n\n        /**\n         * World-space axis-aligned bounding box (AABB) that encloses the {@link XKTGeometry#positions} of\n         * the {@link XKTGeometry}s that are used by this ````XKTEntity````.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * @type {Float32Array}\n         */\n        this.aabb = math.AABB3();\n\n        /**\n         * Indicates if this ````XKTEntity```` shares {@link XKTGeometry}s with other {@link XKTEntity}'s.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * Note that when an ````XKTEntity```` shares ````XKTGeometrys````, it shares **all** of its ````XKTGeometrys````. An ````XKTEntity````\n         * never shares only some of its ````XKTGeometrys```` - it always shares either the whole set or none at all.\n         *\n         * @type {Boolean}\n         */\n        this.hasReusedGeometries = false;\n    }\n}\n\nexport {XKTEntity};","/**\n * @desc A box-shaped 3D region within an {@link XKTModel} that contains {@link XKTEntity}s.\n *\n * * Created by {@link XKTModel#finalize}\n * * Stored in {@link XKTModel#tilesList}\n *\n * @class XKTTile\n */\nclass XKTTile {\n\n    /**\n     * Creates a new XKTTile.\n     *\n     * @private\n     * @param aabb\n     * @param entities\n     */\n    constructor(aabb, entities) {\n\n        /**\n         * Axis-aligned World-space bounding box that encloses the {@link XKTEntity}'s within this Tile.\n         *\n         * @type {Float64Array}\n         */\n        this.aabb = aabb;\n\n        /**\n         * The {@link XKTEntity}'s within this XKTTile.\n         *\n         * @type {XKTEntity[]}\n         */\n        this.entities = entities;\n    }\n}\n\nexport {XKTTile};","/**\n * A kd-Tree node, used internally by {@link XKTModel}.\n *\n * @private\n */\nclass KDNode {\n\n    /**\n     * Create a KDNode with an axis-aligned 3D World-space boundary.\n     */\n    constructor(aabb) {\n\n        /**\n         * The axis-aligned 3D World-space boundary of this KDNode.\n         *\n         * @type {Float64Array}\n         */\n        this.aabb = aabb;\n\n        /**\n         * The {@link XKTEntity}s within this KDNode.\n         */\n        this.entities = null;\n\n        /**\n         * The left child KDNode.\n         */\n        this.left = null;\n\n        /**\n         * The right child KDNode.\n         */\n        this.right = null;\n    }\n}\n\nexport {KDNode};","/**\n * A meta object within an {@link XKTModel}.\n *\n * These are plugged together into a parent-child hierarchy to represent structural\n * metadata for the {@link XKTModel}.\n *\n * The leaf XKTMetaObjects are usually associated with\n * an {@link XKTEntity}, which they do so by sharing the same ID,\n * ie. where {@link XKTMetaObject#metaObjectId} == {@link XKTEntity#entityId}.\n *\n * * Created by {@link XKTModel#createMetaObject}\n * * Stored in {@link XKTModel#metaObjects} and {@link XKTModel#metaObjectsList}\n * * Has an ID, a type, and a human-readable name\n * * May have a parent {@link XKTMetaObject}\n * * When no children, is usually associated with an {@link XKTEntity}\n *\n * @class XKTMetaObject\n */\nclass XKTMetaObject {\n\n    /**\n     * @private\n     * @param metaObjectId\n     * @param propertySetIds\n     * @param metaObjectType\n     * @param metaObjectName\n     * @param parentMetaObjectId\n     */\n    constructor(metaObjectId, propertySetIds, metaObjectType, metaObjectName, parentMetaObjectId) {\n\n        /**\n         * Unique ID of this ````XKTMetaObject```` in {@link XKTModel#metaObjects}.\n         *\n         * For a BIM model, this will be an IFC product ID.\n         *\n         * If this is a leaf XKTMetaObject, where it is not a parent to any other XKTMetaObject,\n         * then this will be equal to the ID of an {@link XKTEntity} in {@link XKTModel#entities},\n         * ie. where {@link XKTMetaObject#metaObjectId} == {@link XKTEntity#entityId}.\n         *\n         * @type {String}\n         */\n        this.metaObjectId = metaObjectId;\n\n        /**\n         * Unique ID of one or more property sets that contains additional metadata about this\n         * {@link XKTMetaObject}. The property sets can be stored in an external system, or\n         * within the {@link XKTModel}, as {@link XKTPropertySet}s within {@link XKTModel#propertySets}.\n         *\n         * @type {String[]}\n         */\n        this.propertySetIds = propertySetIds;\n\n        /**\n         * Indicates the XKTMetaObject meta object type.\n         *\n         * This defaults to \"default\".\n         *\n         * @type {string}\n         */\n        this.metaObjectType = metaObjectType;\n\n        /**\n         * Indicates the XKTMetaObject meta object name.\n         *\n         * This defaults to {@link XKTMetaObject#metaObjectId}.\n         *\n         * @type {string}\n         */\n        this.metaObjectName = metaObjectName;\n\n        /**\n         * The parent XKTMetaObject, if any.\n         *\n         * Will be null if there is no parent.\n         *\n         * @type {String}\n         */\n        this.parentMetaObjectId = parentMetaObjectId;\n    }\n}\n\nexport {XKTMetaObject};","/**\n * A property set within an {@link XKTModel}.\n *\n * These are shared among {@link XKTMetaObject}s.\n *\n * * Created by {@link XKTModel#createPropertySet}\n * * Stored in {@link XKTModel#propertySets} and {@link XKTModel#propertySetsList}\n * * Has an ID, a type, and a human-readable name\n *\n * @class XKTPropertySet\n */\nclass XKTPropertySet {\n\n    /**\n     * @private\n     */\n    constructor(propertySetId, propertySetType, propertySetName, properties) {\n\n        /**\n         * Unique ID of this ````XKTPropertySet```` in {@link XKTModel#propertySets}.\n         *\n         * @type {String}\n         */\n        this.propertySetId = propertySetId;\n\n        /**\n         * Indicates the ````XKTPropertySet````'s type.\n         *\n         * This defaults to \"default\".\n         *\n         * @type {string}\n         */\n        this.propertySetType = propertySetType;\n\n        /**\n         * Indicates the XKTPropertySet meta object name.\n         *\n         * This defaults to {@link XKTPropertySet#propertySetId}.\n         *\n         * @type {string}\n         */\n        this.propertySetName = propertySetName;\n\n        /**\n         * The properties within this ````XKTPropertySet````.\n         *\n         * @type {*[]}\n         */\n        this.properties = properties;\n    }\n}\n\nexport {XKTPropertySet};","/**\n * A texture shared by {@link XKTTextureSet}s.\n *\n * * Created by {@link XKTModel#createTexture}\n * * Stored in {@link XKTTextureSet#textures}, {@link XKTModel#textures} and {@link XKTModel#texturesList}\n *\n * @class XKTTexture\n */\nimport {RepeatWrapping, LinearMipMapNearestFilter} from \"../constants\";\n\nclass XKTTexture {\n\n    /**\n     * @private\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTTexture in {@link XKTModel#textures}.\n         *\n         * @type {Number}\n         */\n        this.textureId = cfg.textureId;\n\n        /**\n         * Index of this XKTTexture in {@link XKTModel#texturesList};\n         *\n         * @type {Number}\n         */\n        this.textureIndex = cfg.textureIndex;\n\n        /**\n         * Texture image data.\n         *\n         * @type {Buffer}\n         */\n        this.imageData = cfg.imageData;\n\n        /**\n         * Which material channel this texture is applied to, as determined by its {@link XKTTextureSet}s.\n         *\n         * @type {Number}\n         */\n        this.channel = null;\n\n        /**\n         * Width of this XKTTexture.\n         *\n         * @type {Number}\n         */\n        this.width = cfg.width;\n\n        /**\n         * Height of this XKTTexture.\n         *\n         * @type {Number}\n         */\n        this.height = cfg.height;\n\n        /**\n         * Texture file source.\n         *\n         * @type {String}\n         */\n        this.src = cfg.src;\n\n        /**\n         * Whether this XKTTexture is to be compressed.\n         *\n         * @type {Boolean}\n         */\n        this.compressed = (!!cfg.compressed);\n\n        /**\n         * Media type of this XKTTexture.\n         *\n         * Supported values are {@link GIFMediaType}, {@link PNGMediaType} and {@link JPEGMediaType}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.mediaType = cfg.mediaType;\n\n        /**\n         * How the texture is sampled when a texel covers less than one pixel. Supported values\n         * are {@link LinearMipmapLinearFilter}, {@link LinearMipMapNearestFilter},\n         * {@link NearestMipMapNearestFilter}, {@link NearestMipMapLinearFilter}\n         * and {@link LinearMipMapLinearFilter}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.minFilter = cfg.minFilter || LinearMipMapNearestFilter;\n\n        /**\n         * How the texture is sampled when a texel covers more than one pixel. Supported values\n         * are {@link LinearFilter} and {@link NearestFilter}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.magFilter = cfg.magFilter || LinearMipMapNearestFilter;\n\n        /**\n         * S wrapping mode.\n         *\n         * Supported values are {@link ClampToEdgeWrapping},\n         * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.wrapS = cfg.wrapS || RepeatWrapping;\n\n        /**\n         * T wrapping mode.\n         *\n         * Supported values are {@link ClampToEdgeWrapping},\n         * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.wrapT = cfg.wrapT || RepeatWrapping;\n\n        /**\n         * R wrapping mode.\n         *\n         * Ignored for compressed textures.\n         *\n         * Supported values are {@link ClampToEdgeWrapping},\n         * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n         *\n         * @type {*|number}\n         */\n        this.wrapR = cfg.wrapR || RepeatWrapping\n    }\n}\n\nexport {XKTTexture};","/**\n * A set of textures shared by {@link XKTMesh}es.\n *\n * * Created by {@link XKTModel#createTextureSet}\n * * Registered in {@link XKTMesh#material}, {@link XKTModel#materials} and {@link XKTModel#.textureSetsList}\n *\n * @class XKTMetalRoughMaterial\n */\nclass XKTTextureSet {\n\n    /**\n     * @private\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTTextureSet in {@link XKTModel#materials}.\n         *\n         * @type {Number}\n         */\n        this.textureSetId = cfg.textureSetId;\n\n        /**\n         * Index of this XKTTexture in {@link XKTModel#texturesList};\n         *\n         * @type {Number}\n         */\n        this.textureSetIndex = cfg.textureSetIndex;\n\n        /**\n         * Identifies the material type.\n         *\n         * @type {Number}\n         */\n        this.materialType = cfg.materialType;\n\n        /**\n         * Index of this XKTTextureSet in {@link XKTModel#meshesList};\n         *\n         * @type {Number}\n         */\n        this.materialIndex = cfg.materialIndex;\n\n        /**\n         * The number of {@link XKTMesh}s that reference this XKTTextureSet.\n         *\n         * @type {Number}\n         */\n        this.numInstances = 0;\n\n        /**\n         * RGBA {@link XKTTexture} containing base color in RGB and opacity in A.\n         *\n         * @type {XKTTexture}\n         */\n        this.colorTexture = cfg.colorTexture;\n\n        /**\n         * RGBA {@link XKTTexture} containing metallic and roughness factors in R and G.\n         *\n         * @type {XKTTexture}\n         */\n        this.metallicRoughnessTexture = cfg.metallicRoughnessTexture;\n\n        /**\n         * RGBA {@link XKTTexture} with surface normals in RGB.\n         *\n         * @type {XKTTexture}\n         */\n        this.normalsTexture = cfg.normalsTexture;\n\n        /**\n         * RGBA {@link XKTTexture} with emissive color in RGB.\n         *\n         * @type {XKTTexture}\n         */\n        this.emissiveTexture = cfg.emissiveTexture;\n\n        /**\n         * RGBA {@link XKTTexture} with ambient occlusion factors in RGB.\n         *\n         * @type {XKTTexture}\n         */\n        this.occlusionTexture = cfg.occlusionTexture;\n    }\n}\n\nexport {XKTTextureSet};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/textures\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/images\");","import {math} from \"../lib/math.js\";\nimport {geometryCompression} from \"./lib/geometryCompression.js\";\nimport {buildEdgeIndices} from \"./lib/buildEdgeIndices.js\";\nimport {isTriangleMeshSolid} from \"./lib/isTriangleMeshSolid.js\";\n\nimport {XKTMesh} from './XKTMesh.js';\nimport {XKTGeometry} from './XKTGeometry.js';\nimport {XKTEntity} from './XKTEntity.js';\nimport {XKTTile} from './XKTTile.js';\nimport {KDNode} from \"./KDNode.js\";\nimport {XKTMetaObject} from \"./XKTMetaObject.js\";\nimport {XKTPropertySet} from \"./XKTPropertySet.js\";\nimport {mergeVertices} from \"../lib/mergeVertices.js\";\nimport {XKT_INFO} from \"../XKT_INFO.js\";\nimport {XKTTexture} from \"./XKTTexture\";\nimport {XKTTextureSet} from \"./XKTTextureSet\";\nimport {encode, load} from \"@loaders.gl/core\";\nimport {KTX2BasisWriter} from \"@loaders.gl/textures\";\nimport {ImageLoader} from '@loaders.gl/images';\n\nconst tempVec4a = math.vec4([0, 0, 0, 1]);\nconst tempVec4b = math.vec4([0, 0, 0, 1]);\n\nconst tempMat4 = math.mat4();\nconst tempMat4b = math.mat4();\n\nconst kdTreeDimLength = new Float64Array(3);\n\n// XKT texture types\n\nconst COLOR_TEXTURE = 0;\nconst METALLIC_ROUGHNESS_TEXTURE = 1;\nconst NORMALS_TEXTURE = 2;\nconst EMISSIVE_TEXTURE = 3;\nconst OCCLUSION_TEXTURE = 4;\n\n// KTX2 encoding options for each texture type\n\nconst TEXTURE_ENCODING_OPTIONS = {}\nTEXTURE_ENCODING_OPTIONS[COLOR_TEXTURE] = {\n    useSRGB: true,\n    qualityLevel: 50,\n    encodeUASTC: true,\n    mipmaps: true\n};\nTEXTURE_ENCODING_OPTIONS[EMISSIVE_TEXTURE] = {\n    useSRGB: true,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\nTEXTURE_ENCODING_OPTIONS[METALLIC_ROUGHNESS_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 50,\n    mipmaps: true // Needed for GGX roughness shading\n};\nTEXTURE_ENCODING_OPTIONS[NORMALS_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\nTEXTURE_ENCODING_OPTIONS[OCCLUSION_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\n\n/**\n * A document model that represents the contents of an .XKT file.\n *\n * * An XKTModel contains {@link XKTTile}s, which spatially subdivide the model into axis-aligned, box-shaped regions.\n * * Each {@link XKTTile} contains {@link XKTEntity}s, which represent the objects within its region.\n * * Each {@link XKTEntity} has {@link XKTMesh}s, which each have a {@link XKTGeometry}. Each {@link XKTGeometry} can be shared by multiple {@link XKTMesh}s.\n * * Import models into an XKTModel using {@link parseGLTFJSONIntoXKTModel}, {@link parseIFCIntoXKTModel}, {@link parseCityJSONIntoXKTModel} etc.\n * * Build an XKTModel programmatically using {@link XKTModel#createGeometry}, {@link XKTModel#createMesh} and {@link XKTModel#createEntity}.\n * * Serialize an XKTModel to an ArrayBuffer using {@link writeXKTModelToArrayBuffer}.\n *\n * ## Usage\n *\n * See [main docs page](/docs/#javascript-api) for usage examples.\n *\n * @class XKTModel\n */\nclass XKTModel {\n\n    /**\n     * Constructs a new XKTModel.\n     *\n     * @param {*} [cfg] Configuration\n     * @param {Number} [cfg.edgeThreshold=10]\n     * @param {Number} [cfg.minTileSize=500]\n     */\n    constructor(cfg = {}) {\n\n        /**\n         * The model's ID, if available.\n         *\n         * Will be \"default\" by default.\n         *\n         * @type {String}\n         */\n        this.modelId = cfg.modelId || \"default\";\n\n        /**\n         * The project ID, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @type {String}\n         */\n        this.projectId = cfg.projectId || \"\";\n\n        /**\n         * The revision ID, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @type {String}\n         */\n        this.revisionId = cfg.revisionId || \"\";\n\n        /**\n         * The model author, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @property author\n         * @type {String}\n         */\n        this.author = cfg.author || \"\";\n\n        /**\n         * The date the model was created, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @property createdAt\n         * @type {String}\n         */\n        this.createdAt = cfg.createdAt || \"\";\n\n        /**\n         * The application that created the model, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @property creatingApplication\n         * @type {String}\n         */\n        this.creatingApplication = cfg.creatingApplication || \"\";\n\n        /**\n         * The model schema version, if available.\n         *\n         * In the case of IFC, this could be \"IFC2x3\" or \"IFC4\", for example.\n         *\n         * Will be an empty string by default.\n         *\n         * @property schema\n         * @type {String}\n         */\n        this.schema = cfg.schema || \"\";\n\n        /**\n         * The XKT format version.\n         *\n         * @property xktVersion;\n         * @type {number}\n         */\n        this.xktVersion = XKT_INFO.xktVersion;\n\n        /**\n         *\n         * @type {Number|number}\n         */\n        this.edgeThreshold = cfg.edgeThreshold || 10;\n\n        /**\n         * Minimum diagonal size of the boundary of an {@link XKTTile}.\n         *\n         * @type {Number|number}\n         */\n        this.minTileSize = cfg.minTileSize || 500;\n\n        /**\n         * Optional overall AABB that contains all the {@link XKTEntity}s we'll create in this model, if previously known.\n         *\n         * This is the AABB of a complete set of input files that are provided as a split-model set for conversion.\n         *\n         * This is used to help the {@link XKTTile.aabb}s within split models align neatly with each other, as we\n         * build them with a k-d tree in {@link XKTModel#finalize}.  Without this, the AABBs of the different parts\n         * tend to misalign slightly, resulting in excess number of {@link XKTTile}s, which degrades memory and rendering\n         * performance when the XKT is viewer in the xeokit Viewer.\n         */\n        this.modelAABB = cfg.modelAABB;\n\n        /**\n         * Map of {@link XKTPropertySet}s within this XKTModel, each mapped to {@link XKTPropertySet#propertySetId}.\n         *\n         * Created by {@link XKTModel#createPropertySet}.\n         *\n         * @type {{String:XKTPropertySet}}\n         */\n        this.propertySets = {};\n\n        /**\n         * {@link XKTPropertySet}s within this XKTModel.\n         *\n         * Each XKTPropertySet holds its position in this list in {@link XKTPropertySet#propertySetIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTPropertySet[]}\n         */\n        this.propertySetsList = [];\n\n        /**\n         * Map of {@link XKTMetaObject}s within this XKTModel, each mapped to {@link XKTMetaObject#metaObjectId}.\n         *\n         * Created by {@link XKTModel#createMetaObject}.\n         *\n         * @type {{String:XKTMetaObject}}\n         */\n        this.metaObjects = {};\n\n        /**\n         * {@link XKTMetaObject}s within this XKTModel.\n         *\n         * Each XKTMetaObject holds its position in this list in {@link XKTMetaObject#metaObjectIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTMetaObject[]}\n         */\n        this.metaObjectsList = [];\n\n        /**\n         * The positions of all shared {@link XKTGeometry}s are de-quantized using this singular\n         * de-quantization matrix.\n         *\n         * This de-quantization matrix is generated from the collective Local-space boundary of the\n         * positions of all shared {@link XKTGeometry}s.\n         *\n         * @type {Float32Array}\n         */\n        this.reusedGeometriesDecodeMatrix = new Float32Array(16);\n\n        /**\n         * Map of {@link XKTGeometry}s within this XKTModel, each mapped to {@link XKTGeometry#geometryId}.\n         *\n         * Created by {@link XKTModel#createGeometry}.\n         *\n         * @type {{Number:XKTGeometry}}\n         */\n        this.geometries = {};\n\n        /**\n         * List of {@link XKTGeometry}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTGeometry holds its position in this list in {@link XKTGeometry#geometryIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTGeometry[]}\n         */\n        this.geometriesList = [];\n\n        /**\n         * Map of {@link XKTTexture}s within this XKTModel, each mapped to {@link XKTTexture#textureId}.\n         *\n         * Created by {@link XKTModel#createTexture}.\n         *\n         * @type {{Number:XKTTexture}}\n         */\n        this.textures = {};\n\n        /**\n         * List of {@link XKTTexture}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTTexture holds its position in this list in {@link XKTTexture#textureIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTTexture[]}\n         */\n        this.texturesList = [];\n\n        /**\n         * Map of {@link XKTTextureSet}s within this XKTModel, each mapped to {@link XKTTextureSet#textureSetId}.\n         *\n         * Created by {@link XKTModel#createTextureSet}.\n         *\n         * @type {{Number:XKTTextureSet}}\n         */\n        this.textureSets = {};\n\n        /**\n         * List of {@link XKTTextureSet}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTTextureSet holds its position in this list in {@link XKTTextureSet#textureSetIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTTextureSet[]}\n         */\n        this.textureSetsList = [];\n\n        /**\n         * Map of {@link XKTMesh}s within this XKTModel, each mapped to {@link XKTMesh#meshId}.\n         *\n         * Created by {@link XKTModel#createMesh}.\n         *\n         * @type {{Number:XKTMesh}}\n         */\n        this.meshes = {};\n\n        /**\n         * List of {@link XKTMesh}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTMesh holds its position in this list in {@link XKTMesh#meshIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTMesh[]}\n         */\n        this.meshesList = [];\n\n        /**\n         * Map of {@link XKTEntity}s within this XKTModel, each mapped to {@link XKTEntity#entityId}.\n         *\n         * Created by {@link XKTModel#createEntity}.\n         *\n         * @type {{String:XKTEntity}}\n         */\n        this.entities = {};\n\n        /**\n         * {@link XKTEntity}s within this XKTModel.\n         *\n         * Each XKTEntity holds its position in this list in {@link XKTEntity#entityIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTEntity[]}\n         */\n        this.entitiesList = [];\n\n        /**\n         * {@link XKTTile}s within this XKTModel.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTTile[]}\n         */\n        this.tilesList = [];\n\n        /**\n         * The axis-aligned 3D World-space boundary of this XKTModel.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {Float64Array}\n         */\n        this.aabb = math.AABB3();\n\n        /**\n         * Indicates if this XKTModel has been finalized.\n         *\n         * Set ````true```` by {@link XKTModel#finalize}.\n         *\n         * @type {boolean}\n         */\n        this.finalized = false;\n    }\n\n    /**\n     * Creates an {@link XKTPropertySet} within this XKTModel.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {String} params.propertySetId Unique ID for the {@link XKTPropertySet}.\n     * @param {String} [params.propertySetType=\"default\"] A meta type for the {@link XKTPropertySet}.\n     * @param {String} [params.propertySetName] Human-readable name for the {@link XKTPropertySet}. Defaults to the ````propertySetId```` parameter.\n     * @param {String[]} params.properties Properties for the {@link XKTPropertySet}.\n     * @returns {XKTPropertySet} The new {@link XKTPropertySet}.\n     */\n    createPropertySet(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.propertySetId === null || params.propertySetId === undefined) {\n            throw \"Parameter expected: params.propertySetId\";\n        }\n\n        if (params.properties === null || params.properties === undefined) {\n            throw \"Parameter expected: params.properties\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more property sets\");\n            return;\n        }\n\n        if (this.propertySets[params.propertySetId]) {\n            //          console.error(\"XKTPropertySet already exists with this ID: \" + params.propertySetId);\n            return;\n        }\n\n        const propertySetId = params.propertySetId;\n        const propertySetType = params.propertySetType || \"Default\";\n        const propertySetName = params.propertySetName || params.propertySetId;\n        const properties = params.properties || [];\n\n        const propertySet = new XKTPropertySet(propertySetId, propertySetType, propertySetName, properties);\n\n        this.propertySets[propertySetId] = propertySet;\n        this.propertySetsList.push(propertySet);\n\n        return propertySet;\n    }\n\n    /**\n     * Creates an {@link XKTMetaObject} within this XKTModel.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {String} params.metaObjectId Unique ID for the {@link XKTMetaObject}.\n     * @param {String} params.propertySetIds ID of one or more property sets that contains additional metadata about\n     * this {@link XKTMetaObject}. The property sets could be stored externally (ie not managed at all by the XKT file),\n     * or could be {@link XKTPropertySet}s within {@link XKTModel#propertySets}.\n     * @param {String} [params.metaObjectType=\"default\"] A meta type for the {@link XKTMetaObject}. Can be anything,\n     * but is usually an IFC type, such as \"IfcSite\" or \"IfcWall\".\n     * @param {String} [params.metaObjectName] Human-readable name for the {@link XKTMetaObject}. Defaults to the ````metaObjectId```` parameter.\n     * @param {String} [params.parentMetaObjectId] ID of the parent {@link XKTMetaObject}, if any. Defaults to the ````metaObjectId```` parameter.\n     * @returns {XKTMetaObject} The new {@link XKTMetaObject}.\n     */\n    createMetaObject(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.metaObjectId === null || params.metaObjectId === undefined) {\n            throw \"Parameter expected: params.metaObjectId\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more meta objects\");\n            return;\n        }\n\n        if (this.metaObjects[params.metaObjectId]) {\n            //          console.error(\"XKTMetaObject already exists with this ID: \" + params.metaObjectId);\n            return;\n        }\n\n        const metaObjectId = params.metaObjectId;\n        const propertySetIds = params.propertySetIds;\n        const metaObjectType = params.metaObjectType || \"Default\";\n        const metaObjectName = params.metaObjectName || params.metaObjectId;\n        const parentMetaObjectId = params.parentMetaObjectId;\n\n        const metaObject = new XKTMetaObject(metaObjectId, propertySetIds, metaObjectType, metaObjectName, parentMetaObjectId);\n\n        this.metaObjects[metaObjectId] = metaObject;\n        this.metaObjectsList.push(metaObject);\n\n        if (!parentMetaObjectId) {\n            if (!this._rootMetaObject) {\n                this._rootMetaObject = metaObject;\n            }\n        }\n\n        return metaObject;\n    }\n\n    /**\n     * Creates an {@link XKTTexture} within this XKTModel.\n     *\n     * Registers the new {@link XKTTexture} in {@link XKTModel#textures} and {@link XKTModel#texturesList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.textureId Unique ID for the {@link XKTTexture}.\n     * @param {String} [params.src] Source of an image file for the texture.\n     * @param {Buffer} [params.imageData] Image data for the texture.\n     * @param {Number} [params.mediaType] Media type (ie. MIME type) of ````imageData````. Supported values are {@link GIFMediaType}, {@link PNGMediaType} and {@link JPEGMediaType}.\n     * @param {Number} [params.width] Texture width, used with ````imageData````. Ignored for compressed textures.\n     * @param {Number} [params.height] Texture height, used with ````imageData````. Ignored for compressed textures.\n     * @param {Boolean} [params.compressed=true] Whether to compress the texture.\n     * @param {Number} [params.minFilter=LinearMipMapNearestFilter] How the texture is sampled when a texel covers less than one pixel. Supported\n     * values are {@link LinearMipmapLinearFilter}, {@link LinearMipMapNearestFilter}, {@link NearestMipMapNearestFilter},\n     * {@link NearestMipMapLinearFilter} and {@link LinearMipMapLinearFilter}. Ignored for compressed textures.\n     * @param {Number} [params.magFilter=LinearMipMapNearestFilter] How the texture is sampled when a texel covers more than one pixel. Supported values\n     * are {@link LinearFilter} and {@link NearestFilter}. Ignored for compressed textures.\n     * @param {Number} [params.wrapS=RepeatWrapping] Wrap parameter for texture coordinate *S*. Supported values are {@link ClampToEdgeWrapping},\n     * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}. Ignored for compressed textures.\n     * @param {Number} [params.wrapT=RepeatWrapping] Wrap parameter for texture coordinate *T*. Supported values are {@link ClampToEdgeWrapping},\n     * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}. Ignored for compressed textures.\n     * {@param {Number} [params.wrapR=RepeatWrapping] Wrap parameter for texture coordinate *R*. Supported values are {@link ClampToEdgeWrapping},\n     * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}. Ignored for compressed textures.\n     * @returns {XKTTexture} The new {@link XKTTexture}.\n     */\n    createTexture(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.textureId === null || params.textureId === undefined) {\n            throw \"Parameter expected: params.textureId\";\n        }\n\n        if (!params.imageData && !params.src) {\n            throw \"Parameter expected: params.imageData or params.src\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more textures\");\n            return;\n        }\n\n        if (this.textures[params.textureId]) {\n            console.error(\"XKTTexture already exists with this ID: \" + params.textureId);\n            return;\n        }\n\n        if (params.src) {\n            const fileExt = params.src.split('.').pop();\n            if (fileExt !== \"jpg\" && fileExt !== \"jpeg\" && fileExt !== \"png\") {\n                console.error(`XKTModel does not support image files with extension '${fileExt}' - won't create texture '${params.textureId}`);\n                return;\n            }\n        }\n\n        const textureId = params.textureId;\n\n        const texture = new XKTTexture({\n            textureId,\n            imageData: params.imageData,\n            mediaType: params.mediaType,\n            minFilter: params.minFilter,\n            magFilter: params.magFilter,\n            wrapS: params.wrapS,\n            wrapT: params.wrapT,\n            wrapR: params.wrapR,\n            width: params.width,\n            height: params.height,\n            compressed: (params.compressed !== false),\n            src: params.src\n        });\n\n        this.textures[textureId] = texture;\n        this.texturesList.push(texture);\n\n        return texture;\n    }\n\n    /**\n     * Creates an {@link XKTTextureSet} within this XKTModel.\n     *\n     * Registers the new {@link XKTTextureSet} in {@link XKTModel#textureSets} and {@link XKTModel#.textureSetsList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.textureSetId Unique ID for the {@link XKTTextureSet}.\n     * @param {*} [params.colorTextureId] ID of *RGBA* base color {@link XKTTexture}, with color in *RGB* and alpha in *A*.\n     * @param {*} [params.metallicRoughnessTextureId] ID of *RGBA* metal-roughness {@link XKTTexture}, with the metallic factor in *R*, and roughness factor in *G*.\n     * @param {*} [params.normalsTextureId] ID of *RGBA* normal {@link XKTTexture}, with normal map vectors in *RGB*.\n     * @param {*} [params.emissiveTextureId] ID of *RGBA* emissive {@link XKTTexture}, with emissive color in *RGB*.\n     * @param {*} [params.occlusionTextureId] ID of *RGBA* occlusion {@link XKTTexture}, with occlusion factor in *R*.\n     * @returns {XKTTextureSet} The new {@link XKTTextureSet}.\n     */\n    createTextureSet(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.textureSetId === null || params.textureSetId === undefined) {\n            throw \"Parameter expected: params.textureSetId\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more textureSets\");\n            return;\n        }\n\n        if (this.textureSets[params.textureSetId]) {\n            console.error(\"XKTTextureSet already exists with this ID: \" + params.textureSetId);\n            return;\n        }\n\n        let colorTexture;\n        if (params.colorTextureId !== undefined && params.colorTextureId !== null) {\n            colorTexture = this.textures[params.colorTextureId];\n            if (!colorTexture) {\n                console.error(`Texture not found: ${params.colorTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            colorTexture.channel = COLOR_TEXTURE;\n        }\n\n        let metallicRoughnessTexture;\n        if (params.metallicRoughnessTextureId !== undefined && params.metallicRoughnessTextureId !== null) {\n            metallicRoughnessTexture = this.textures[params.metallicRoughnessTextureId];\n            if (!metallicRoughnessTexture) {\n                console.error(`Texture not found: ${params.metallicRoughnessTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            metallicRoughnessTexture.channel = METALLIC_ROUGHNESS_TEXTURE;\n        }\n\n        let normalsTexture;\n        if (params.normalsTextureId !== undefined && params.normalsTextureId !== null) {\n            normalsTexture = this.textures[params.normalsTextureId];\n            if (!normalsTexture) {\n                console.error(`Texture not found: ${params.normalsTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            normalsTexture.channel = NORMALS_TEXTURE;\n        }\n\n        let emissiveTexture;\n        if (params.emissiveTextureId !== undefined && params.emissiveTextureId !== null) {\n            emissiveTexture = this.textures[params.emissiveTextureId];\n            if (!emissiveTexture) {\n                console.error(`Texture not found: ${params.emissiveTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            emissiveTexture.channel = EMISSIVE_TEXTURE;\n        }\n\n        let occlusionTexture;\n        if (params.occlusionTextureId !== undefined && params.occlusionTextureId !== null) {\n            occlusionTexture = this.textures[params.occlusionTextureId];\n            if (!occlusionTexture) {\n                console.error(`Texture not found: ${params.occlusionTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            occlusionTexture.channel = OCCLUSION_TEXTURE;\n        }\n\n        const textureSet = new XKTTextureSet({\n            textureSetId: params.textureSetId,\n            textureSetIndex: this.textureSetsList.length,\n            colorTexture,\n            metallicRoughnessTexture,\n            normalsTexture,\n            emissiveTexture,\n            occlusionTexture\n        });\n\n        this.textureSets[params.textureSetId] = textureSet;\n        this.textureSetsList.push(textureSet);\n\n        return textureSet;\n    }\n\n    /**\n     * Creates an {@link XKTGeometry} within this XKTModel.\n     *\n     * Registers the new {@link XKTGeometry} in {@link XKTModel#geometries} and {@link XKTModel#geometriesList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.geometryId Unique ID for the {@link XKTGeometry}.\n     * @param {String} params.primitiveType The type of {@link XKTGeometry}: \"triangles\", \"lines\" or \"points\".\n     * @param {Float64Array} params.positions Floating-point Local-space vertex positions for the {@link XKTGeometry}. Required for all primitive types.\n     * @param {Number[]} [params.normals] Floating-point vertex normals for the {@link XKTGeometry}. Only used with triangles primitives. Ignored for points and lines.\n     * @param {Number[]} [params.colors] Floating-point RGBA vertex colors for the {@link XKTGeometry}. Required for points primitives. Ignored for lines and triangles.\n     * @param {Number[]} [params.colorsCompressed] Integer RGBA vertex colors for the {@link XKTGeometry}. Required for points primitives. Ignored for lines and triangles.\n     * @param {Number[]} [params.uvs] Floating-point vertex UV coordinates for the {@link XKTGeometry}. Alias for ````uv````.\n     * @param {Number[]} [params.uv] Floating-point vertex UV coordinates for the {@link XKTGeometry}. Alias for ````uvs````.\n     * @param {Number[]} [params.colorsCompressed] Integer RGBA vertex colors for the {@link XKTGeometry}. Required for points primitives. Ignored for lines and triangles.\n     * @param {Uint32Array} [params.indices] Indices for the {@link XKTGeometry}. Required for triangles and lines primitives. Ignored for points.\n     * @param {Number} [params.edgeThreshold=10]\n     * @returns {XKTGeometry} The new {@link XKTGeometry}.\n     */\n    createGeometry(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.geometryId === null || params.geometryId === undefined) {\n            throw \"Parameter expected: params.geometryId\";\n        }\n\n        if (!params.primitiveType) {\n            throw \"Parameter expected: params.primitiveType\";\n        }\n\n        if (!params.positions) {\n            throw \"Parameter expected: params.positions\";\n        }\n\n        const triangles = params.primitiveType === \"triangles\";\n        const points = params.primitiveType === \"points\";\n        const lines = params.primitiveType === \"lines\";\n        const line_strip = params.primitiveType === \"line-strip\";\n        const triangle_strip = params.primitiveType === \"triangle-strip\";\n        const triangle_fan = params.primitiveType === \"triangle-fan\";\n\n        if (!triangles && !points && !lines && !line_strip) {\n            throw \"Unsupported value for params.primitiveType: \"\n            + params.primitiveType\n            + \"' - supported values are 'triangles', 'points', 'lines', 'line-strip', 'triangle-strip' and 'triangle-fan\";\n        }\n\n        if (triangles) {\n            if (!params.indices) {\n                throw \"Parameter expected for 'triangles' primitive: params.indices\";\n            }\n        }\n\n        if (points) {\n            if (!params.colors && !params.colorsCompressed) {\n                throw \"Parameter expected for 'points' primitive: params.colors or params.colorsCompressed\";\n            }\n        }\n\n        if (lines) {\n            if (!params.indices) {\n                throw \"Parameter expected for 'lines' primitive: params.indices\";\n            }\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more geometries\");\n            return;\n        }\n\n        if (this.geometries[params.geometryId]) {\n            console.error(\"XKTGeometry already exists with this ID: \" + params.geometryId);\n            return;\n        }\n\n        const geometryId = params.geometryId;\n        const primitiveType = params.primitiveType;\n        const positions = new Float64Array(params.positions); // May modify in #finalize\n\n        const xktGeometryCfg = {\n            geometryId: geometryId,\n            geometryIndex: this.geometriesList.length,\n            primitiveType: primitiveType,\n            positions: positions,\n            uvs: params.uvs || params.uv\n        }\n\n        if (triangles) {\n            if (params.normals) {\n                xktGeometryCfg.normals = new Float32Array(params.normals);\n            }\n            xktGeometryCfg.indices = params.indices;\n        }\n\n        if (points) {\n            if (params.colorsCompressed) {\n                xktGeometryCfg.colorsCompressed = new Uint8Array(params.colorsCompressed);\n\n            } else {\n                const colors = params.colors;\n                const colorsCompressed = new Uint8Array(colors.length);\n                for (let i = 0, len = colors.length; i < len; i++) {\n                    colorsCompressed[i] = Math.floor(colors[i] * 255);\n                }\n                xktGeometryCfg.colorsCompressed = colorsCompressed;\n            }\n        }\n\n        if (lines) {\n            xktGeometryCfg.indices = params.indices;\n        }\n\n        if (triangles) {\n\n            if (!params.normals && !params.uv && !params.uvs) {\n\n                // Building models often duplicate positions to allow face-aligned vertex normals; when we're not\n                // providing normals for a geometry, it becomes possible to merge duplicate vertex positions within it.\n\n                // TODO: Make vertex merging also merge normals?\n\n                const mergedPositions = [];\n                const mergedIndices = [];\n                mergeVertices(xktGeometryCfg.positions, xktGeometryCfg.indices, mergedPositions, mergedIndices);\n                xktGeometryCfg.positions = new Float64Array(mergedPositions);\n                xktGeometryCfg.indices = mergedIndices;\n            }\n\n            xktGeometryCfg.edgeIndices = buildEdgeIndices(xktGeometryCfg.positions, xktGeometryCfg.indices, null, params.edgeThreshold || this.edgeThreshold || 10);\n        }\n\n        const geometry = new XKTGeometry(xktGeometryCfg);\n\n        this.geometries[geometryId] = geometry;\n        this.geometriesList.push(geometry);\n\n        return geometry;\n    }\n\n    /**\n     * Creates an {@link XKTMesh} within this XKTModel.\n     *\n     * An {@link XKTMesh} can be owned by one {@link XKTEntity}, which can own multiple {@link XKTMesh}es.\n     *\n     * Registers the new {@link XKTMesh} in {@link XKTModel#meshes} and {@link XKTModel#meshesList}.\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.meshId Unique ID for the {@link XKTMesh}.\n     * @param {Number} params.geometryId ID of an existing {@link XKTGeometry} in {@link XKTModel#geometries}.\n     * @param {Number} [params.textureSetId] Unique ID of an {@link XKTTextureSet} in {@link XKTModel#textureSets}.\n     * @param {Float32Array} params.color RGB color for the {@link XKTMesh}, with each color component in range [0..1].\n     * @param {Number} [params.metallic=0] How metallic the {@link XKTMesh} is, in range [0..1]. A value of ````0```` indicates fully dielectric material, while ````1```` indicates fully metallic.\n     * @param {Number} [params.roughness=1] How rough the {@link XKTMesh} is, in range [0..1]. A value of ````0```` indicates fully smooth, while ````1```` indicates fully rough.\n     * @param {Number} params.opacity Opacity factor for the {@link XKTMesh}, in range [0..1].\n     * @param {Float64Array} [params.matrix] Modeling matrix for the {@link XKTMesh}. Overrides ````position````, ````scale```` and ````rotation```` parameters.\n     * @param {Number[]} [params.position=[0,0,0]] Position of the {@link XKTMesh}. Overridden by the ````matrix```` parameter.\n     * @param {Number[]} [params.scale=[1,1,1]] Scale of the {@link XKTMesh}. Overridden by the ````matrix```` parameter.\n     * @param {Number[]} [params.rotation=[0,0,0]] Rotation of the {@link XKTMesh} as Euler angles given in degrees, for each of the X, Y and Z axis. Overridden by the ````matrix```` parameter.\n     * @returns {XKTMesh} The new {@link XKTMesh}.\n     */\n    createMesh(params) {\n\n        if (params.meshId === null || params.meshId === undefined) {\n            throw \"Parameter expected: params.meshId\";\n        }\n\n        if (params.geometryId === null || params.geometryId === undefined) {\n            throw \"Parameter expected: params.geometryId\";\n        }\n\n        if (this.finalized) {\n            throw \"XKTModel has been finalized, can't add more meshes\";\n        }\n\n        if (this.meshes[params.meshId]) {\n            console.error(\"XKTMesh already exists with this ID: \" + params.meshId);\n            return;\n        }\n\n        const geometry = this.geometries[params.geometryId];\n\n        if (!geometry) {\n            console.error(\"XKTGeometry not found: \" + params.geometryId);\n            return;\n        }\n\n        geometry.numInstances++;\n\n        let textureSet = null;\n        if (params.textureSetId) {\n            textureSet = this.textureSets[params.textureSetId];\n            if (!textureSet) {\n                console.error(\"XKTTextureSet not found: \" + params.textureSetId);\n                return;\n            }\n            textureSet.numInstances++;\n        }\n\n        let matrix = params.matrix;\n\n        if (!matrix) {\n\n            const position = params.position;\n            const scale = params.scale;\n            const rotation = params.rotation;\n\n            if (position || scale || rotation) {\n                matrix = math.identityMat4();\n                const quaternion = math.eulerToQuaternion(rotation || [0, 0, 0], \"XYZ\", math.identityQuaternion());\n                math.composeMat4(position || [0, 0, 0], quaternion, scale || [1, 1, 1], matrix)\n\n            } else {\n                matrix = math.identityMat4();\n            }\n        }\n\n        const meshIndex = this.meshesList.length;\n\n        const mesh = new XKTMesh({\n            meshId: params.meshId,\n            meshIndex,\n            matrix,\n            geometry,\n            color: params.color,\n            metallic: params.metallic,\n            roughness: params.roughness,\n            opacity: params.opacity,\n            textureSet\n        });\n\n        this.meshes[mesh.meshId] = mesh;\n        this.meshesList.push(mesh);\n\n        return mesh;\n    }\n\n    /**\n     * Creates an {@link XKTEntity} within this XKTModel.\n     *\n     * Registers the new {@link XKTEntity} in {@link XKTModel#entities} and {@link XKTModel#entitiesList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {String} params.entityId Unique ID for the {@link XKTEntity}.\n     * @param {String[]} params.meshIds IDs of {@link XKTMesh}es used by the {@link XKTEntity}. Note that each {@link XKTMesh} can only be used by one {@link XKTEntity}.\n     * @returns {XKTEntity} The new {@link XKTEntity}.\n     */\n    createEntity(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.entityId === null || params.entityId === undefined) {\n            throw \"Parameter expected: params.entityId\";\n        }\n\n        if (!params.meshIds) {\n            throw \"Parameter expected: params.meshIds\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more entities\");\n            return;\n        }\n\n        if (params.meshIds.length === 0) {\n            console.warn(\"XKTEntity has no meshes - won't create: \" + params.entityId);\n            return;\n        }\n\n        let entityId = params.entityId;\n\n        if (this.entities[entityId]) {\n            while (this.entities[entityId]) {\n                entityId = math.createUUID();\n            }\n            console.error(\"XKTEntity already exists with this ID: \" + params.entityId + \" - substituting random ID instead: \" + entityId);\n        }\n\n        const meshIds = params.meshIds;\n        const meshes = [];\n\n        for (let meshIdIdx = 0, meshIdLen = meshIds.length; meshIdIdx < meshIdLen; meshIdIdx++) {\n\n            const meshId = meshIds[meshIdIdx];\n            const mesh = this.meshes[meshId];\n\n            if (!mesh) {\n                console.error(\"XKTMesh found: \" + meshId);\n                continue;\n            }\n\n            if (mesh.entity) {\n                console.error(\"XKTMesh \" + meshId + \" already used by XKTEntity \" + mesh.entity.entityId);\n                continue;\n            }\n\n            meshes.push(mesh);\n        }\n\n        const entity = new XKTEntity(entityId, meshes);\n\n        for (let i = 0, len = meshes.length; i < len; i++) {\n            const mesh = meshes[i];\n            mesh.entity = entity;\n        }\n\n        this.entities[entityId] = entity;\n        this.entitiesList.push(entity);\n\n        return entity;\n    }\n\n    /**\n     * Creates a default {@link XKTMetaObject} for each {@link XKTEntity} that does not already have one.\n     */\n    createDefaultMetaObjects() {\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n\n            const entity = this.entitiesList[i];\n            const metaObjectId = entity.entityId;\n            const metaObject = this.metaObjects[metaObjectId];\n\n            if (!metaObject) {\n\n                if (!this._rootMetaObject) {\n                    this._rootMetaObject = this.createMetaObject({\n                        metaObjectId: this.modelId,\n                        metaObjectType: \"Default\",\n                        metaObjectName: this.modelId\n                    });\n                }\n\n                this.createMetaObject({\n                    metaObjectId: metaObjectId,\n                    metaObjectType: \"Default\",\n                    metaObjectName: \"\" + metaObjectId,\n                    parentMetaObjectId: this._rootMetaObject.metaObjectId\n                });\n            }\n        }\n    }\n\n    /**\n     * Finalizes this XKTModel.\n     *\n     * After finalizing, we may then serialize the model to an array buffer using {@link writeXKTModelToArrayBuffer}.\n     *\n     * Logs error and does nothing if this XKTModel has already been finalized.\n     *\n     * Internally, this method:\n     *\n     * * for each {@link XKTEntity} that doesn't already have a {@link XKTMetaObject}, creates one with {@link XKTMetaObject#metaObjectType} set to \"default\"\n     * * sets each {@link XKTEntity}'s {@link XKTEntity#hasReusedGeometries} true if it shares its {@link XKTGeometry}s with other {@link XKTEntity}s,\n     * * creates each {@link XKTEntity}'s {@link XKTEntity#aabb},\n     * * creates {@link XKTTile}s in {@link XKTModel#tilesList}, and\n     * * sets {@link XKTModel#finalized} ````true````.\n     */\n    async finalize() {\n\n        if (this.finalized) {\n            console.log(\"XKTModel already finalized\");\n            return;\n        }\n\n        this._removeUnusedTextures();\n\n        await this._compressTextures();\n\n        this._bakeSingleUseGeometryPositions();\n\n        this._bakeAndOctEncodeNormals();\n\n        this._createEntityAABBs();\n\n        const rootKDNode = this._createKDTree();\n\n        this.entitiesList = [];\n\n        this._createTilesFromKDTree(rootKDNode);\n\n        this._createReusedGeometriesDecodeMatrix();\n\n        this._flagSolidGeometries();\n\n        this.aabb.set(rootKDNode.aabb);\n\n        this.finalized = true;\n    }\n\n    _removeUnusedTextures() {\n        let texturesList = [];\n        const textures = {};\n        for (let i = 0, leni = this.texturesList.length; i < leni; i++) {\n            const texture = this.texturesList[i];\n            if (texture.channel !== null) {\n                texture.textureIndex = texturesList.length;\n                texturesList.push(texture);\n                textures[texture.textureId] = texture;\n            }\n        }\n        this.texturesList = texturesList;\n        this.textures = textures;\n    }\n\n    _compressTextures() {\n        let countTextures = this.texturesList.length;\n        return new Promise((resolve) => {\n            if (countTextures === 0) {\n                resolve();\n                return;\n            }\n            for (let i = 0, leni = this.texturesList.length; i < leni; i++) {\n                const texture = this.texturesList[i];\n                const encodingOptions = TEXTURE_ENCODING_OPTIONS[texture.channel] || {};\n\n                if (texture.src) {\n\n                    // XKTTexture created with XKTModel#createTexture({ src: ... })\n\n                    const src = texture.src;\n                    const fileExt = src.split('.').pop();\n                    switch (fileExt) {\n                        case \"jpeg\":\n                        case \"jpg\":\n                        case \"png\":\n                            load(src, ImageLoader, {\n                                image: {\n                                    type: \"data\"\n                                }\n                            }).then((imageData) => {\n                                if (texture.compressed) {\n                                    encode(imageData, KTX2BasisWriter, encodingOptions).then((encodedData) => {\n                                        const encodedImageData = new Uint8Array(encodedData);\n                                        texture.imageData = encodedImageData;\n                                        if (--countTextures <= 0) {\n                                            resolve();\n                                        }\n                                    }).catch((err) => {\n                                        console.error(\"[XKTModel.finalize] Failed to encode image: \" + err);\n                                        if (--countTextures <= 0) {\n                                            resolve();\n                                        }\n                                    });\n                                } else {\n                                    texture.imageData = new Uint8Array(1);\n                                    if (--countTextures <= 0) {\n                                        resolve();\n                                    }\n                                }\n                            }).catch((err) => {\n                                console.error(\"[XKTModel.finalize] Failed to load image: \" + err);\n                                if (--countTextures <= 0) {\n                                    resolve();\n                                }\n                            });\n                            break;\n                        default:\n                            if (--countTextures <= 0) {\n                                resolve();\n                            }\n                            break;\n                    }\n                }\n\n                if (texture.imageData) {\n\n                    // XKTTexture created with XKTModel#createTexture({ imageData: ... })\n\n                    if (texture.compressed) {\n                        encode(texture.imageData, KTX2BasisWriter, encodingOptions)\n                            .then((encodedImageData) => {\n                                texture.imageData = new Uint8Array(encodedImageData);\n                                if (--countTextures <= 0) {\n                                    resolve();\n                                }\n                            }).catch((err) => {\n                            console.error(\"[XKTModel.finalize] Failed to encode image: \" + err);\n                            if (--countTextures <= 0) {\n                                resolve();\n                            }\n                        });\n                    } else {\n                        texture.imageData = new Uint8Array(1);\n                        if (--countTextures <= 0) {\n                            resolve();\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    _bakeSingleUseGeometryPositions() {\n\n        for (let j = 0, lenj = this.meshesList.length; j < lenj; j++) {\n\n            const mesh = this.meshesList[j];\n\n            const geometry = mesh.geometry;\n\n            if (geometry.numInstances === 1) {\n\n                const matrix = mesh.matrix;\n\n                if (matrix && (!math.isIdentityMat4(matrix))) {\n\n                    const positions = geometry.positions;\n\n                    for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                        tempVec4a[0] = positions[i + 0];\n                        tempVec4a[1] = positions[i + 1];\n                        tempVec4a[2] = positions[i + 2];\n                        tempVec4a[3] = 1;\n\n                        math.transformPoint4(matrix, tempVec4a, tempVec4b);\n\n                        positions[i + 0] = tempVec4b[0];\n                        positions[i + 1] = tempVec4b[1];\n                        positions[i + 2] = tempVec4b[2];\n                    }\n                }\n            }\n        }\n    }\n\n    _bakeAndOctEncodeNormals() {\n\n        for (let i = 0, len = this.meshesList.length; i < len; i++) {\n\n            const mesh = this.meshesList[i];\n            const geometry = mesh.geometry;\n\n            if (geometry.normals && !geometry.normalsOctEncoded) {\n\n                geometry.normalsOctEncoded = new Int8Array(geometry.normals.length);\n\n                if (geometry.numInstances > 1) {\n                    geometryCompression.octEncodeNormals(geometry.normals, geometry.normals.length, geometry.normalsOctEncoded, 0);\n\n                } else {\n                    const modelNormalMatrix = math.inverseMat4(math.transposeMat4(mesh.matrix, tempMat4), tempMat4b);\n                    geometryCompression.transformAndOctEncodeNormals(modelNormalMatrix, geometry.normals, geometry.normals.length, geometry.normalsOctEncoded, 0);\n                }\n            }\n        }\n    }\n\n    _createEntityAABBs() {\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n\n            const entity = this.entitiesList[i];\n            const entityAABB = entity.aabb;\n            const meshes = entity.meshes;\n\n            math.collapseAABB3(entityAABB);\n\n            for (let j = 0, lenj = meshes.length; j < lenj; j++) {\n\n                const mesh = meshes[j];\n                const geometry = mesh.geometry;\n                const matrix = mesh.matrix;\n\n                if (geometry.numInstances > 1) {\n\n                    const positions = geometry.positions;\n                    for (let i = 0, len = positions.length; i < len; i += 3) {\n                        tempVec4a[0] = positions[i + 0];\n                        tempVec4a[1] = positions[i + 1];\n                        tempVec4a[2] = positions[i + 2];\n                        tempVec4a[3] = 1;\n                        math.transformPoint4(matrix, tempVec4a, tempVec4b);\n                        math.expandAABB3Point3(entityAABB, tempVec4b);\n                    }\n\n                } else {\n\n                    const positions = geometry.positions;\n                    for (let i = 0, len = positions.length; i < len; i += 3) {\n                        tempVec4a[0] = positions[i + 0];\n                        tempVec4a[1] = positions[i + 1];\n                        tempVec4a[2] = positions[i + 2];\n                        math.expandAABB3Point3(entityAABB, tempVec4a);\n                    }\n                }\n            }\n        }\n    }\n\n    _createKDTree() {\n\n        let aabb;\n        if (this.modelAABB) {\n            aabb = this.modelAABB; // Pre-known uber AABB\n        } else {\n            aabb = math.collapseAABB3();\n            for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n                const entity = this.entitiesList[i];\n                math.expandAABB3(aabb, entity.aabb);\n            }\n        }\n\n        const rootKDNode = new KDNode(aabb);\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n            const entity = this.entitiesList[i];\n            this._insertEntityIntoKDTree(rootKDNode, entity);\n        }\n\n        return rootKDNode;\n    }\n\n    _insertEntityIntoKDTree(kdNode, entity) {\n\n        const nodeAABB = kdNode.aabb;\n        const entityAABB = entity.aabb;\n\n        const nodeAABBDiag = math.getAABB3Diag(nodeAABB);\n\n        if (nodeAABBDiag < this.minTileSize) {\n            kdNode.entities = kdNode.entities || [];\n            kdNode.entities.push(entity);\n            math.expandAABB3(nodeAABB, entityAABB);\n            return;\n        }\n\n        if (kdNode.left) {\n            if (math.containsAABB3(kdNode.left.aabb, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.left, entity);\n                return;\n            }\n        }\n\n        if (kdNode.right) {\n            if (math.containsAABB3(kdNode.right.aabb, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.right, entity);\n                return;\n            }\n        }\n\n        kdTreeDimLength[0] = nodeAABB[3] - nodeAABB[0];\n        kdTreeDimLength[1] = nodeAABB[4] - nodeAABB[1];\n        kdTreeDimLength[2] = nodeAABB[5] - nodeAABB[2];\n\n        let dim = 0;\n\n        if (kdTreeDimLength[1] > kdTreeDimLength[dim]) {\n            dim = 1;\n        }\n\n        if (kdTreeDimLength[2] > kdTreeDimLength[dim]) {\n            dim = 2;\n        }\n\n        if (!kdNode.left) {\n            const aabbLeft = nodeAABB.slice();\n            aabbLeft[dim + 3] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            kdNode.left = new KDNode(aabbLeft);\n            if (math.containsAABB3(aabbLeft, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.left, entity);\n                return;\n            }\n        }\n\n        if (!kdNode.right) {\n            const aabbRight = nodeAABB.slice();\n            aabbRight[dim] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            kdNode.right = new KDNode(aabbRight);\n            if (math.containsAABB3(aabbRight, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.right, entity);\n                return;\n            }\n        }\n\n        kdNode.entities = kdNode.entities || [];\n        kdNode.entities.push(entity);\n\n        math.expandAABB3(nodeAABB, entityAABB);\n    }\n\n    _createTilesFromKDTree(rootKDNode) {\n        this._createTilesFromKDNode(rootKDNode);\n    }\n\n    _createTilesFromKDNode(kdNode) {\n        if (kdNode.entities && kdNode.entities.length > 0) {\n            this._createTileFromEntities(kdNode);\n        }\n        if (kdNode.left) {\n            this._createTilesFromKDNode(kdNode.left);\n        }\n        if (kdNode.right) {\n            this._createTilesFromKDNode(kdNode.right);\n        }\n    }\n\n    /**\n     * Creates a tile from the given entities.\n     *\n     * For each single-use {@link XKTGeometry}, this method centers {@link XKTGeometry#positions} to make them relative to the\n     * tile's center, then quantizes the positions to unsigned 16-bit integers, relative to the tile's boundary.\n     *\n     * @param entities\n     */\n    _createTileFromEntities(kdNode) {\n\n        const tileAABB = kdNode.aabb;\n\n        // for (let i = 0; i < entities.length; i++) {\n        //     const entity = entities [i];\n        //     math.expandAABB3(tileAABB, entity.aabb);\n        // }\n\n        const tileCenter = math.getAABB3Center(tileAABB);\n        const tileCenterNeg = math.mulVec3Scalar(tileCenter, -1, math.vec3());\n\n        const rtcAABB = math.AABB3(); // AABB centered at the RTC origin\n\n        rtcAABB[0] = tileAABB[0] - tileCenter[0];\n        rtcAABB[1] = tileAABB[1] - tileCenter[1];\n        rtcAABB[2] = tileAABB[2] - tileCenter[2];\n        rtcAABB[3] = tileAABB[3] - tileCenter[0];\n        rtcAABB[4] = tileAABB[4] - tileCenter[1];\n        rtcAABB[5] = tileAABB[5] - tileCenter[2];\n\n        for (let i = 0; i < kdNode.entities.length; i++) {\n\n            const entity = kdNode.entities [i];\n\n            const meshes = entity.meshes;\n\n            for (let j = 0, lenj = meshes.length; j < lenj; j++) {\n\n                const mesh = meshes[j];\n                const geometry = mesh.geometry;\n\n                if (!geometry.reused) { // Batched geometry\n\n                    const positions = geometry.positions;\n\n                    // Center positions relative to their tile's World-space center\n\n                    for (let k = 0, lenk = positions.length; k < lenk; k += 3) {\n\n                        positions[k + 0] -= tileCenter[0];\n                        positions[k + 1] -= tileCenter[1];\n                        positions[k + 2] -= tileCenter[2];\n                    }\n\n                    // Quantize positions relative to tile's RTC-space boundary\n\n                    geometryCompression.quantizePositions(positions, positions.length, rtcAABB, geometry.positionsQuantized);\n\n                } else { // Instanced geometry\n\n                    // Post-multiply a translation to the mesh's modeling matrix\n                    // to center the entity's geometry instances to the tile RTC center\n\n                    //////////////////////////////\n                    // Why do we do this?\n                    // Seems to break various models\n                    /////////////////////////////////\n\n                    math.translateMat4v(tileCenterNeg, mesh.matrix);\n                }\n            }\n\n            entity.entityIndex = this.entitiesList.length;\n\n            this.entitiesList.push(entity);\n        }\n\n        const tile = new XKTTile(tileAABB, kdNode.entities);\n\n        this.tilesList.push(tile);\n    }\n\n    _createReusedGeometriesDecodeMatrix() {\n\n        const tempVec3a = math.vec3();\n        const reusedGeometriesAABB = math.collapseAABB3(math.AABB3());\n        let countReusedGeometries = 0;\n\n        for (let geometryIndex = 0, numGeometries = this.geometriesList.length; geometryIndex < numGeometries; geometryIndex++) {\n\n            const geometry = this.geometriesList [geometryIndex];\n\n            if (geometry.reused) { // Instanced geometry\n\n                const positions = geometry.positions;\n\n                for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                    tempVec3a[0] = positions[i];\n                    tempVec3a[1] = positions[i + 1];\n                    tempVec3a[2] = positions[i + 2];\n\n                    math.expandAABB3Point3(reusedGeometriesAABB, tempVec3a);\n                }\n\n                countReusedGeometries++;\n            }\n        }\n\n        if (countReusedGeometries > 0) {\n\n            geometryCompression.createPositionsDecodeMatrix(reusedGeometriesAABB, this.reusedGeometriesDecodeMatrix);\n\n            for (let geometryIndex = 0, numGeometries = this.geometriesList.length; geometryIndex < numGeometries; geometryIndex++) {\n\n                const geometry = this.geometriesList [geometryIndex];\n\n                if (geometry.reused) {\n                    geometryCompression.quantizePositions(geometry.positions, geometry.positions.length, reusedGeometriesAABB, geometry.positionsQuantized);\n                }\n            }\n\n        } else {\n            math.identityMat4(this.reusedGeometriesDecodeMatrix); // No need for this matrix, but we'll be tidy and set it to identity\n        }\n    }\n\n    _flagSolidGeometries() {\n        let maxNumPositions = 0;\n        let maxNumIndices = 0;\n        for (let i = 0, len = this.geometriesList.length; i < len; i++) {\n            const geometry = this.geometriesList[i];\n            if (geometry.primitiveType === \"triangles\") {\n                if (geometry.positionsQuantized.length > maxNumPositions) {\n                    maxNumPositions = geometry.positionsQuantized.length;\n                }\n                if (geometry.indices.length > maxNumIndices) {\n                    maxNumIndices = geometry.indices.length;\n                }\n            }\n        }\n        let vertexIndexMapping = new Array(maxNumPositions / 3);\n        let edges = new Array(maxNumIndices);\n        for (let i = 0, len = this.geometriesList.length; i < len; i++) {\n            const geometry = this.geometriesList[i];\n            if (geometry.primitiveType === \"triangles\") {\n                geometry.solid = isTriangleMeshSolid(geometry.indices, geometry.positionsQuantized, vertexIndexMapping, edges);\n            }\n        }\n    }\n}\n\nexport {\n    XKTModel\n}","/**\n * Given geometry defined as an array of positions, optional normals, option uv and an array of indices, returns\n * modified arrays that have duplicate vertices removed.\n *\n * @private\n */\nfunction mergeVertices(positions, indices, mergedPositions, mergedIndices) {\n    const positionsMap = {};\n    const indicesLookup = [];\n    const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    const precision = 10 ** precisionPoints;\n    let uvi = 0;\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        const vx = positions[i];\n        const vy = positions[i + 1];\n        const vz = positions[i + 2];\n        const key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n        if (positionsMap[key] === undefined) {\n            positionsMap[key] = mergedPositions.length / 3;\n            mergedPositions.push(vx);\n            mergedPositions.push(vy);\n            mergedPositions.push(vz);\n        }\n        indicesLookup[i / 3] = positionsMap[key];\n        uvi += 2;\n    }\n    for (let i = 0, len = indices.length; i < len; i++) {\n        mergedIndices[i] = indicesLookup[indices[i]];\n    }\n}\n\nexport {mergeVertices};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"pako\");","import {XKT_INFO} from \"../../XKT_INFO.js\";\nimport * as pako from 'pako';\n\nconst XKT_VERSION = XKT_INFO.xktVersion;\nconst NUM_TEXTURE_ATTRIBUTES = 9;\nconst NUM_MATERIAL_ATTRIBUTES = 6;\n\n/**\n * Writes an {@link XKTModel} to an {@link ArrayBuffer}.\n *\n * @param {XKTModel} xktModel The {@link XKTModel}.\n * @param {String} metaModelJSON The metamodel JSON in an string.\n * @param {Object} [stats] Collects statistics.\n * @returns {ArrayBuffer} The {@link ArrayBuffer}.\n */\nfunction writeXKTModelToArrayBuffer(xktModel, metaModelJSON, stats = {}) {\n    const data = getModelData(xktModel, metaModelJSON, stats);\n    const deflatedData = deflateData(data, metaModelJSON);\n    stats.texturesSize += deflatedData.textureData.byteLength;\n    const arrayBuffer = createArrayBuffer(deflatedData);\n    return arrayBuffer;\n}\n\nfunction getModelData(xktModel, metaModelDataStr, stats) {\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Allocate data\n    //------------------------------------------------------------------------------------------------------------------\n\n    const propertySetsList = xktModel.propertySetsList;\n    const metaObjectsList = xktModel.metaObjectsList;\n    const geometriesList = xktModel.geometriesList;\n    const texturesList = xktModel.texturesList;\n    const textureSetsList = xktModel.textureSetsList;\n    const meshesList = xktModel.meshesList;\n    const entitiesList = xktModel.entitiesList;\n    const tilesList = xktModel.tilesList;\n\n    const numPropertySets = propertySetsList.length;\n    const numMetaObjects = metaObjectsList.length;\n    const numGeometries = geometriesList.length;\n    const numTextures = texturesList.length;\n    const numTextureSets = textureSetsList.length;\n    const numMeshes = meshesList.length;\n    const numEntities = entitiesList.length;\n    const numTiles = tilesList.length;\n\n    let lenPositions = 0;\n    let lenNormals = 0;\n    let lenColors = 0;\n    let lenUVs = 0;\n    let lenIndices = 0;\n    let lenEdgeIndices = 0;\n    let lenMatrices = 0;\n    let lenTextures = 0;\n\n    for (let geometryIndex = 0; geometryIndex < numGeometries; geometryIndex++) {\n        const geometry = geometriesList [geometryIndex];\n        if (geometry.positionsQuantized) {\n            lenPositions += geometry.positionsQuantized.length;\n        }\n        if (geometry.normalsOctEncoded) {\n            lenNormals += geometry.normalsOctEncoded.length;\n        }\n        if (geometry.colorsCompressed) {\n            lenColors += geometry.colorsCompressed.length;\n        }\n        if (geometry.uvs) {\n            lenUVs += geometry.uvs.length;\n        }\n        if (geometry.indices) {\n            lenIndices += geometry.indices.length;\n        }\n        if (geometry.edgeIndices) {\n            lenEdgeIndices += geometry.edgeIndices.length;\n        }\n    }\n\n    for (let textureIndex = 0; textureIndex < numTextures; textureIndex++) {\n        const xktTexture = texturesList[textureIndex];\n        const imageData = xktTexture.imageData;\n        lenTextures += imageData.byteLength;\n\n        if (xktTexture.compressed) {\n            stats.numCompressedTextures++;\n        }\n    }\n\n    for (let meshIndex = 0; meshIndex < numMeshes; meshIndex++) {\n        const mesh = meshesList[meshIndex];\n        if (mesh.geometry.numInstances > 1) {\n            lenMatrices += 16;\n        }\n    }\n\n    const data = {\n        metadata: {},\n        textureData: new Uint8Array(lenTextures), // All textures\n        eachTextureDataPortion: new Uint32Array(numTextures), // For each texture, an index to its first element in textureData\n        eachTextureAttributes: new Uint16Array(numTextures * NUM_TEXTURE_ATTRIBUTES),\n        positions: new Uint16Array(lenPositions), // All geometry arrays\n        normals: new Int8Array(lenNormals),\n        colors: new Uint8Array(lenColors),\n        uvs: new Float32Array(lenUVs),\n        indices: new Uint32Array(lenIndices),\n        edgeIndices: new Uint32Array(lenEdgeIndices),\n        eachTextureSetTextures: new Int32Array(numTextureSets * 5), // For each texture set, a set of five Texture indices [color, metal/roughness,normals,emissive,occlusion]; each index has value -1 if no texture\n        matrices: new Float32Array(lenMatrices), // Modeling matrices for entities that share geometries. Each entity either shares all it's geometries, or owns all its geometries exclusively. Exclusively-owned geometries are pre-transformed into World-space, and so their entities don't have modeling matrices in this array.\n        reusedGeometriesDecodeMatrix: new Float32Array(xktModel.reusedGeometriesDecodeMatrix), // A single, global vertex position de-quantization matrix for all reused geometries. Reused geometries are quantized to their collective Local-space AABB, and this matrix is derived from that AABB.\n        eachGeometryPrimitiveType: new Uint8Array(numGeometries), // Primitive type for each geometry (0=solid triangles, 1=surface triangles, 2=lines, 3=points, 4=line-strip)\n        eachGeometryPositionsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.positions. Every primitive type has positions.\n        eachGeometryNormalsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.normals. If the next geometry has the same index, then this geometry has no normals.\n        eachGeometryColorsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.colors. If the next geometry has the same index, then this geometry has no colors.\n        eachGeometryUVsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.uvs. If the next geometry has the same index, then this geometry has no UVs.\n        eachGeometryIndicesPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.indices. If the next geometry has the same index, then this geometry has no indices.\n        eachGeometryEdgeIndicesPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.edgeIndices. If the next geometry has the same index, then this geometry has no edge indices.\n        eachMeshGeometriesPortion: new Uint32Array(numMeshes), // For each mesh, an index into the eachGeometry* arrays\n        eachMeshMatricesPortion: new Uint32Array(numMeshes), // For each mesh that shares its geometry, an index to its first element in data.matrices, to indicate the modeling matrix that transforms the shared geometry Local-space vertex positions. This is ignored for meshes that don't share geometries, because the vertex positions of non-shared geometries are pre-transformed into World-space.\n        eachMeshTextureSet: new Int32Array(numMeshes), // For each mesh, the index of its texture set in data.eachTextureSetTextures; this array contains signed integers so that we can use -1 to indicate when a mesh has no texture set\n        eachMeshMaterialAttributes: new Uint8Array(numMeshes * NUM_MATERIAL_ATTRIBUTES), // For each mesh, an RGBA integer color of format [0..255, 0..255, 0..255, 0..255], and PBR metallic and roughness factors, of format [0..255, 0..255]\n        eachEntityId: [], // For each entity, an ID string\n        eachEntityMeshesPortion: new Uint32Array(numEntities), // For each entity, the index of the first element of meshes used by the entity\n        eachTileAABB: new Float64Array(numTiles * 6), // For each tile, an axis-aligned bounding box\n        eachTileEntitiesPortion: new Uint32Array(numTiles) // For each tile, the index of the the first element of eachEntityId, eachEntityMeshesPortion and eachEntityMatricesPortion used by the tile\n    };\n\n    let countPositions = 0;\n    let countNormals = 0;\n    let countColors = 0;\n    let countUVs = 0;\n    let countIndices = 0;\n    let countEdgeIndices = 0;\n\n    // Metadata\n\n    data.metadata = {\n        id: xktModel.modelId,\n        projectId: xktModel.projectId,\n        revisionId: xktModel.revisionId,\n        author: xktModel.author,\n        createdAt: xktModel.createdAt,\n        creatingApplication: xktModel.creatingApplication,\n        schema: xktModel.schema,\n        propertySets: [],\n        metaObjects: []\n    };\n\n    // Property sets\n\n    for (let propertySetsIndex = 0; propertySetsIndex < numPropertySets; propertySetsIndex++) {\n        const propertySet = propertySetsList[propertySetsIndex];\n        const propertySetJSON = {\n            id: \"\" + propertySet.propertySetId,\n            name: propertySet.propertySetName,\n            type: propertySet.propertySetType,\n            properties: propertySet.properties\n        };\n        data.metadata.propertySets.push(propertySetJSON);\n    }\n\n    // Metaobjects\n\n    if (!metaModelDataStr) {\n        for (let metaObjectsIndex = 0; metaObjectsIndex < numMetaObjects; metaObjectsIndex++) {\n            const metaObject = metaObjectsList[metaObjectsIndex];\n            const metaObjectJSON = {\n                name: metaObject.metaObjectName,\n                type: metaObject.metaObjectType,\n                id: \"\" + metaObject.metaObjectId\n            };\n            if (metaObject.parentMetaObjectId !== undefined && metaObject.parentMetaObjectId !== null) {\n                metaObjectJSON.parent = \"\" + metaObject.parentMetaObjectId;\n            }\n            if (metaObject.propertySetIds && metaObject.propertySetIds.length > 0) {\n                metaObjectJSON.propertySetIds = metaObject.propertySetIds;\n            }\n            if (metaObject.external) {\n                metaObjectJSON.external = metaObject.external;\n            }\n            data.metadata.metaObjects.push(metaObjectJSON);\n        }\n    }\n\n    // Geometries\n\n    for (let geometryIndex = 0; geometryIndex < numGeometries; geometryIndex++) {\n        const geometry = geometriesList [geometryIndex];\n        let primitiveType = 1;\n        switch (geometry.primitiveType) {\n            case \"triangles\":\n                primitiveType = geometry.solid ? 0 : 1;\n                break;\n            case \"points\":\n                primitiveType = 2;\n                break;\n            case \"lines\":\n                primitiveType = 3;\n                break;\n            case \"line-strip\":\n                primitiveType = 4;\n                break;\n            case \"triangle-strip\":\n                primitiveType = 5;\n                break;\n            case \"triangle-fan\":\n                primitiveType = 6;\n                break;\n            default:\n                primitiveType = 1\n        }\n        data.eachGeometryPrimitiveType [geometryIndex] = primitiveType;\n        data.eachGeometryPositionsPortion [geometryIndex] = countPositions;\n        data.eachGeometryNormalsPortion [geometryIndex] = countNormals;\n        data.eachGeometryColorsPortion [geometryIndex] = countColors;\n        data.eachGeometryUVsPortion [geometryIndex] = countUVs;\n        data.eachGeometryIndicesPortion [geometryIndex] = countIndices;\n        data.eachGeometryEdgeIndicesPortion [geometryIndex] = countEdgeIndices;\n        if (geometry.positionsQuantized) {\n            data.positions.set(geometry.positionsQuantized, countPositions);\n            countPositions += geometry.positionsQuantized.length;\n        }\n        if (geometry.normalsOctEncoded) {\n            data.normals.set(geometry.normalsOctEncoded, countNormals);\n            countNormals += geometry.normalsOctEncoded.length;\n        }\n        if (geometry.colorsCompressed) {\n            data.colors.set(geometry.colorsCompressed, countColors);\n            countColors += geometry.colorsCompressed.length;\n        }\n        if (geometry.uvs) {\n            data.uvs.set(geometry.uvs, countUVs);\n            countUVs += geometry.uvs.length;\n        }\n        if (geometry.indices) {\n            data.indices.set(geometry.indices, countIndices);\n            countIndices += geometry.indices.length;\n        }\n        if (geometry.edgeIndices) {\n            data.edgeIndices.set(geometry.edgeIndices, countEdgeIndices);\n            countEdgeIndices += geometry.edgeIndices.length;\n        }\n    }\n\n    // Textures\n\n    for (let textureIndex = 0, numTextures = xktModel.texturesList.length, portionIdx = 0; textureIndex < numTextures; textureIndex++) {\n        const xktTexture = xktModel.texturesList[textureIndex];\n        const imageData = xktTexture.imageData;\n        data.textureData.set(imageData, portionIdx);\n        data.eachTextureDataPortion[textureIndex] = portionIdx;\n\n        portionIdx += imageData.byteLength;\n\n        let textureAttrIdx = textureIndex * NUM_TEXTURE_ATTRIBUTES;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.compressed ? 1 : 0;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.mediaType; // GIFMediaType | PNGMediaType | JPEGMediaType\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.width;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.height;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.minFilter; // LinearMipmapLinearFilter | LinearMipMapNearestFilter | NearestMipMapNearestFilter | NearestMipMapLinearFilter | LinearMipMapLinearFilter\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.magFilter; // LinearFilter | NearestFilter\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.wrapS; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.wrapT; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.wrapR; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n    }\n\n    // Texture sets\n\n    for (let textureSetIndex = 0, numTextureSets = xktModel.textureSetsList.length, eachTextureSetTexturesIndex = 0; textureSetIndex < numTextureSets; textureSetIndex++) {\n        const textureSet = textureSetsList[textureSetIndex];\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.colorTexture ? textureSet.colorTexture.textureIndex : -1; // Color map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.metallicRoughnessTexture ? textureSet.metallicRoughnessTexture.textureIndex : -1; // Metal/rough map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.normalsTexture ? textureSet.normalsTexture.textureIndex : -1; // Normal map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.emissiveTexture ? textureSet.emissiveTexture.textureIndex : -1; // Emissive map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.occlusionTexture ? textureSet.occlusionTexture.textureIndex : -1; // Occlusion map\n    }\n\n    // Tiles -> Entities -> Meshes\n\n    let entityIndex = 0;\n    let countEntityMeshesPortion = 0;\n    let eachMeshMaterialAttributesIndex = 0;\n    let matricesIndex = 0;\n    let meshIndex = 0;\n\n    for (let tileIndex = 0; tileIndex < numTiles; tileIndex++) {\n\n        const tile = tilesList [tileIndex];\n        const tileEntities = tile.entities;\n        const numTileEntities = tileEntities.length;\n\n        if (numTileEntities === 0) {\n            continue;\n        }\n\n        data.eachTileEntitiesPortion[tileIndex] = entityIndex;\n\n        const tileAABB = tile.aabb;\n\n        for (let j = 0; j < numTileEntities; j++) {\n\n            const entity = tileEntities[j];\n            const entityMeshes = entity.meshes;\n            const numEntityMeshes = entityMeshes.length;\n\n            for (let k = 0; k < numEntityMeshes; k++) {\n\n                const mesh = entityMeshes[k];\n                const geometry = mesh.geometry;\n                const geometryIndex = geometry.geometryIndex;\n\n                data.eachMeshGeometriesPortion [countEntityMeshesPortion + k] = geometryIndex;\n\n                if (mesh.geometry.numInstances > 1) {\n                    data.matrices.set(mesh.matrix, matricesIndex);\n                    data.eachMeshMatricesPortion [meshIndex] = matricesIndex;\n                    matricesIndex += 16;\n                }\n\n                data.eachMeshTextureSet[meshIndex] = mesh.textureSet ? mesh.textureSet.textureSetIndex : -1;\n\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[0] * 255); // Color RGB\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[1] * 255);\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[2] * 255);\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.opacity * 255); // Opacity\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.metallic * 255); // Metallic\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.roughness * 255); // Roughness\n\n                meshIndex++;\n            }\n\n            data.eachEntityId [entityIndex] = entity.entityId;\n            data.eachEntityMeshesPortion[entityIndex] = countEntityMeshesPortion; // <<<<<<<<<<<<<<<<<<<< Error here? Order/value of countEntityMeshesPortion correct?\n\n            entityIndex++;\n            countEntityMeshesPortion += numEntityMeshes;\n        }\n\n        const tileAABBIndex = tileIndex * 6;\n\n        data.eachTileAABB.set(tileAABB, tileAABBIndex);\n    }\n\n    stats.numTiles = numTiles;\n\n    return data;\n}\n\nfunction deflateData(data, metaModelJSON) {\n    let metaModelBytes;\n    if (metaModelJSON) {\n        const deflatedJSON = deflateJSON(metaModelJSON);\n        metaModelBytes = pako.deflate(deflatedJSON)\n    } else {\n        const deflatedJSON = deflateJSON(data.metadata);\n        metaModelBytes = pako.deflate(deflatedJSON)\n    }\n    return {\n        metadata: metaModelBytes,\n        textureData: pako.deflate(data.textureData.buffer),\n        eachTextureDataPortion: pako.deflate(data.eachTextureDataPortion.buffer),\n        eachTextureAttributes: pako.deflate(data.eachTextureAttributes.buffer),\n        positions: pako.deflate(data.positions.buffer),\n        normals: pako.deflate(data.normals.buffer),\n        colors: pako.deflate(data.colors.buffer),\n        uvs: pako.deflate(data.uvs.buffer),\n        indices: pako.deflate(data.indices.buffer),\n        edgeIndices: pako.deflate(data.edgeIndices.buffer),\n        eachTextureSetTextures: pako.deflate(data.eachTextureSetTextures.buffer),\n        matrices: pako.deflate(data.matrices.buffer),\n        reusedGeometriesDecodeMatrix: pako.deflate(data.reusedGeometriesDecodeMatrix.buffer),\n        eachGeometryPrimitiveType: pako.deflate(data.eachGeometryPrimitiveType.buffer),\n        eachGeometryPositionsPortion: pako.deflate(data.eachGeometryPositionsPortion.buffer),\n        eachGeometryNormalsPortion: pako.deflate(data.eachGeometryNormalsPortion.buffer),\n        eachGeometryColorsPortion: pako.deflate(data.eachGeometryColorsPortion.buffer),\n        eachGeometryUVsPortion: pako.deflate(data.eachGeometryUVsPortion.buffer),\n        eachGeometryIndicesPortion: pako.deflate(data.eachGeometryIndicesPortion.buffer),\n        eachGeometryEdgeIndicesPortion: pako.deflate(data.eachGeometryEdgeIndicesPortion.buffer),\n        eachMeshGeometriesPortion: pako.deflate(data.eachMeshGeometriesPortion.buffer),\n        eachMeshMatricesPortion: pako.deflate(data.eachMeshMatricesPortion.buffer),\n        eachMeshTextureSet: pako.deflate(data.eachMeshTextureSet.buffer),\n        eachMeshMaterialAttributes: pako.deflate(data.eachMeshMaterialAttributes.buffer),\n        eachEntityId: pako.deflate(JSON.stringify(data.eachEntityId)\n            .replace(/[\\u007F-\\uFFFF]/g, function (chr) { // Produce only ASCII-chars, so that the data can be inflated later\n                return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4)\n            })),\n        eachEntityMeshesPortion: pako.deflate(data.eachEntityMeshesPortion.buffer),\n        eachTileAABB: pako.deflate(data.eachTileAABB.buffer),\n        eachTileEntitiesPortion: pako.deflate(data.eachTileEntitiesPortion.buffer)\n    };\n}\n\nfunction deflateJSON(strings) {\n    return JSON.stringify(strings)\n        .replace(/[\\u007F-\\uFFFF]/g, function (chr) { // Produce only ASCII-chars, so that the data can be inflated later\n            return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4)\n        });\n}\n\nfunction createArrayBuffer(deflatedData) {\n    return toArrayBuffer([\n        deflatedData.metadata,\n        deflatedData.textureData,\n        deflatedData.eachTextureDataPortion,\n        deflatedData.eachTextureAttributes,\n        deflatedData.positions,\n        deflatedData.normals,\n        deflatedData.colors,\n        deflatedData.uvs,\n        deflatedData.indices,\n        deflatedData.edgeIndices,\n        deflatedData.eachTextureSetTextures,\n        deflatedData.matrices,\n        deflatedData.reusedGeometriesDecodeMatrix,\n        deflatedData.eachGeometryPrimitiveType,\n        deflatedData.eachGeometryPositionsPortion,\n        deflatedData.eachGeometryNormalsPortion,\n        deflatedData.eachGeometryColorsPortion,\n        deflatedData.eachGeometryUVsPortion,\n        deflatedData.eachGeometryIndicesPortion,\n        deflatedData.eachGeometryEdgeIndicesPortion,\n        deflatedData.eachMeshGeometriesPortion,\n        deflatedData.eachMeshMatricesPortion,\n        deflatedData.eachMeshTextureSet,\n        deflatedData.eachMeshMaterialAttributes,\n        deflatedData.eachEntityId,\n        deflatedData.eachEntityMeshesPortion,\n        deflatedData.eachTileAABB,\n        deflatedData.eachTileEntitiesPortion\n    ]);\n}\n\nfunction toArrayBuffer(elements) {\n    const indexData = new Uint32Array(elements.length + 2);\n    indexData[0] = XKT_VERSION;\n    indexData [1] = elements.length;  // Stored Data 1.1: number of stored elements\n    let dataLen = 0;    // Stored Data 1.2: length of stored elements\n    for (let i = 0, len = elements.length; i < len; i++) {\n        const element = elements[i];\n        const elementsize = element.length;\n        indexData[i + 2] = elementsize;\n        dataLen += elementsize;\n    }\n    const indexBuf = new Uint8Array(indexData.buffer);\n    const dataArray = new Uint8Array(indexBuf.length + dataLen);\n    dataArray.set(indexBuf);\n    let offset = indexBuf.length;\n    for (let i = 0, len = elements.length; i < len; i++) {     // Stored Data 2: the elements themselves\n        const element = elements[i];\n        dataArray.set(element, offset);\n        offset += element.length;\n    }\n    return dataArray.buffer;\n}\n\nexport {writeXKTModelToArrayBuffer};","/** @private */\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n                // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n                // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n        (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n        (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n        (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n            intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n            (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\nexport {earcut};","import {earcut} from './../lib/earcut';\nimport {math} from \"./../lib/math.js\";\n\nconst tempVec2a = math.vec2();\nconst tempVec3a = math.vec3();\nconst tempVec3b = math.vec3();\nconst tempVec3c = math.vec3();\n\n/**\n * @desc Parses a CityJSON model into an {@link XKTModel}.\n *\n * [CityJSON](https://www.cityjson.org) is a JSON-based encoding for a subset of the CityGML data model (version 2.0.0),\n * which is an open standardised data model and exchange format to store digital 3D models of cities and\n * landscapes. CityGML is an official standard of the [Open Geospatial Consortium](https://www.ogc.org/).\n *\n * This converter function supports most of the [CityJSON 1.0.2 Specification](https://www.cityjson.org/specs/1.0.2),\n * with the following limitations:\n *\n * * Does not (yet) support CityJSON semantics for geometry primitives.\n * * Does not (yet) support textured geometries.\n * * Does not (yet) support geometry templates.\n * * When the CityJSON file provides multiple *themes* for a geometry, then we parse only the first of the provided themes for that geometry.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a CityJSON model into it.\n *\n * ````javascript\n * utils.loadJSON(\"./models/cityjson/DenHaag.json\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseCityJSONIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {Object} params.data CityJSON data.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when CityJSON has been parsed.\n */\nfunction parseCityJSONIntoXKTModel({data, xktModel, stats = {}, log}) {\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (data.type !== \"CityJSON\") {\n            reject(\"Invalid argument: data is not a CityJSON file\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        const vertices = data.transform // Avoid side effects - don't modify the CityJSON data\n            ? transformVertices(data.vertices, data.transform)\n            : data.vertices;\n\n        stats.sourceFormat = data.type || \"\";\n        stats.schemaVersion = data.version || \"\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numMetaObjects = 0;\n        stats.numPropertySets = 0;\n        stats.numTriangles = 0;\n        stats.numVertices = 0;\n        stats.numObjects = 0;\n        stats.numGeometries = 0;\n\n        const rootMetaObjectId = math.createUUID();\n\n        xktModel.createMetaObject({\n            metaObjectId: rootMetaObjectId,\n            metaObjectType: \"Model\",\n            metaObjectName: \"Model\"\n        });\n\n        stats.numMetaObjects++;\n\n        const modelMetaObjectId = math.createUUID();\n\n        xktModel.createMetaObject({\n            metaObjectId: modelMetaObjectId,\n            metaObjectType: \"CityJSON\",\n            metaObjectName: \"CityJSON\",\n            parentMetaObjectId: rootMetaObjectId\n        });\n\n        stats.numMetaObjects++;\n\n        const ctx = {\n            data,\n            vertices,\n            xktModel,\n            rootMetaObjectId: modelMetaObjectId,\n            log: (log || function (msg) {\n            }),\n            nextId: 0,\n            stats\n        };\n\n        ctx.log(\"Using parser: parseCityJSONIntoXKTModel\");\n\n        ctx.xktModel.schema = data.type + \" \" + data.version;\n\n        ctx.log(\"Converting \" + ctx.xktModel.schema);\n\n        parseCityJSON(ctx);\n\n        resolve();\n    });\n}\n\nfunction transformVertices(vertices, transform) {\n    const transformedVertices = [];\n    const scale = transform.scale || math.vec3([1, 1, 1]);\n    const translate = transform.translate || math.vec3([0, 0, 0]);\n    for (let i = 0, j = 0; i < vertices.length; i++, j += 3) {\n        const x = (vertices[i][0] * scale[0]) + translate[0];\n        const y = (vertices[i][1] * scale[1]) + translate[1];\n        const z = (vertices[i][2] * scale[2]) + translate[2];\n        transformedVertices.push([x, y, z]);\n    }\n    return transformedVertices;\n}\n\nfunction parseCityJSON(ctx) {\n\n    const data = ctx.data;\n    const cityObjects = data.CityObjects;\n\n    for (const objectId in cityObjects) {\n        if (cityObjects.hasOwnProperty(objectId)) {\n            const cityObject = cityObjects[objectId];\n            parseCityObject(ctx, cityObject, objectId);\n        }\n    }\n}\n\nfunction parseCityObject(ctx, cityObject, objectId) {\n\n    const xktModel = ctx.xktModel;\n    const data = ctx.data;\n    const metaObjectId = objectId;\n    const metaObjectType = cityObject.type;\n    const metaObjectName = metaObjectType + \" : \" + objectId;\n\n    const parentMetaObjectId = cityObject.parents ? cityObject.parents[0] : ctx.rootMetaObjectId;\n\n    xktModel.createMetaObject({\n        metaObjectId,\n        metaObjectName,\n        metaObjectType,\n        parentMetaObjectId\n    });\n\n    ctx.stats.numMetaObjects++;\n\n    if (!(cityObject.geometry && cityObject.geometry.length > 0)) {\n        return;\n    }\n\n    const meshIds = [];\n\n    for (let i = 0, len = cityObject.geometry.length; i < len; i++) {\n\n        const geometry = cityObject.geometry[i];\n\n        let objectMaterial;\n        let surfaceMaterials;\n\n        const appearance = data.appearance;\n        if (appearance) {\n            const materials = appearance.materials;\n            if (materials) {\n                const geometryMaterial = geometry.material;\n                if (geometryMaterial) {\n                    const themeIds = Object.keys(geometryMaterial);\n                    if (themeIds.length > 0) {\n                        const themeId = themeIds[0];\n                        const theme = geometryMaterial[themeId];\n                        if (theme.value !== undefined) {\n                            objectMaterial = materials[theme.value];\n                        } else {\n                            const values = theme.values;\n                            if (values) {\n                                surfaceMaterials = [];\n                                for (let j = 0, lenj = values.length; j < lenj; j++) {\n                                    const value = values[i];\n                                    const surfaceMaterial = materials[value];\n                                    surfaceMaterials.push(surfaceMaterial);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (surfaceMaterials) {\n            parseGeometrySurfacesWithOwnMaterials(ctx, geometry, surfaceMaterials, meshIds);\n\n        } else {\n            parseGeometrySurfacesWithSharedMaterial(ctx, geometry, objectMaterial, meshIds);\n        }\n    }\n\n    if (meshIds.length > 0) {\n        xktModel.createEntity({\n            entityId: objectId,\n            meshIds: meshIds\n        });\n\n        ctx.stats.numObjects++;\n    }\n}\n\nfunction parseGeometrySurfacesWithOwnMaterials(ctx, geometry, surfaceMaterials, meshIds) {\n\n    const geomType = geometry.type;\n\n    switch (geomType) {\n\n        case \"MultiPoint\":\n            break;\n\n        case \"MultiLineString\":\n            break;\n\n        case \"MultiSurface\":\n\n        case \"CompositeSurface\":\n            const surfaces = geometry.boundaries;\n            parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n            break;\n\n        case \"Solid\":\n            const shells = geometry.boundaries;\n            for (let j = 0; j < shells.length; j++) {\n                const surfaces = shells[j];\n                parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n            }\n            break;\n\n        case \"MultiSolid\":\n\n        case \"CompositeSolid\":\n            const solids = geometry.boundaries;\n            for (let j = 0; j < solids.length; j++) {\n                for (let k = 0; k < solids[j].length; k++) {\n                    const surfaces = solids[j][k];\n                    parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n                }\n            }\n            break;\n\n        case \"GeometryInstance\":\n            break;\n    }\n}\n\nfunction parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds) {\n\n    const vertices = ctx.vertices;\n    const xktModel = ctx.xktModel;\n\n    for (let i = 0; i < surfaces.length; i++) {\n\n        const surface = surfaces[i];\n        const surfaceMaterial = surfaceMaterials[i] || {diffuseColor: [0.8, 0.8, 0.8], transparency: 1.0};\n\n        const face = [];\n        const holes = [];\n\n        const sharedIndices = [];\n\n        const geometryCfg = {\n            positions: [],\n            indices: []\n        };\n\n        for (let j = 0; j < surface.length; j++) {\n\n            if (face.length > 0) {\n                holes.push(face.length);\n            }\n\n            const newFace = extractLocalIndices(ctx, surface[j], sharedIndices, geometryCfg);\n\n            face.push(...newFace);\n        }\n\n        if (face.length === 3) { // Triangle\n\n            geometryCfg.indices.push(face[0]);\n            geometryCfg.indices.push(face[1]);\n            geometryCfg.indices.push(face[2]);\n\n        } else if (face.length > 3) { // Polygon\n\n            // Prepare to triangulate\n\n            const pList = [];\n\n            for (let k = 0; k < face.length; k++) {\n                pList.push({\n                    x: vertices[sharedIndices[face[k]]][0],\n                    y: vertices[sharedIndices[face[k]]][1],\n                    z: vertices[sharedIndices[face[k]]][2]\n                });\n            }\n\n            const normal = getNormalOfPositions(pList, math.vec3());\n\n            // Convert to 2D\n\n            let pv = [];\n\n            for (let k = 0; k < pList.length; k++) {\n\n                to2D(pList[k], normal, tempVec2a);\n\n                pv.unshift(tempVec2a[0]);\n                pv.unshift(tempVec2a[1]);\n            }\n\n            // Triangulate\n\n            const tr = earcut(pv, holes, 2);\n\n            // Create triangles\n\n            for (let k = 0; k < tr.length; k += 3) {\n                geometryCfg.indices.unshift(face[tr[k]]);\n                geometryCfg.indices.unshift(face[tr[k + 1]]);\n                geometryCfg.indices.unshift(face[tr[k + 2]]);\n            }\n        }\n\n        const geometryId = \"\" + ctx.nextId++;\n        const meshId = \"\" + ctx.nextId++;\n\n        xktModel.createGeometry({\n            geometryId: geometryId,\n            primitiveType: \"triangles\",\n            positions: geometryCfg.positions,\n            indices: geometryCfg.indices\n        });\n\n        xktModel.createMesh({\n            meshId: meshId,\n            geometryId: geometryId,\n            color: (surfaceMaterial && surfaceMaterial.diffuseColor) ? surfaceMaterial.diffuseColor : [0.8, 0.8, 0.8],\n            opacity: 1.0\n            //opacity: (surfaceMaterial && surfaceMaterial.transparency !== undefined) ? (1.0 - surfaceMaterial.transparency) : 1.0\n        });\n\n        meshIds.push(meshId);\n\n        ctx.stats.numGeometries++;\n        ctx.stats.numVertices += geometryCfg.positions.length / 3;\n        ctx.stats.numTriangles += geometryCfg.indices.length / 3;\n    }\n}\n\nfunction parseGeometrySurfacesWithSharedMaterial(ctx, geometry, objectMaterial, meshIds) {\n\n    const xktModel = ctx.xktModel;\n    const sharedIndices = [];\n    const geometryCfg = {\n        positions: [],\n        indices: []\n    };\n\n    const geomType = geometry.type;\n\n    switch (geomType) {\n        case \"MultiPoint\":\n            break;\n\n        case \"MultiLineString\":\n            break;\n\n        case \"MultiSurface\":\n        case \"CompositeSurface\":\n            const surfaces = geometry.boundaries;\n            parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n            break;\n\n        case \"Solid\":\n            const shells = geometry.boundaries;\n            for (let j = 0; j < shells.length; j++) {\n                const surfaces = shells[j];\n                parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n            }\n            break;\n\n        case \"MultiSolid\":\n        case \"CompositeSolid\":\n            const solids = geometry.boundaries;\n            for (let j = 0; j < solids.length; j++) {\n                for (let k = 0; k < solids[j].length; k++) {\n                    const surfaces = solids[j][k];\n                    parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n                }\n            }\n            break;\n\n        case \"GeometryInstance\":\n            break;\n    }\n\n    const geometryId = \"\" + ctx.nextId++;\n    const meshId = \"\" + ctx.nextId++;\n\n    xktModel.createGeometry({\n        geometryId: geometryId,\n        primitiveType: \"triangles\",\n        positions: geometryCfg.positions,\n        indices: geometryCfg.indices\n    });\n\n    xktModel.createMesh({\n        meshId: meshId,\n        geometryId: geometryId,\n        color: (objectMaterial && objectMaterial.diffuseColor) ? objectMaterial.diffuseColor : [0.8, 0.8, 0.8],\n        opacity: 1.0\n        //opacity: (objectMaterial && objectMaterial.transparency !== undefined) ? (1.0 - objectMaterial.transparency) : 1.0\n    });\n\n    meshIds.push(meshId);\n\n    ctx.stats.numGeometries++;\n    ctx.stats.numVertices += geometryCfg.positions.length / 3;\n    ctx.stats.numTriangles += geometryCfg.indices.length / 3;\n}\n\nfunction parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, primitiveCfg) {\n\n    const vertices = ctx.vertices;\n\n    for (let i = 0; i < surfaces.length; i++) {\n\n        let boundary = [];\n        let holes = [];\n\n        for (let j = 0; j < surfaces[i].length; j++) {\n            if (boundary.length > 0) {\n                holes.push(boundary.length);\n            }\n            const newBoundary = extractLocalIndices(ctx, surfaces[i][j], sharedIndices, primitiveCfg);\n            boundary.push(...newBoundary);\n        }\n\n        if (boundary.length === 3) { // Triangle\n\n            primitiveCfg.indices.push(boundary[0]);\n            primitiveCfg.indices.push(boundary[1]);\n            primitiveCfg.indices.push(boundary[2]);\n\n        } else if (boundary.length > 3) { // Polygon\n\n            let pList = [];\n\n            for (let k = 0; k < boundary.length; k++) {\n                pList.push({\n                    x: vertices[sharedIndices[boundary[k]]][0],\n                    y: vertices[sharedIndices[boundary[k]]][1],\n                    z: vertices[sharedIndices[boundary[k]]][2]\n                });\n            }\n\n            const normal = getNormalOfPositions(pList, math.vec3());\n            let pv = [];\n\n            for (let k = 0; k < pList.length; k++) {\n                to2D(pList[k], normal, tempVec2a);\n                pv.unshift(tempVec2a[0]);\n                pv.unshift(tempVec2a[1]);\n            }\n\n            const tr = earcut(pv, holes, 2);\n\n            for (let k = 0; k < tr.length; k += 3) {\n                primitiveCfg.indices.unshift(boundary[tr[k]]);\n                primitiveCfg.indices.unshift(boundary[tr[k + 1]]);\n                primitiveCfg.indices.unshift(boundary[tr[k + 2]]);\n            }\n        }\n    }\n}\n\nfunction extractLocalIndices(ctx, boundary, sharedIndices, geometryCfg) {\n\n    const vertices = ctx.vertices;\n    const newBoundary = []\n\n    for (let i = 0, len = boundary.length; i < len; i++) {\n\n        const index = boundary[i];\n\n        if (sharedIndices.includes(index)) {\n            const vertexIndex = sharedIndices.indexOf(index);\n            newBoundary.push(vertexIndex);\n\n        } else {\n            geometryCfg.positions.push(vertices[index][0]);\n            geometryCfg.positions.push(vertices[index][1]);\n            geometryCfg.positions.push(vertices[index][2]);\n\n            newBoundary.push(sharedIndices.length);\n\n            sharedIndices.push(index);\n        }\n    }\n\n    return newBoundary\n}\n\nfunction getNormalOfPositions(positions, normal) {\n\n    for (let i = 0; i < positions.length; i++) {\n\n        let nexti = i + 1;\n        if (nexti === positions.length) {\n            nexti = 0;\n        }\n\n        normal[0] += ((positions[i].y - positions[nexti].y) * (positions[i].z + positions[nexti].z));\n        normal[1] += ((positions[i].z - positions[nexti].z) * (positions[i].x + positions[nexti].x));\n        normal[2] += ((positions[i].x - positions[nexti].x) * (positions[i].y + positions[nexti].y));\n    }\n\n    return math.normalizeVec3(normal);\n}\n\nfunction to2D(_p, _n, re) {\n\n    const p = tempVec3a;\n    const n = tempVec3b;\n    const x3 = tempVec3c;\n\n    p[0] = _p.x;\n    p[1] = _p.y;\n    p[2] = _p.z;\n\n    n[0] = _n.x;\n    n[1] = _n.y;\n    n[2] = _n.z;\n\n    x3[0] = 1.1;\n    x3[1] = 1.1;\n    x3[2] = 1.1;\n\n    const dist = math.lenVec3(math.subVec3(x3, n));\n\n    if (dist < 0.01) {\n        x3[0] += 1.0;\n        x3[1] += 2.0;\n        x3[2] += 3.0;\n    }\n\n    const dot = math.dotVec3(x3, n);\n    const tmp2 = math.mulVec3Scalar(n, dot, math.vec3());\n\n    x3[0] -= tmp2[0];\n    x3[1] -= tmp2[1];\n    x3[2] -= tmp2[2];\n\n    math.normalizeVec3(x3);\n\n    const y3 = math.cross3Vec3(n, x3, math.vec3());\n    const x = math.dotVec3(p, x3);\n    const y = math.dotVec3(p, y3);\n\n    re[0] = x;\n    re[1] = y;\n}\n\nexport {parseCityJSONIntoXKTModel};","function isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\n\nfunction apply(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            o2[name] = o[name];\n        }\n    }\n    return o2;\n}\n\n/**\n * @private\n */\nconst utils = {\n    isString,\n    apply\n};\n\nexport {utils};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/gltf\");","import {utils} from \"../XKTModel/lib/utils.js\";\nimport {math} from \"../lib/math.js\";\n\nimport {parse} from '@loaders.gl/core';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {\n    ClampToEdgeWrapping,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    MirroredRepeatWrapping,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    RepeatWrapping\n} from \"../constants.js\";\n\n/**\n * @desc Parses glTF into an {@link XKTModel}, supporting ````.glb```` and textures.\n *\n * * Supports ````.glb```` and textures\n * * For a lightweight glTF JSON parser that ignores textures, see {@link parseGLTFJSONIntoXKTModel}.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a binary glTF model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"../assets/models/gltf/HousePlan/glTF-Binary/HousePlan.glb\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseGLTFIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing parameters.\n * @param {ArrayBuffer} params.data The glTF.\n * @param {String} [params.baseUri] The base URI used to load this glTF, if any. For resolving relative uris to linked resources.\n * @param {Object} [params.metaModelData] Metamodel JSON. If this is provided, then parsing is able to ensure that the XKTObjects it creates will fit the metadata properly.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Boolean} [params.includeTextures=true] Whether to parse textures.\n * @param {Boolean} [params.includeNormals=true] Whether to parse normals. When false, the parser will ignore the glTF\n * geometry normals, and the glTF data will rely on the xeokit ````Viewer```` to automatically generate them. This has\n * the limitation that the normals will be face-aligned, and therefore the ````Viewer```` will only be able to render\n * a flat-shaded non-PBR representation of the glTF.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when glTF has been parsed.\n */\nfunction parseGLTFIntoXKTModel({\n                                   data,\n                                   baseUri,\n                                   xktModel,\n                                   metaModelData,\n                                   includeTextures = true,\n                                   includeNormals = true,\n                                   getAttachment,\n                                   stats = {},\n                                   log\n                               }) {\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        stats.sourceFormat = \"glTF\";\n        stats.schemaVersion = \"2.0\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numTriangles = 0;\n        stats.numVertices = 0;\n        stats.numNormals = 0;\n        stats.numUVs = 0;\n        stats.numTextures = 0;\n        stats.numObjects = 0;\n        stats.numGeometries = 0;\n\n        parse(data, GLTFLoader, {\n            baseUri\n        }).then((gltfData) => {\n\n            const ctx = {\n                gltfData,\n                metaModelCorrections: metaModelData ? getMetaModelCorrections(metaModelData) : null,\n                getAttachment: getAttachment || (() => {\n                    throw new Error('You must define getAttachment() method to convert glTF with external resources')\n                }),\n                log: (log || function (msg) {\n                }),\n                error: function (msg) {\n                    console.error(msg);\n                },\n                xktModel,\n                includeNormals: (includeNormals !== false),\n                includeTextures: (includeTextures !== false),\n                geometryCreated: {},\n                nextId: 0,\n                stats\n            };\n\n            ctx.log(\"Using parser: parseGLTFIntoXKTModel\");\n            ctx.log(`Parsing normals: ${ctx.includeNormals ? \"enabled\" : \"disabled\"}`);\n            ctx.log(`Parsing textures: ${ctx.includeTextures ? \"enabled\" : \"disabled\"}`);\n\n            if (ctx.includeTextures) {\n                parseTextures(ctx);\n            }\n            parseMaterials(ctx);\n            parseDefaultScene(ctx);\n\n            resolve();\n\n        }, (errMsg) => {\n            reject(`[parseGLTFIntoXKTModel] ${errMsg}`);\n        });\n    });\n}\n\nfunction getMetaModelCorrections(metaModelData) {\n    const eachRootStats = {};\n    const eachChildRoot = {};\n    const metaObjects = metaModelData.metaObjects || [];\n    const metaObjectsMap = {};\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        metaObjectsMap[metaObject.id] = metaObject;\n    }\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        if (metaObject.parent !== undefined && metaObject.parent !== null) {\n            const metaObjectParent = metaObjectsMap[metaObject.parent];\n            if (metaObject.type === metaObjectParent.type) {\n                let rootMetaObject = metaObjectParent;\n                while (rootMetaObject.parent && metaObjectsMap[rootMetaObject.parent].type === rootMetaObject.type) {\n                    rootMetaObject = metaObjectsMap[rootMetaObject.parent];\n                }\n                const rootStats = eachRootStats[rootMetaObject.id] || (eachRootStats[rootMetaObject.id] = {\n                    numChildren: 0,\n                    countChildren: 0\n                });\n                rootStats.numChildren++;\n                eachChildRoot[metaObject.id] = rootMetaObject;\n            } else {\n\n            }\n        }\n    }\n    return {\n        metaObjectsMap,\n        eachRootStats,\n        eachChildRoot\n    };\n}\n\nfunction parseTextures(ctx) {\n    const gltfData = ctx.gltfData;\n    const textures = gltfData.textures;\n    if (textures) {\n        for (let i = 0, len = textures.length; i < len; i++) {\n            parseTexture(ctx, textures[i]);\n            ctx.stats.numTextures++;\n        }\n    }\n}\n\nfunction parseTexture(ctx, texture) {\n    if (!texture.source || !texture.source.image) {\n        return;\n    }\n    const textureId = `texture-${ctx.nextId++}`;\n\n    let minFilter = NearestMipMapLinearFilter;\n    switch (texture.sampler.minFilter) {\n        case 9728:\n            minFilter = NearestFilter;\n            break;\n        case 9729:\n            minFilter = LinearFilter;\n            break;\n        case 9984:\n            minFilter = NearestMipMapNearestFilter;\n            break;\n        case 9985:\n            minFilter = LinearMipMapNearestFilter;\n            break;\n        case 9986:\n            minFilter = NearestMipMapLinearFilter;\n            break;\n        case 9987:\n            minFilter = LinearMipMapLinearFilter;\n            break;\n    }\n\n    let magFilter = LinearFilter;\n    switch (texture.sampler.magFilter) {\n        case 9728:\n            magFilter = NearestFilter;\n            break;\n        case 9729:\n            magFilter = LinearFilter;\n            break;\n    }\n\n    let wrapS = RepeatWrapping;\n    switch (texture.sampler.wrapS) {\n        case 33071:\n            wrapS = ClampToEdgeWrapping;\n            break;\n        case 33648:\n            wrapS = MirroredRepeatWrapping;\n            break;\n        case 10497:\n            wrapS = RepeatWrapping;\n            break;\n    }\n\n    let wrapT = RepeatWrapping;\n    switch (texture.sampler.wrapT) {\n        case 33071:\n            wrapT = ClampToEdgeWrapping;\n            break;\n        case 33648:\n            wrapT = MirroredRepeatWrapping;\n            break;\n        case 10497:\n            wrapT = RepeatWrapping;\n            break;\n    }\n\n    let wrapR = RepeatWrapping;\n    switch (texture.sampler.wrapR) {\n        case 33071:\n            wrapR = ClampToEdgeWrapping;\n            break;\n        case 33648:\n            wrapR = MirroredRepeatWrapping;\n            break;\n        case 10497:\n            wrapR = RepeatWrapping;\n            break;\n    }\n\n    ctx.xktModel.createTexture({\n        textureId: textureId,\n        imageData: texture.source.image,\n        mediaType: texture.source.mediaType,\n        compressed: true,\n        width: texture.source.image.width,\n        height: texture.source.image.height,\n        minFilter,\n        magFilter,\n        wrapS,\n        wrapT,\n        wrapR,\n        flipY: !!texture.flipY,\n        //     encoding: \"sRGB\"\n    });\n    texture._textureId = textureId;\n}\n\nfunction parseMaterials(ctx) {\n    const gltfData = ctx.gltfData;\n    const materials = gltfData.materials;\n    if (materials) {\n        for (let i = 0, len = materials.length; i < len; i++) {\n            const material = materials[i];\n            material._textureSetId = ctx.includeTextures ? parseTextureSet(ctx, material) : null;\n            material._attributes = parseMaterialAttributes(ctx, material);\n        }\n    }\n}\n\nfunction parseTextureSet(ctx, material) {\n    const textureSetCfg = {};\n    if (material.normalTexture) {\n        textureSetCfg.normalTextureId = material.normalTexture.texture._textureId;\n    }\n    if (material.occlusionTexture) {\n        textureSetCfg.occlusionTextureId = material.occlusionTexture.texture._textureId;\n    }\n    if (material.emissiveTexture) {\n        textureSetCfg.emissiveTextureId = material.emissiveTexture.texture._textureId;\n    }\n    // const alphaMode = material.alphaMode;\n    // switch (alphaMode) {\n    //     case \"NORMAL_OPAQUE\":\n    //         materialCfg.alphaMode = \"opaque\";\n    //         break;\n    //     case \"MASK\":\n    //         materialCfg.alphaMode = \"mask\";\n    //         break;\n    //     case \"BLEND\":\n    //         materialCfg.alphaMode = \"blend\";\n    //         break;\n    //     default:\n    // }\n    // const alphaCutoff = material.alphaCutoff;\n    // if (alphaCutoff !== undefined) {\n    //     materialCfg.alphaCutoff = alphaCutoff;\n    // }\n    const metallicPBR = material.pbrMetallicRoughness;\n    if (material.pbrMetallicRoughness) {\n        const pbrMetallicRoughness = material.pbrMetallicRoughness;\n        const baseColorTexture = pbrMetallicRoughness.baseColorTexture || pbrMetallicRoughness.colorTexture;\n        if (baseColorTexture) {\n            if (baseColorTexture.texture) {\n                textureSetCfg.colorTextureId = baseColorTexture.texture._textureId;\n            } else {\n                textureSetCfg.colorTextureId = ctx.gltfData.textures[baseColorTexture.index]._textureId;\n            }\n        }\n        if (metallicPBR.metallicRoughnessTexture) {\n            textureSetCfg.metallicRoughnessTextureId = metallicPBR.metallicRoughnessTexture.texture._textureId;\n        }\n    }\n    const extensions = material.extensions;\n    if (extensions) {\n        const specularPBR = extensions[\"KHR_materials_pbrSpecularGlossiness\"];\n        if (specularPBR) {\n            const specularTexture = specularPBR.specularTexture;\n            if (specularTexture !== null && specularTexture !== undefined) {\n                //  textureSetCfg.colorTextureId = ctx.gltfData.textures[specularColorTexture.index]._textureId;\n            }\n            const specularColorTexture = specularPBR.specularColorTexture;\n            if (specularColorTexture !== null && specularColorTexture !== undefined) {\n                textureSetCfg.colorTextureId = ctx.gltfData.textures[specularColorTexture.index]._textureId;\n            }\n        }\n    }\n    if (textureSetCfg.normalTextureId !== undefined ||\n        textureSetCfg.occlusionTextureId !== undefined ||\n        textureSetCfg.emissiveTextureId !== undefined ||\n        textureSetCfg.colorTextureId !== undefined ||\n        textureSetCfg.metallicRoughnessTextureId !== undefined) {\n        textureSetCfg.textureSetId = `textureSet-${ctx.nextId++};`\n        ctx.xktModel.createTextureSet(textureSetCfg);\n        ctx.stats.numTextureSets++;\n        return textureSetCfg.textureSetId;\n    }\n    return null;\n}\n\nfunction parseMaterialAttributes(ctx, material) { // Substitute RGBA for material, to use fast flat shading instead\n    const extensions = material.extensions;\n    const materialAttributes = {\n        color: new Float32Array([1, 1, 1, 1]),\n        opacity: 1,\n        metallic: 0,\n        roughness: 1\n    };\n    if (extensions) {\n        const specularPBR = extensions[\"KHR_materials_pbrSpecularGlossiness\"];\n        if (specularPBR) {\n            const diffuseFactor = specularPBR.diffuseFactor;\n            if (diffuseFactor !== null && diffuseFactor !== undefined) {\n                materialAttributes.color.set(diffuseFactor);\n            }\n        }\n        const common = extensions[\"KHR_materials_common\"];\n        if (common) {\n            const technique = common.technique;\n            const values = common.values || {};\n            const blinn = technique === \"BLINN\";\n            const phong = technique === \"PHONG\";\n            const lambert = technique === \"LAMBERT\";\n            const diffuse = values.diffuse;\n            if (diffuse && (blinn || phong || lambert)) {\n                if (!utils.isString(diffuse)) {\n                    materialAttributes.color.set(diffuse);\n                }\n            }\n            const transparency = values.transparency;\n            if (transparency !== null && transparency !== undefined) {\n                materialAttributes.opacity = transparency;\n            }\n            const transparent = values.transparent;\n            if (transparent !== null && transparent !== undefined) {\n                materialAttributes.opacity = transparent;\n            }\n        }\n    }\n    const metallicPBR = material.pbrMetallicRoughness;\n    if (metallicPBR) {\n        const baseColorFactor = metallicPBR.baseColorFactor;\n        if (baseColorFactor) {\n            materialAttributes.color[0] = baseColorFactor[0];\n            materialAttributes.color[1] = baseColorFactor[1];\n            materialAttributes.color[2] = baseColorFactor[2];\n            materialAttributes.opacity = baseColorFactor[3];\n        }\n        const metallicFactor = metallicPBR.metallicFactor;\n        if (metallicFactor !== null && metallicFactor !== undefined) {\n            materialAttributes.metallic = metallicFactor;\n        }\n        const roughnessFactor = metallicPBR.roughnessFactor;\n        if (roughnessFactor !== null && roughnessFactor !== undefined) {\n            materialAttributes.roughness = roughnessFactor;\n        }\n    }\n    return materialAttributes;\n}\n\nfunction parseDefaultScene(ctx) {\n    const gltfData = ctx.gltfData;\n    const scene = gltfData.scene || gltfData.scenes[0];\n    if (!scene) {\n        ctx.error(\"glTF has no default scene\");\n        return;\n    }\n    parseScene(ctx, scene);\n}\n\nfunction parseScene(ctx, scene) {\n    const nodes = scene.nodes;\n    if (!nodes) {\n        return;\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const node = nodes[i];\n        countMeshUsage(ctx, node);\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const node = nodes[i];\n        parseNode(ctx, node, 0, null);\n    }\n}\n\nfunction countMeshUsage(ctx, node) {\n    const mesh = node.mesh;\n    if (mesh) {\n        mesh.instances = mesh.instances ? mesh.instances + 1 : 1;\n    }\n    if (node.children) {\n        const children = node.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n            const childNode = children[i];\n            if (!childNode) {\n                ctx.error(\"Node not found: \" + i);\n                continue;\n            }\n            countMeshUsage(ctx, childNode);\n        }\n    }\n}\n\nconst deferredMeshIds = [];\n\nfunction parseNode(ctx, node, depth, matrix) {\n\n    const xktModel = ctx.xktModel;\n\n    // Pre-order visit scene node\n\n    let localMatrix;\n    if (node.matrix) {\n        localMatrix = node.matrix;\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n    if (node.translation) {\n        localMatrix = math.translationMat4v(node.translation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n    if (node.rotation) {\n        localMatrix = math.quaternionToMat4(node.rotation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n    if (node.scale) {\n        localMatrix = math.scalingMat4v(node.scale);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (node.mesh) {\n\n        const mesh = node.mesh;\n        const numPrimitives = mesh.primitives.length;\n\n        if (numPrimitives > 0) {\n            for (let i = 0; i < numPrimitives; i++) {\n                const primitive = mesh.primitives[i];\n                if (!primitive._xktGeometryId) {\n                    const xktGeometryId = \"geometry-\" + ctx.nextId++;\n                    const geometryCfg = {\n                        geometryId: xktGeometryId\n                    };\n                    switch (primitive.mode) {\n                        case 0: // POINTS\n                            geometryCfg.primitiveType = \"points\";\n                            break;\n                        case 1: // LINES\n                            geometryCfg.primitiveType = \"lines\";\n                            break;\n                        case 2: // LINE_LOOP\n                            geometryCfg.primitiveType = \"line-loop\";\n                            break;\n                        case 3: // LINE_STRIP\n                            geometryCfg.primitiveType = \"line-strip\";\n                            break;\n                        case 4: // TRIANGLES\n                            geometryCfg.primitiveType = \"triangles\";\n                            break;\n                        case 5: // TRIANGLE_STRIP\n                            geometryCfg.primitiveType = \"triangle-strip\";\n                            break;\n                        case 6: // TRIANGLE_FAN\n                            geometryCfg.primitiveType = \"triangle-fan\";\n                            break;\n                        default:\n                            geometryCfg.primitiveType = \"triangles\";\n                    }\n                    const POSITION = primitive.attributes.POSITION;\n                    if (!POSITION) {\n                        continue;\n                    }\n                    geometryCfg.positions = primitive.attributes.POSITION.value;\n                    ctx.stats.numVertices += geometryCfg.positions.length / 3;\n                    if (ctx.includeNormals) {\n                        if (primitive.attributes.NORMAL) {\n                            geometryCfg.normals = primitive.attributes.NORMAL.value;\n                            ctx.stats.numNormals += geometryCfg.normals.length / 3;\n                        }\n                    }\n                    if (primitive.attributes.COLOR_0) {\n                        geometryCfg.colorsCompressed = primitive.attributes.COLOR_0.value;\n                    }\n                    if (ctx.includeTextures) {\n                        if (primitive.attributes.TEXCOORD_0) {\n                            geometryCfg.uvs = primitive.attributes.TEXCOORD_0.value;\n                            ctx.stats.numUVs += geometryCfg.uvs.length / 2;\n                        }\n                    }\n                    if (primitive.indices) {\n                        geometryCfg.indices = primitive.indices.value;\n                        if (primitive.mode === 4) {\n                            ctx.stats.numTriangles += geometryCfg.indices.length / 3;\n                        }\n                    }\n                    xktModel.createGeometry(geometryCfg);\n                    primitive._xktGeometryId = xktGeometryId;\n                    ctx.stats.numGeometries++;\n                }\n\n                const xktMeshId = ctx.nextId++;\n                const meshCfg = {\n                    meshId: xktMeshId,\n                    geometryId: primitive._xktGeometryId,\n                    matrix: matrix ? matrix.slice() : math.identityMat4()\n                };\n                const material = primitive.material;\n                if (material) {\n                    meshCfg.textureSetId = material._textureSetId;\n                    meshCfg.color = material._attributes.color;\n                    meshCfg.opacity = material._attributes.opacity;\n                    meshCfg.metallic = material._attributes.metallic;\n                    meshCfg.roughness = material._attributes.roughness;\n                } else {\n                    meshCfg.color = [1.0, 1.0, 1.0];\n                    meshCfg.opacity = 1.0;\n                }\n                xktModel.createMesh(meshCfg);\n                deferredMeshIds.push(xktMeshId);\n            }\n        }\n    }\n\n    // Visit child scene nodes\n\n    if (node.children) {\n        const children = node.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n            const childNode = children[i];\n            parseNode(ctx, childNode, depth + 1, matrix);\n        }\n    }\n\n    // Post-order visit scene node\n\n    const nodeName = node.name;\n    if (((nodeName !== undefined && nodeName !== null) || depth === 0) && deferredMeshIds.length > 0) {\n        if (nodeName === undefined || nodeName === null) {\n            ctx.log(`Warning: 'name' properties not found on glTF scene nodes - will randomly-generate object IDs in XKT`);\n        }\n        let xktEntityId = nodeName; // Fall back on generated ID when `name` not found on glTF scene node(s)\n        if (!!xktEntityId && xktModel.entities[xktEntityId]) {\n            ctx.log(`Warning: Two or more glTF nodes found with same 'name' attribute: '${nodeName} - will randomly-generating an object ID in XKT`);\n        }\n        while (!xktEntityId || xktModel.entities[xktEntityId]) {\n            xktEntityId = \"entity-\" + ctx.nextId++;\n        }\n        if (ctx.metaModelCorrections) {\n            // Merging meshes into XKTObjects that map to metaobjects\n            const rootMetaObject = ctx.metaModelCorrections.eachChildRoot[xktEntityId];\n            if (rootMetaObject) {\n                const rootMetaObjectStats = ctx.metaModelCorrections.eachRootStats[rootMetaObject.id];\n                rootMetaObjectStats.countChildren++;\n                if (rootMetaObjectStats.countChildren >= rootMetaObjectStats.numChildren) {\n                    xktModel.createEntity({\n                        entityId: rootMetaObject.id,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds.length = 0;\n                }\n            } else {\n                const metaObject = ctx.metaModelCorrections.metaObjectsMap[xktEntityId];\n                if (metaObject) {\n                    xktModel.createEntity({\n                        entityId: xktEntityId,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds.length = 0;\n                }\n            }\n        } else {\n            // Create an XKTObject from the meshes at each named glTF node, don't care about metaobjects\n            xktModel.createEntity({\n                entityId: xktEntityId,\n                meshIds: deferredMeshIds\n            });\n            ctx.stats.numObjects++;\n            deferredMeshIds.length = 0;\n        }\n    }\n}\n\nexport {parseGLTFIntoXKTModel};\n","import {utils} from \"../XKTModel/lib/utils.js\";\nimport {math} from \"../lib/math.js\";\n\nconst atob2 = (typeof atob !== 'undefined') ? atob : a => Buffer.from(a, 'base64').toString('binary');\n\nconst WEBGL_COMPONENT_TYPES = {\n    5120: Int8Array,\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array\n};\n\nconst WEBGL_TYPE_SIZES = {\n    'SCALAR': 1,\n    'VEC2': 2,\n    'VEC3': 3,\n    'VEC4': 4,\n    'MAT2': 4,\n    'MAT3': 9,\n    'MAT4': 16\n};\n\n/**\n * @desc Parses glTF JSON into an {@link XKTModel}, without ````.glb```` and textures.\n *\n * * Lightweight JSON-based glTF parser which ignores textures\n * * For texture and ````.glb```` support, see {@link parseGLTFIntoXKTModel}\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a glTF model into it.\n *\n * ````javascript\n * utils.loadJSON(\"./models/gltf/duplex/scene.gltf\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseGLTFJSONIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing parameters.\n * @param {Object} params.data The glTF JSON.\n * @param {Object} [params.metaModelData] Metamodel JSON. If this is provided, then parsing is able to ensure that the XKTObjects it creates will fit the metadata properly.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Boolean} [params.includeNormals=false] Whether to parse normals. When false, the parser will ignore the glTF\n * geometry normals, and the glTF data will rely on the xeokit ````Viewer```` to automatically generate them. This has\n * the limitation that the normals will be face-aligned, and therefore the ````Viewer```` will only be able to render\n * a flat-shaded representation of the glTF.\n * @param {Boolean} [params.reuseGeometries=true] When true, the parser will enable geometry reuse within the XKTModel. When false,\n * will automatically \"expand\" all reused geometries into duplicate copies. This has the drawback of increasing the XKT\n * file size (~10-30% for typical models), but can make the model more responsive in the xeokit Viewer, especially if the model\n * has excessive geometry reuse. An example of excessive geometry reuse would be if we have 4000 geometries that are\n * shared amongst 2000 objects, ie. a large number of geometries with a low amount of reuse, which can present a\n * pathological performance case for xeokit's underlying graphics APIs (WebGL, WebGPU etc).\n * @param {function} [params.getAttachment] Callback through which to fetch attachments, if the glTF has them.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n * @returns {Promise}\n */\nfunction parseGLTFJSONIntoXKTModel({\n                                       data,\n                                       xktModel,\n                                       metaModelData,\n                                       includeNormals,\n                                       reuseGeometries,\n                                       getAttachment,\n                                       stats = {},\n                                       log\n                                   }) {\n\n    if (log) {\n        log(\"Using parser: parseGLTFJSONIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        stats.sourceFormat = \"glTF\";\n        stats.schemaVersion = \"2.0\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numTriangles = 0;\n        stats.numVertices = 0;\n        stats.numNormals = 0;\n        stats.numObjects = 0;\n        stats.numGeometries = 0;\n\n        const ctx = {\n            gltf: data,\n            metaModelCorrections: metaModelData ? getMetaModelCorrections(metaModelData) : null,\n            getAttachment: getAttachment || (() => {\n                throw new Error('You must define getAttachment() method to convert glTF with external resources')\n            }),\n            log: (log || function (msg) {\n            }),\n            xktModel,\n            includeNormals,\n            createXKTGeometryIds: {},\n            nextMeshId: 0,\n            reuseGeometries: (reuseGeometries !== false),\n            stats\n        };\n\n        ctx.log(`Parsing normals: ${ctx.includeNormals ? \"enabled\" : \"disabled\"}`);\n\n        parseBuffers(ctx).then(() => {\n\n            parseBufferViews(ctx);\n            freeBuffers(ctx);\n            parseMaterials(ctx);\n            parseDefaultScene(ctx);\n\n            resolve();\n\n        }, (errMsg) => {\n            reject(errMsg);\n        });\n    });\n}\n\nfunction getMetaModelCorrections(metaModelData) {\n    const eachRootStats = {};\n    const eachChildRoot = {};\n    const metaObjects = metaModelData.metaObjects || [];\n    const metaObjectsMap = {};\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        metaObjectsMap[metaObject.id] = metaObject;\n    }\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        if (metaObject.parent !== undefined && metaObject.parent !== null) {\n            const metaObjectParent = metaObjectsMap[metaObject.parent];\n            if (metaObject.type === metaObjectParent.type) {\n                let rootMetaObject = metaObjectParent;\n                while (rootMetaObject.parent && metaObjectsMap[rootMetaObject.parent].type === rootMetaObject.type) {\n                    rootMetaObject = metaObjectsMap[rootMetaObject.parent];\n                }\n                const rootStats = eachRootStats[rootMetaObject.id] || (eachRootStats[rootMetaObject.id] = {\n                    numChildren: 0,\n                    countChildren: 0\n                });\n                rootStats.numChildren++;\n                eachChildRoot[metaObject.id] = rootMetaObject;\n            } else {\n\n            }\n        }\n    }\n    const metaModelCorrections = {\n        metaObjectsMap,\n        eachRootStats,\n        eachChildRoot\n    };\n    return metaModelCorrections;\n}\n\nfunction parseBuffers(ctx) {  // Parses geometry buffers into temporary  \"_buffer\" Unit8Array properties on the glTF \"buffer\" elements\n    const buffers = ctx.gltf.buffers;\n    if (buffers) {\n        return Promise.all(buffers.map(buffer => parseBuffer(ctx, buffer)));\n    } else {\n        return new Promise(function (resolve, reject) {\n            resolve();\n        });\n    }\n}\n\nfunction parseBuffer(ctx, bufferInfo) {\n    return new Promise(function (resolve, reject) {\n        // Allow a shortcut where the glTF buffer is \"enrichened\" with direct\n        // access to the data-arrayBuffer, w/out needing to either:\n        // - read the file indicated by the \".uri\" component of the buffer\n        // - base64-decode the encoded data in the \".uri\" component\n        if (bufferInfo._arrayBuffer) {\n            bufferInfo._buffer = bufferInfo._arrayBuffer;\n            resolve(bufferInfo);\n            return;\n        }\n        // Otherwise, proceed with \"standard-glTF\" .uri component.\n        const uri = bufferInfo.uri;\n        if (!uri) {\n            reject('gltf/handleBuffer missing uri in ' + JSON.stringify(bufferInfo));\n            return;\n        }\n        parseArrayBuffer(ctx, uri).then((arrayBuffer) => {\n            bufferInfo._buffer = arrayBuffer;\n            resolve(arrayBuffer);\n        }, (errMsg) => {\n            reject(errMsg);\n        })\n    });\n}\n\nfunction parseArrayBuffer(ctx, uri) {\n    return new Promise(function (resolve, reject) {\n        const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/; // Check for data: URI\n        const dataUriRegexResult = uri.match(dataUriRegex);\n        if (dataUriRegexResult) { // Safari can't handle data URIs through XMLHttpRequest\n            const isBase64 = !!dataUriRegexResult[2];\n            let data = dataUriRegexResult[3];\n            data = decodeURIComponent(data);\n            if (isBase64) {\n                data = atob2(data);\n            }\n            const buffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(buffer);\n            for (let i = 0; i < data.length; i++) {\n                view[i] = data.charCodeAt(i);\n            }\n            resolve(buffer);\n        } else { // Uri is a path to a file\n            ctx.getAttachment(uri).then(\n                (arrayBuffer) => {\n                    resolve(arrayBuffer);\n                },\n                (errMsg) => {\n                    reject(errMsg);\n                });\n        }\n    });\n}\n\nfunction parseBufferViews(ctx) { // Parses our temporary \"_buffer\" properties into \"_buffer\" properties on glTF \"bufferView\" elements\n    const bufferViewsInfo = ctx.gltf.bufferViews;\n    if (bufferViewsInfo) {\n        for (let i = 0, len = bufferViewsInfo.length; i < len; i++) {\n            parseBufferView(ctx, bufferViewsInfo[i]);\n        }\n    }\n}\n\nfunction parseBufferView(ctx, bufferViewInfo) {\n    const buffer = ctx.gltf.buffers[bufferViewInfo.buffer];\n    bufferViewInfo._typedArray = null;\n    const byteLength = bufferViewInfo.byteLength || 0;\n    const byteOffset = bufferViewInfo.byteOffset || 0;\n    bufferViewInfo._buffer = buffer._buffer.slice(byteOffset, byteOffset + byteLength);\n}\n\nfunction freeBuffers(ctx) { // Deletes the \"_buffer\" properties from the glTF \"buffer\" elements, to save memory\n    const buffers = ctx.gltf.buffers;\n    if (buffers) {\n        for (let i = 0, len = buffers.length; i < len; i++) {\n            buffers[i]._buffer = null;\n        }\n    }\n}\n\nfunction parseMaterials(ctx) {\n    const materialsInfo = ctx.gltf.materials;\n    if (materialsInfo) {\n        for (let i = 0, len = materialsInfo.length; i < len; i++) {\n            const materialInfo = materialsInfo[i];\n            const material = parseMaterial(ctx, materialInfo);\n            materialInfo._materialData = material;\n        }\n    }\n}\n\nfunction parseMaterial(ctx, materialInfo) { // Attempts to extract an RGBA color for a glTF material\n    const material = {\n        color: new Float32Array([1, 1, 1]),\n        opacity: 1.0,\n        metallic: 0,\n        roughness: 1\n    };\n    const extensions = materialInfo.extensions;\n    if (extensions) {\n        const specularPBR = extensions[\"KHR_materials_pbrSpecularGlossiness\"];\n        if (specularPBR) {\n            const diffuseFactor = specularPBR.diffuseFactor;\n            if (diffuseFactor !== null && diffuseFactor !== undefined) {\n                material.color[0] = diffuseFactor[0];\n                material.color[1] = diffuseFactor[1];\n                material.color[2] = diffuseFactor[2];\n            }\n        }\n        const common = extensions[\"KHR_materials_common\"];\n        if (common) {\n            const technique = common.technique;\n            const values = common.values || {};\n            const blinn = technique === \"BLINN\";\n            const phong = technique === \"PHONG\";\n            const lambert = technique === \"LAMBERT\";\n            const diffuse = values.diffuse;\n            if (diffuse && (blinn || phong || lambert)) {\n                if (!utils.isString(diffuse)) {\n                    material.color[0] = diffuse[0];\n                    material.color[1] = diffuse[1];\n                    material.color[2] = diffuse[2];\n                }\n            }\n            const transparency = values.transparency;\n            if (transparency !== null && transparency !== undefined) {\n                material.opacity = transparency;\n            }\n            const transparent = values.transparent;\n            if (transparent !== null && transparent !== undefined) {\n                material.opacity = transparent;\n            }\n        }\n    }\n    const metallicPBR = materialInfo.pbrMetallicRoughness;\n    if (metallicPBR) {\n        const baseColorFactor = metallicPBR.baseColorFactor;\n        if (baseColorFactor) {\n            material.color[0] = baseColorFactor[0];\n            material.color[1] = baseColorFactor[1];\n            material.color[2] = baseColorFactor[2];\n            material.opacity = baseColorFactor[3];\n        }\n        const metallicFactor = metallicPBR.metallicFactor;\n        if (metallicFactor !== null && metallicFactor !== undefined) {\n            material.metallic = metallicFactor;\n        }\n        const roughnessFactor = metallicPBR.roughnessFactor;\n        if (roughnessFactor !== null && roughnessFactor !== undefined) {\n            material.roughness = roughnessFactor;\n        }\n    }\n    return material;\n}\n\nfunction parseDefaultScene(ctx) {\n    const scene = ctx.gltf.scene || 0;\n    const defaultSceneInfo = ctx.gltf.scenes[scene];\n    if (!defaultSceneInfo) {\n        throw new Error(\"glTF has no default scene\");\n    }\n    parseScene(ctx, defaultSceneInfo);\n}\n\n\nfunction parseScene(ctx, sceneInfo) {\n    const nodes = sceneInfo.nodes;\n    if (!nodes) {\n        return;\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const glTFNode = ctx.gltf.nodes[nodes[i]];\n        if (glTFNode) {\n            parseNode(ctx, glTFNode, 0, null);\n        }\n    }\n}\n\nlet deferredMeshIds = [];\n\nfunction parseNode(ctx, glTFNode, depth, matrix) {\n\n    const gltf = ctx.gltf;\n    const xktModel = ctx.xktModel;\n\n    let localMatrix;\n\n    if (glTFNode.matrix) {\n        localMatrix = glTFNode.matrix;\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (glTFNode.translation) {\n        localMatrix = math.translationMat4v(glTFNode.translation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, localMatrix);\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (glTFNode.rotation) {\n        localMatrix = math.quaternionToMat4(glTFNode.rotation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, localMatrix);\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (glTFNode.scale) {\n        localMatrix = math.scalingMat4v(glTFNode.scale);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, localMatrix);\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    const gltfMeshId = glTFNode.mesh;\n\n    if (gltfMeshId !== undefined) {\n\n        const meshInfo = gltf.meshes[gltfMeshId];\n\n        if (meshInfo) {\n\n            const numPrimitivesInMesh = meshInfo.primitives.length;\n\n            if (numPrimitivesInMesh > 0) {\n\n                for (let i = 0; i < numPrimitivesInMesh; i++) {\n\n                    const primitiveInfo = meshInfo.primitives[i];\n\n                    const geometryHash = createPrimitiveGeometryHash(primitiveInfo);\n\n                    let xktGeometryId = ctx.createXKTGeometryIds[geometryHash];\n\n                    if ((!ctx.reuseGeometries) || !xktGeometryId) {\n\n                        xktGeometryId = \"geometry-\" + ctx.nextMeshId++\n\n                        const geometryArrays = {};\n\n                        parsePrimitiveGeometry(ctx, primitiveInfo, geometryArrays);\n\n                        const colors = geometryArrays.colors;\n\n                        let colorsCompressed;\n\n                        if (geometryArrays.colors) {\n                            colorsCompressed = [];\n                            for (let j = 0, lenj = colors.length; j < lenj; j += 4) {\n                                colorsCompressed.push(colors[j + 0]);\n                                colorsCompressed.push(colors[j + 1]);\n                                colorsCompressed.push(colors[j + 2]);\n                                colorsCompressed.push(255);\n                            }\n                        }\n\n                        xktModel.createGeometry({\n                            geometryId: xktGeometryId,\n                            primitiveType: geometryArrays.primitive,\n                            positions: geometryArrays.positions,\n                            normals: ctx.includeNormals ? geometryArrays.normals : null,\n                            colorsCompressed: colorsCompressed,\n                            indices: geometryArrays.indices\n                        });\n\n                        ctx.stats.numGeometries++;\n                        ctx.stats.numVertices += geometryArrays.positions ? geometryArrays.positions.length / 3 : 0;\n                        ctx.stats.numNormals += (ctx.includeNormals && geometryArrays.normals) ? geometryArrays.normals.length / 3 : 0;\n                        ctx.stats.numTriangles += geometryArrays.indices ? geometryArrays.indices.length / 3 : 0;\n\n                        ctx.createXKTGeometryIds[geometryHash] = xktGeometryId;\n                    } else {\n// Geometry reused\n                    }\n\n                    const materialIndex = primitiveInfo.material;\n                    const materialInfo = (materialIndex !== null && materialIndex !== undefined) ? gltf.materials[materialIndex] : null;\n                    const color = materialInfo ? materialInfo._materialData.color : new Float32Array([1.0, 1.0, 1.0, 1.0]);\n                    const opacity = materialInfo ? materialInfo._materialData.opacity : 1.0;\n                    const metallic = materialInfo ? materialInfo._materialData.metallic : 0.0;\n                    const roughness = materialInfo ? materialInfo._materialData.roughness : 1.0;\n\n                    const xktMeshId = \"mesh-\" + ctx.nextMeshId++;\n\n                    xktModel.createMesh({\n                        meshId: xktMeshId,\n                        geometryId: xktGeometryId,\n                        matrix: matrix ? matrix.slice() : math.identityMat4(),\n                        color: color,\n                        opacity: opacity,\n                        metallic: metallic,\n                        roughness: roughness\n                    });\n\n                    deferredMeshIds.push(xktMeshId);\n                }\n            }\n        }\n    }\n\n\n    if (glTFNode.children) {\n        const children = glTFNode.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n            const childNodeIdx = children[i];\n            const childGLTFNode = gltf.nodes[childNodeIdx];\n            if (!childGLTFNode) {\n                console.warn('Node not found: ' + i);\n                continue;\n            }\n            parseNode(ctx, childGLTFNode, depth + 1, matrix);\n        }\n    }\n\n    // Post-order visit scene node\n\n    const nodeName = glTFNode.name;\n    if (((nodeName !== undefined && nodeName !== null) || depth === 0) && deferredMeshIds.length > 0) {\n        if (nodeName === undefined || nodeName === null) {\n            ctx.log(`[parseGLTFJSONIntoXKTModel] Warning: 'name' properties not found on glTF scene nodes - will randomly-generate object IDs in XKT`);\n        }\n        let xktEntityId = nodeName; // Fall back on generated ID when `name` not found on glTF scene node(s)\n        if (xktEntityId === undefined || xktEntityId === null) {\n            if (xktModel.entities[xktEntityId]) {\n                ctx.error(\"Two or more glTF nodes found with same 'name' attribute: '\" + nodeName + \"'\");\n            }\n            while (!xktEntityId || xktModel.entities[xktEntityId]) {\n                xktEntityId = \"entity-\" + ctx.nextId++;\n            }\n        }\n        if (ctx.metaModelCorrections) {  // Merging meshes into XKTObjects that map to metaobjects\n            const rootMetaObject = ctx.metaModelCorrections.eachChildRoot[xktEntityId];\n            if (rootMetaObject) {\n                const rootMetaObjectStats = ctx.metaModelCorrections.eachRootStats[rootMetaObject.id];\n                rootMetaObjectStats.countChildren++;\n                if (rootMetaObjectStats.countChildren >= rootMetaObjectStats.numChildren) {\n                    xktModel.createEntity({\n                        entityId: rootMetaObject.id,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds = [];\n                }\n            } else {\n                const metaObject = ctx.metaModelCorrections.metaObjectsMap[xktEntityId];\n                if (metaObject) {\n                    xktModel.createEntity({\n                        entityId: xktEntityId,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds = [];\n                }\n            }\n        } else { // Create an XKTObject from the meshes at each named glTF node, don't care about metaobjects\n            xktModel.createEntity({\n                entityId: xktEntityId,\n                meshIds: deferredMeshIds\n            });\n            ctx.stats.numObjects++;\n            deferredMeshIds = [];\n        }\n    }\n}\n\nfunction createPrimitiveGeometryHash(primitiveInfo) {\n    const attributes = primitiveInfo.attributes;\n    if (!attributes) {\n        return \"empty\";\n    }\n    const mode = primitiveInfo.mode;\n    const material = primitiveInfo.material;\n    const indices = primitiveInfo.indices;\n    const positions = primitiveInfo.attributes.POSITION;\n    const normals = primitiveInfo.attributes.NORMAL;\n    const colors = primitiveInfo.attributes.COLOR_0;\n    const uv = primitiveInfo.attributes.TEXCOORD_0;\n    return [\n        mode,\n        //  material,\n        (indices !== null && indices !== undefined) ? indices : \"-\",\n        (positions !== null && positions !== undefined) ? positions : \"-\",\n        (normals !== null && normals !== undefined) ? normals : \"-\",\n        (colors !== null && colors !== undefined) ? colors : \"-\",\n        (uv !== null && uv !== undefined) ? uv : \"-\"\n    ].join(\";\");\n}\n\nfunction parsePrimitiveGeometry(ctx, primitiveInfo, geometryArrays) {\n    const attributes = primitiveInfo.attributes;\n    if (!attributes) {\n        return;\n    }\n    switch (primitiveInfo.mode) {\n        case 0: // POINTS\n            geometryArrays.primitive = \"points\";\n            break;\n        case 1: // LINES\n            geometryArrays.primitive = \"lines\";\n            break;\n        case 2: // LINE_LOOP\n            // TODO: convert\n            geometryArrays.primitive = \"lines\";\n            break;\n        case 3: // LINE_STRIP\n            // TODO: convert\n            geometryArrays.primitive = \"lines\";\n            break;\n        case 4: // TRIANGLES\n            geometryArrays.primitive = \"triangles\";\n            break;\n        case 5: // TRIANGLE_STRIP\n            // TODO: convert\n            console.log(\"TRIANGLE_STRIP\");\n            geometryArrays.primitive = \"triangles\";\n            break;\n        case 6: // TRIANGLE_FAN\n            // TODO: convert\n            console.log(\"TRIANGLE_FAN\");\n            geometryArrays.primitive = \"triangles\";\n            break;\n        default:\n            geometryArrays.primitive = \"triangles\";\n    }\n    const accessors = ctx.gltf.accessors;\n    const indicesIndex = primitiveInfo.indices;\n    if (indicesIndex !== null && indicesIndex !== undefined) {\n        const accessorInfo = accessors[indicesIndex];\n        geometryArrays.indices = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n    const positionsIndex = attributes.POSITION;\n    if (positionsIndex !== null && positionsIndex !== undefined) {\n        const accessorInfo = accessors[positionsIndex];\n        geometryArrays.positions = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n    const normalsIndex = attributes.NORMAL;\n    if (normalsIndex !== null && normalsIndex !== undefined) {\n        const accessorInfo = accessors[normalsIndex];\n        geometryArrays.normals = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n    const colorsIndex = attributes.COLOR_0;\n    if (colorsIndex !== null && colorsIndex !== undefined) {\n        const accessorInfo = accessors[colorsIndex];\n        geometryArrays.colors = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n}\n\nfunction parseAccessorTypedArray(ctx, accessorInfo) {\n    const bufferView = ctx.gltf.bufferViews[accessorInfo.bufferView];\n    const itemSize = WEBGL_TYPE_SIZES[accessorInfo.type];\n    const TypedArray = WEBGL_COMPONENT_TYPES[accessorInfo.componentType];\n    const elementBytes = TypedArray.BYTES_PER_ELEMENT; // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n    const itemBytes = elementBytes * itemSize;\n    if (accessorInfo.byteStride && accessorInfo.byteStride !== itemBytes) { // The buffer is not interleaved if the stride is the item size in bytes.\n        throw new Error(\"interleaved buffer!\"); // TODO\n    } else {\n        return new TypedArray(bufferView._buffer, accessorInfo.byteOffset || 0, accessorInfo.count * itemSize);\n    }\n}\n\nexport {parseGLTFJSONIntoXKTModel};\n","/**\n * @desc Parses IFC STEP file data into an {@link XKTModel}.\n *\n * This function uses [web-ifc](https://github.com/tomvandig/web-ifc) to parse the IFC, which relies on a\n * WASM file to do the parsing.\n *\n * Depending on how we use this function, we may need to provide it with a path to the directory where that WASM file is stored.\n *\n * This function is tested with web-ifc version 0.0.34.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an IFC model into it.\n *\n * ````javascript\n * import {XKTModel, parseIFCIntoXKTModel, writeXKTModelToArrayBuffer} from \"xeokit-convert.es.js\";\n *\n * import * as WebIFC from \"web-ifc-api.js\";\n *\n * utils.loadArraybuffer(\"rac_advanced_sample_project.ifc\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseIFCIntoXKTModel({\n *          WebIFC,\n *          data,\n *          xktModel,\n *          wasmPath: \"../dist/\",\n *          autoNormals: true,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {Object} params.WebIFC The WebIFC library. We pass this in as an external dependency, in order to give the\n * caller the choice of whether to use the Browser or NodeJS version.\n * @param {ArrayBuffer} [params.data] IFC file data.\n * @param {XKTModel} [params.xktModel] XKTModel to parse into.\n * @param {Boolean} [params.autoNormals=true] When true, the parser will ignore the IFC geometry normals, and the IFC\n * data will rely on the xeokit ````Viewer```` to automatically generate them. This has the limitation that the\n * normals will be face-aligned, and therefore the ````Viewer```` will only be able to render a flat-shaded representation\n * of the IFC model. This is ````true```` by default, because IFC models tend to look acceptable with flat-shading,\n * and we always want to minimize IFC model size wherever possible.\n * @param {String[]} [params.includeTypes] Option to only convert objects of these types.\n * @param {String[]} [params.excludeTypes] Option to never convert objects of these types.\n * @param {String} params.wasmPath Path to ````web-ifc.wasm````, required by this function.\n * @param {Object} [params.stats={}] Collects statistics.\n * @param {function} [params.log] Logging callback.\n * @returns {Promise} Resolves when IFC has been parsed.\n */\nfunction parseIFCIntoXKTModel({\n                                  WebIFC,\n                                  data,\n                                  xktModel,\n                                  autoNormals = true,\n                                  includeTypes,\n                                  excludeTypes,\n                                  wasmPath,\n                                  stats = {},\n                                  log\n                              }) {\n\n    if (log) {\n        log(\"Using parser: parseIFCIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        if (!wasmPath) {\n            reject(\"Argument expected: wasmPath\");\n            return;\n        }\n\n        const ifcAPI = new WebIFC.IfcAPI();\n\n        if (wasmPath) {\n            ifcAPI.SetWasmPath(wasmPath);\n        }\n\n        ifcAPI.Init().then(() => {\n\n            const dataArray = new Uint8Array(data);\n\n            const modelID = ifcAPI.OpenModel(dataArray);\n\n            stats.sourceFormat = \"IFC\";\n            stats.schemaVersion = \"\";\n            stats.title = \"\";\n            stats.author = \"\";\n            stats.created = \"\";\n            stats.numMetaObjects = 0;\n            stats.numPropertySets = 0;\n            stats.numObjects = 0;\n            stats.numGeometries = 0;\n            stats.numTriangles = 0;\n            stats.numVertices = 0;\n\n            const ctx = {\n                WebIFC,\n                modelID,\n                ifcAPI,\n                xktModel,\n                autoNormals,\n                log: (log || function (msg) {\n                }),\n                nextId: 0,\n                stats\n            };\n\n            if (includeTypes) {\n                ctx.includeTypes = {};\n                for (let i = 0, len = includeTypes.length; i < len; i++) {\n                    ctx.includeTypes[includeTypes[i]] = true;\n                }\n            }\n\n            if (excludeTypes) {\n                ctx.excludeTypes = {};\n                for (let i = 0, len = excludeTypes.length; i < len; i++) {\n                    ctx.excludeTypes[excludeTypes[i]] = true;\n                }\n            }\n\n            const lines = ctx.ifcAPI.GetLineIDsWithType(modelID, WebIFC.IFCPROJECT);\n            const ifcProjectId = lines.get(0);\n            const ifcProject = ctx.ifcAPI.GetLine(modelID, ifcProjectId);\n\n            ctx.xktModel.schema = \"\";\n            ctx.xktModel.modelId = \"\" + modelID;\n            ctx.xktModel.projectId = \"\" + ifcProjectId;\n\n            parseMetadata(ctx);\n            parseGeometry(ctx);\n            parsePropertySets(ctx);\n\n            resolve();\n\n        }).catch((e) => {\n\n            reject(e);\n        })\n    });\n}\n\nfunction parsePropertySets(ctx) {\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, ctx.WebIFC.IFCRELDEFINESBYPROPERTIES);\n\n    for (let i = 0; i < lines.size(); i++) {\n\n        let relID = lines.get(i);\n\n        let rel = ctx.ifcAPI.GetLine(ctx.modelID, relID, true);\n\n        if (rel) {\n\n            const relatingPropertyDefinition = rel.RelatingPropertyDefinition;\n            if (!relatingPropertyDefinition) {\n                continue;\n            }\n\n            const propertySetId = relatingPropertyDefinition.GlobalId.value;\n\n            const relatedObjects = rel.RelatedObjects;\n            if (relatedObjects) {\n                for (let i = 0, len = relatedObjects.length; i < len; i++) {\n                    const relatedObject = relatedObjects[i];\n                    const metaObjectId = relatedObject.GlobalId.value;\n                    const metaObject = ctx.xktModel.metaObjects[metaObjectId];\n                    if (metaObject) {\n                        if (!metaObject.propertySetIds) {\n                            metaObject.propertySetIds = [];\n                        }\n                        metaObject.propertySetIds.push(propertySetId);\n                    }\n                }\n            }\n\n            const props = relatingPropertyDefinition.HasProperties;\n            if (props && props.length > 0) {\n                const propertySetType = \"Default\";\n                const propertySetName = relatingPropertyDefinition.Name.value;\n                const properties = [];\n                for (let i = 0, len = props.length; i < len; i++) {\n                    const prop = props[i];\n                    const name = prop.Name;\n                    const nominalValue = prop.NominalValue;\n                    if (name && nominalValue) {\n                        const property = {\n                            name: name.value,\n                            type: nominalValue.type,\n                            value: nominalValue.value,\n                            valueType: nominalValue.valueType\n                        };\n                        if (prop.Description) {\n                            property.description = prop.Description.value;\n                        } else if (nominalValue.description) {\n                            property.description = nominalValue.description;\n                        }\n                        properties.push(property);\n                    }\n                }\n                ctx.xktModel.createPropertySet({propertySetId, propertySetType, propertySetName, properties});\n                ctx.stats.numPropertySets++;\n            }\n        }\n    }\n}\n\nfunction parseMetadata(ctx) {\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, ctx.WebIFC.IFCPROJECT);\n    const ifcProjectId = lines.get(0);\n    const ifcProject = ctx.ifcAPI.GetLine(ctx.modelID, ifcProjectId);\n\n    parseSpatialChildren(ctx, ifcProject);\n}\n\nfunction parseSpatialChildren(ctx, ifcElement, parentMetaObjectId) {\n\n    const metaObjectType = ifcElement.__proto__.constructor.name;\n\n    if (ctx.includeTypes && (!ctx.includeTypes[metaObjectType])) {\n        return;\n    }\n\n    if (ctx.excludeTypes && ctx.excludeTypes[metaObjectType]) {\n        return;\n    }\n\n    createMetaObject(ctx, ifcElement, parentMetaObjectId);\n\n    const metaObjectId = ifcElement.GlobalId.value;\n\n    parseRelatedItemsOfType(\n        ctx,\n        ifcElement.expressID,\n        'RelatingObject',\n        'RelatedObjects',\n        ctx.WebIFC.IFCRELAGGREGATES,\n        metaObjectId);\n\n    parseRelatedItemsOfType(\n        ctx,\n        ifcElement.expressID,\n        'RelatingStructure',\n        'RelatedElements',\n        ctx.WebIFC.IFCRELCONTAINEDINSPATIALSTRUCTURE,\n        metaObjectId);\n}\n\nfunction createMetaObject(ctx, ifcElement, parentMetaObjectId) {\n\n    const metaObjectId = ifcElement.GlobalId.value;\n    const propertySetIds = null;\n    const metaObjectType = ifcElement.__proto__.constructor.name;\n    const metaObjectName = (ifcElement.Name && ifcElement.Name.value !== \"\") ? ifcElement.Name.value : metaObjectType;\n\n    ctx.xktModel.createMetaObject({metaObjectId, propertySetIds, metaObjectType, metaObjectName, parentMetaObjectId});\n    ctx.stats.numMetaObjects++;\n}\n\nfunction parseRelatedItemsOfType(ctx, id, relation, related, type, parentMetaObjectId) {\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, type);\n\n    for (let i = 0; i < lines.size(); i++) {\n\n        const relID = lines.get(i);\n        const rel = ctx.ifcAPI.GetLine(ctx.modelID, relID);\n        const relatedItems = rel[relation];\n\n        let foundElement = false;\n\n        if (Array.isArray(relatedItems)) {\n            const values = relatedItems.map((item) => item.value);\n            foundElement = values.includes(id);\n\n        } else {\n            foundElement = (relatedItems.value === id);\n        }\n\n        if (foundElement) {\n\n            const element = rel[related];\n\n            if (!Array.isArray(element)) {\n\n                const ifcElement = ctx.ifcAPI.GetLine(ctx.modelID, element.value);\n\n                parseSpatialChildren(ctx, ifcElement, parentMetaObjectId);\n\n            } else {\n\n                element.forEach((element2) => {\n\n                    const ifcElement = ctx.ifcAPI.GetLine(ctx.modelID, element2.value);\n\n                    parseSpatialChildren(ctx, ifcElement, parentMetaObjectId);\n                });\n            }\n        }\n    }\n}\n\nfunction parseGeometry(ctx) {\n\n    // Parses the geometry and materials in the IFC, creates\n    // XKTEntity, XKTMesh and XKTGeometry components within the XKTModel.\n\n    const flatMeshes = ctx.ifcAPI.LoadAllGeometry(ctx.modelID);\n\n    for (let i = 0, len = flatMeshes.size(); i < len; i++) {\n        const flatMesh = flatMeshes.get(i);\n        createObject(ctx, flatMesh);\n    }\n\n    // LoadAllGeometry does not return IFCSpace meshes\n    // here is a workaround\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, ctx.WebIFC.IFCSPACE);\n    for (let j = 0, len = lines.size(); j < len; j++) {\n        const ifcSpaceId = lines.get(j);\n        const flatMesh = ctx.ifcAPI.GetFlatMesh(ctx.modelID, ifcSpaceId);\n        createObject(ctx, flatMesh);\n    }\n}\n\nfunction createObject(ctx, flatMesh) {\n\n    const flatMeshExpressID = flatMesh.expressID;\n    const placedGeometries = flatMesh.geometries;\n\n    const meshIds = [];\n\n    const properties = ctx.ifcAPI.GetLine(ctx.modelID, flatMeshExpressID);\n    const entityId = properties.GlobalId.value;\n\n    const metaObjectId = entityId;\n    const metaObject = ctx.xktModel.metaObjects[metaObjectId];\n\n    if (ctx.includeTypes && (!metaObject || (!ctx.includeTypes[metaObject.metaObjectType]))) {\n        return;\n    }\n\n    if (ctx.excludeTypes && (!metaObject || ctx.excludeTypes[metaObject.metaObjectType])) {\n        console.log(\"excluding: \" + metaObjectId)\n        return;\n    }\n\n    for (let j = 0, lenj = placedGeometries.size(); j < lenj; j++) {\n\n        const placedGeometry = placedGeometries.get(j);\n        const geometryId = \"\" + placedGeometry.geometryExpressID;\n\n        if (!ctx.xktModel.geometries[geometryId]) {\n\n            const geometry = ctx.ifcAPI.GetGeometry(ctx.modelID, placedGeometry.geometryExpressID);\n            const vertexData = ctx.ifcAPI.GetVertexArray(geometry.GetVertexData(), geometry.GetVertexDataSize());\n            const indices = ctx.ifcAPI.GetIndexArray(geometry.GetIndexData(), geometry.GetIndexDataSize());\n\n            // De-interleave vertex arrays\n\n            const positions = [];\n            const normals = [];\n\n            for (let k = 0, lenk = vertexData.length / 6; k < lenk; k++) {\n                positions.push(vertexData[k * 6 + 0]);\n                positions.push(vertexData[k * 6 + 1]);\n                positions.push(vertexData[k * 6 + 2]);\n            }\n\n            if (!ctx.autoNormals) {\n                for (let k = 0, lenk = vertexData.length / 6; k < lenk; k++) {\n                    normals.push(vertexData[k * 6 + 3]);\n                    normals.push(vertexData[k * 6 + 4]);\n                    normals.push(vertexData[k * 6 + 5]);\n                }\n            }\n\n            ctx.xktModel.createGeometry({\n                geometryId: geometryId,\n                primitiveType: \"triangles\",\n                positions: positions,\n                normals: ctx.autoNormals ? null : normals,\n                indices: indices\n            });\n\n            ctx.stats.numGeometries++;\n            ctx.stats.numVertices += (positions.length / 3);\n            ctx.stats.numTriangles += (indices.length / 3);\n        }\n\n        const meshId = (\"mesh\" + ctx.nextId++);\n\n        ctx.xktModel.createMesh({\n            meshId: meshId,\n            geometryId: geometryId,\n            matrix: placedGeometry.flatTransformation,\n            color: [placedGeometry.color.x, placedGeometry.color.y, placedGeometry.color.z],\n            opacity: placedGeometry.color.w\n        });\n\n        meshIds.push(meshId);\n    }\n\n    if (meshIds.length > 0) {\n        ctx.xktModel.createEntity({\n            entityId: entityId,\n            meshIds: meshIds\n        });\n        ctx.stats.numObjects++;\n    }\n}\n\nexport {parseIFCIntoXKTModel};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/las\");","import {parse} from '@loaders.gl/core';\nimport {LASLoader} from '@loaders.gl/las';\n\nimport {math} from \"../lib/math.js\";\n\n\n/**\n * @desc Parses LAS and LAZ point cloud data into an {@link XKTModel}.\n *\n * This parser handles both the LASER file format (LAS) and its compressed version (LAZ),\n * a public format for the interchange of 3-dimensional point cloud data data, developed\n * for LIDAR mapping purposes.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an LAZ point cloud model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"./models/laz/autzen.laz\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     await parseLASIntoXKTModel({\n *          data,\n *          xktModel,\n *          rotateX: true,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer} params.data LAS/LAZ file data.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Boolean} [params.rotateX=false] Whether to rotate the model 90 degrees about the X axis to make the Y axis \"up\", if necessary.\n * @param {Number|String} [params.colorDepth=8] Whether colors encoded using 8 or 16 bits. Can be set to 'auto'. LAS specification recommends 16 bits.\n * @param {Boolean} [params.fp64=false] Configures if LASLoaderPlugin assumes that LAS positions are stored in 64-bit floats instead of 32-bit.\n * @param {Number} [params.skip=1] Read one from every n points.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n * @returns {Promise} Resolves when LAS has been parsed.\n */\nfunction parseLASIntoXKTModel({\n                                  data,\n                                  xktModel,\n                                  rotateX = false,\n                                  colorDepth = \"auto\",\n                                  fp64 = false,\n                                  skip = 1,\n                                  stats,\n                                  log = () => {\n                                  }\n                              }) {\n\n    if (log) {\n        log(\"Using parser: parseLASIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        if (log) {\n            log(\"Converting LAZ/LAS\");\n            if (rotateX) {\n                log(\"Rotating model 90 degrees about X-axis\");\n            }\n        }\n\n        parse(data, LASLoader, {\n            las: {\n                colorDepth,\n                fp64,\n                skip\n            }\n        }).then((parsedData) => {\n\n            const attributes = parsedData.attributes;\n\n            const loaderData = parsedData.loaderData;\n            const pointsFormatId = loaderData.pointsFormatId !== undefined ? loaderData.pointsFormatId : -1;\n\n            if (!attributes.POSITION) {\n                log(\"No positions found in file (expected for all LAS point formats)\");\n                return;\n            }\n\n            let positionsValue\n            let colorsCompressed;\n\n            switch (pointsFormatId) {\n                case 0:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 0)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readIntensities(attributes.intensity);\n                    break;\n                case 1:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 1)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readIntensities(attributes.intensity);\n                    break;\n                case 2:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 2)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readColorsAndIntensities(attributes.COLOR_0, attributes.intensity);\n                    break;\n                case 3:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 3)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readColorsAndIntensities(attributes.COLOR_0, attributes.intensity);\n                    break;\n            }\n\n            xktModel.createGeometry({\n                geometryId: \"pointsGeometry\",\n                primitiveType: \"points\",\n                positions: positionsValue,\n                colorsCompressed: colorsCompressed\n            });\n\n            xktModel.createMesh({\n                meshId: \"pointsMesh\",\n                geometryId: \"pointsGeometry\"\n            });\n\n            const entityId = math.createUUID();\n\n            xktModel.createEntity({\n                entityId: entityId,\n                meshIds: [\"pointsMesh\"]\n            });\n\n            const rootMetaObjectId = math.createUUID();\n\n            xktModel.createMetaObject({\n                metaObjectId: rootMetaObjectId,\n                metaObjectType: \"Model\",\n                metaObjectName: \"Model\"\n            });\n\n            xktModel.createMetaObject({\n                metaObjectId: entityId,\n                metaObjectType: \"PointCloud\",\n                metaObjectName: \"PointCloud (LAZ)\",\n                parentMetaObjectId: rootMetaObjectId\n            });\n\n            if (stats) {\n                stats.sourceFormat = \"LAS\";\n                stats.schemaVersion = \"\";\n                stats.title = \"\";\n                stats.author = \"\";\n                stats.created = \"\";\n                stats.numMetaObjects = 2;\n                stats.numPropertySets = 0;\n                stats.numObjects = 1;\n                stats.numGeometries = 1;\n                stats.numVertices = positionsValue.length / 3;\n            }\n\n            resolve();\n\n        }, (errMsg) => {\n            reject(errMsg);\n        });\n    });\n}\n\nfunction readPositions(attributesPosition, rotateX) {\n    const positionsValue = attributesPosition.value;\n    if (rotateX) {\n        if (positionsValue) {\n            for (let i = 0, len = positionsValue.length; i < len; i += 3) {\n                const temp = positionsValue[i + 1];\n                positionsValue[i + 1] = positionsValue[i + 2];\n                positionsValue[i + 2] = temp;\n            }\n        }\n    }\n    return positionsValue;\n}\n\nfunction readColorsAndIntensities(attributesColor, attributesIntensity) {\n    const colors = attributesColor.value;\n    const colorSize = attributesColor.size;\n    const intensities = attributesIntensity.value;\n    const colorsCompressedSize = intensities.length * 4;\n    const colorsCompressed = new Uint8Array(colorsCompressedSize);\n    for (let i = 0, j = 0, k = 0, len = intensities.length; i < len; i++, k += colorSize, j += 4) {\n        colorsCompressed[j + 0] = colors[k + 0];\n        colorsCompressed[j + 1] = colors[k + 1];\n        colorsCompressed[j + 2] = colors[k + 2];\n        colorsCompressed[j + 3] = Math.round((intensities[i] / 65536) * 255);\n    }\n    return colorsCompressed;\n}\n\nfunction readIntensities(attributesIntensity) {\n    const intensities = attributesIntensity.intensity;\n    const colorsCompressedSize = intensities.length * 4;\n    const colorsCompressed = new Uint8Array(colorsCompressedSize);\n    for (let i = 0, j = 0, k = 0, len = intensities.length; i < len; i++, k += 3, j += 4) {\n        colorsCompressed[j + 0] = 0;\n        colorsCompressed[j + 1] = 0;\n        colorsCompressed[j + 2] = 0;\n        colorsCompressed[j + 3] = Math.round((intensities[i] / 65536) * 255);\n    }\n    return colorsCompressed;\n}\n\nexport {parseLASIntoXKTModel};","/**\n * @desc Parses JSON metamodel into an {@link XKTModel}.\n *\n * @param {Object} params Parsing parameters.\n * @param {JSON} params.metaModelData Metamodel data.\n * @param {String[]} [params.excludeTypes] Types to exclude from parsing.\n * @param {String[]} [params.includeTypes] Types to include in parsing.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when JSON has been parsed.\n */\nfunction parseMetaModelIntoXKTModel({metaModelData, xktModel, includeTypes, excludeTypes, log}) {\n\n    if (log) {\n        log(\"Using parser: parseMetaModelIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        const metaObjects = metaModelData.metaObjects || [];\n        const propertySets = metaModelData.propertySets || [];\n\n        xktModel.modelId = metaModelData.revisionId || \"\"; // HACK\n        xktModel.projectId = metaModelData.projectId || \"\";\n        xktModel.revisionId = metaModelData.revisionId || \"\";\n        xktModel.author = metaModelData.author || \"\";\n        xktModel.createdAt = metaModelData.createdAt || \"\";\n        xktModel.creatingApplication = metaModelData.creatingApplication || \"\";\n        xktModel.schema = metaModelData.schema || \"\";\n\n        for (let i = 0, len = propertySets.length; i < len; i++) {\n\n            const propertySet = propertySets[i];\n\n            xktModel.createPropertySet({\n                propertySetId: propertySet.id,\n                propertySetName: propertySet.name,\n                propertySetType: propertySet.type,\n                properties: propertySet.properties\n            });\n        }\n\n        let includeTypesMap;\n        if (includeTypes) {\n            includeTypesMap = {};\n            for (let i = 0, len = includeTypes.length; i < len; i++) {\n                includeTypesMap[includeTypes[i]] = true;\n            }\n        }\n\n        let excludeTypesMap;\n        if (excludeTypes) {\n            excludeTypesMap = {};\n            for (let i = 0, len = excludeTypes.length; i < len; i++) {\n                excludeTypesMap[excludeTypes[i]] = true;\n            }\n        }\n\n        const metaObjectsMap = {};\n\n        for (let i = 0, len = metaObjects.length; i < len; i++) {\n            const newObject = metaObjects[i];\n            metaObjectsMap[newObject.id] = newObject;\n        }\n\n        let countMetaObjects = 0;\n\n        for (let i = 0, len = metaObjects.length; i < len; i++) {\n\n            const metaObject = metaObjects[i];\n            const type = metaObject.type;\n\n            if (excludeTypesMap && excludeTypesMap[type]) {\n                continue;\n            }\n\n            if (includeTypesMap && !includeTypesMap[type]) {\n                continue;\n            }\n\n            if (metaObject.parent !== undefined && metaObject.parent !== null) {\n                const metaObjectParent = metaObjectsMap[metaObject.parent];\n                if (metaObject.type === metaObjectParent.type) { // Don't create redundant sub-objects\n                    continue\n                }\n            }\n\n            const propertySetIds = [];\n            if (metaObject.propertySetIds) {\n                for (let j = 0, lenj = metaObject.propertySetIds.length; j < lenj; j++) {\n                    const propertySetId = metaObject.propertySetIds[j];\n                    if (propertySetId !== undefined && propertySetId !== null && propertySetId !== \"\") {\n                        propertySetIds.push(propertySetId);\n                    }\n                }\n            }\n            if (metaObject.propertySetId !== undefined && metaObject.propertySetId !== null && metaObject.propertySetId !== \"\") {\n                propertySetIds.push(metaObject.propertySetId);\n            }\n\n            xktModel.createMetaObject({\n                metaObjectId: metaObject.id,\n                metaObjectType: metaObject.type,\n                metaObjectName: metaObject.name,\n                parentMetaObjectId: metaObject.parent,\n                propertySetIds: propertySetIds.length > 0 ? propertySetIds : null\n            });\n\n            countMetaObjects++;\n        }\n\n        if (log) {\n            log(\"Converted meta objects: \" + countMetaObjects);\n        }\n\n        resolve();\n    });\n}\n\nexport {parseMetaModelIntoXKTModel};\n","/**\n * @desc Parses PCD point cloud data into an {@link XKTModel}.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an LAZ point cloud model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"\"./models/pcd/ism_test_cat.pcd\"\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     await parsePCDIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer} params.data PCD file data.\n * @param {Boolean} [params.littleEndian=true] Whether PCD binary data is Little-Endian or Big-Endian.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when PCD has been parsed.\n */\nfunction parsePCDIntoXKTModel({data, xktModel, littleEndian = true, stats, log}) {\n\n    if (log) {\n        log(\"Using parser: parsePCDIntoXKTModel\");\n    }\n\n    return new Promise(function(resolve, reject) {\n\n        const textData = decodeText(new Uint8Array(data));\n\n        const header = parseHeader(textData);\n\n        const positions = [];\n        const normals = [];\n        const colors = [];\n\n        if (header.data === 'ascii') {\n\n            const offset = header.offset;\n            const data = textData.substr(header.headerLen);\n            const lines = data.split('\\n');\n\n            for (let i = 0, l = lines.length; i < l; i++) {\n\n                if (lines[i] === '') {\n                    continue;\n                }\n\n                const line = lines[i].split(' ');\n\n                if (offset.x !== undefined) {\n                    positions.push(parseFloat(line[offset.x]));\n                    positions.push(parseFloat(line[offset.y]));\n                    positions.push(parseFloat(line[offset.z]));\n                }\n\n                if (offset.rgb !== undefined) {\n                    const rgb = parseFloat(line[offset.rgb]);\n                    const r = (rgb >> 16) & 0x0000ff;\n                    const g = (rgb >> 8) & 0x0000ff;\n                    const b = (rgb >> 0) & 0x0000ff;\n                    colors.push(r, g, b, 255);\n                } else {\n                    colors.push(255);\n                    colors.push(255);\n                    colors.push(255);\n                }\n            }\n        }\n\n        if (header.data === 'binary_compressed') {\n\n            const sizes = new Uint32Array(data.slice(header.headerLen, header.headerLen + 8));\n            const compressedSize = sizes[0];\n            const decompressedSize = sizes[1];\n            const decompressed = decompressLZF(new Uint8Array(data, header.headerLen + 8, compressedSize), decompressedSize);\n            const dataview = new DataView(decompressed.buffer);\n            const offset = header.offset;\n\n            for (let i = 0; i < header.points; i++) {\n\n                if (offset.x !== undefined) {\n                    positions.push(dataview.getFloat32((header.points * offset.x) + header.size[0] * i, littleEndian));\n                    positions.push(dataview.getFloat32((header.points * offset.y) + header.size[1] * i, littleEndian));\n                    positions.push(dataview.getFloat32((header.points * offset.z) + header.size[2] * i, littleEndian));\n                }\n\n                if (offset.rgb !== undefined) {\n                    colors.push(dataview.getUint8((header.points * offset.rgb) + header.size[3] * i + 0));\n                    colors.push(dataview.getUint8((header.points * offset.rgb) + header.size[3] * i + 1));\n                    colors.push(dataview.getUint8((header.points * offset.rgb) + header.size[3] * i + 2));\n                    //    colors.push(255);\n                } else {\n                    colors.push(1);\n                    colors.push(1);\n                    colors.push(1);\n                }\n            }\n        }\n\n        if (header.data === 'binary') {\n\n            const dataview = new DataView(data, header.headerLen);\n            const offset = header.offset;\n\n            for (let i = 0, row = 0; i < header.points; i++, row += header.rowSize) {\n                if (offset.x !== undefined) {\n                    positions.push(dataview.getFloat32(row + offset.x, littleEndian));\n                    positions.push(dataview.getFloat32(row + offset.y, littleEndian));\n                    positions.push(dataview.getFloat32(row + offset.z, littleEndian));\n                }\n\n                if (offset.rgb !== undefined) {\n                    colors.push(dataview.getUint8(row + offset.rgb + 2));\n                    colors.push(dataview.getUint8(row + offset.rgb + 1));\n                    colors.push(dataview.getUint8(row + offset.rgb + 0));\n                } else {\n                    colors.push(255);\n                    colors.push(255);\n                    colors.push(255);\n                }\n            }\n        }\n\n        xktModel.createGeometry({\n            geometryId: \"pointsGeometry\",\n            primitiveType: \"points\",\n            positions: positions,\n            colors: colors && colors.length > 0 ? colors : null\n        });\n\n        xktModel.createMesh({\n            meshId: \"pointsMesh\",\n            geometryId: \"pointsGeometry\"\n        });\n\n        xktModel.createEntity({\n            entityId: \"geometries\",\n            meshIds: [\"pointsMesh\"]\n        });\n\n        if (log) {\n            log(\"Converted drawable objects: 1\");\n            log(\"Converted geometries: 1\");\n            log(\"Converted vertices: \" + positions.length / 3);\n        }\n\n        if (stats) {\n            stats.sourceFormat = \"PCD\";\n            stats.schemaVersion = \"\";\n            stats.title = \"\";\n            stats.author = \"\";\n            stats.created = \"\";\n            stats.numObjects = 1;\n            stats.numGeometries = 1;\n            stats.numVertices = positions.length / 3;\n        }\n\n        resolve();\n    });\n}\n\nfunction parseHeader(data) {\n    const header = {};\n    const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n    const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n    header.data = result2[1];\n    header.headerLen = result2[0].length + result1;\n    header.str = data.substr(0, header.headerLen);\n    header.str = header.str.replace(/\\#.*/gi, '');     // Strip comments\n    header.version = /VERSION (.*)/i.exec(header.str); // Parse\n    header.fields = /FIELDS (.*)/i.exec(header.str);\n    header.size = /SIZE (.*)/i.exec(header.str);\n    header.type = /TYPE (.*)/i.exec(header.str);\n    header.count = /COUNT (.*)/i.exec(header.str);\n    header.width = /WIDTH (.*)/i.exec(header.str);\n    header.height = /HEIGHT (.*)/i.exec(header.str);\n    header.viewpoint = /VIEWPOINT (.*)/i.exec(header.str);\n    header.points = /POINTS (.*)/i.exec(header.str);\n    if (header.version !== null) {\n        header.version = parseFloat(header.version[1]);\n    }\n    if (header.fields !== null) {\n        header.fields = header.fields[1].split(' ');\n    }\n    if (header.type !== null) {\n        header.type = header.type[1].split(' ');\n    }\n    if (header.width !== null) {\n        header.width = parseInt(header.width[1]);\n    }\n    if (header.height !== null) {\n        header.height = parseInt(header.height[1]);\n    }\n    if (header.viewpoint !== null) {\n        header.viewpoint = header.viewpoint[1];\n    }\n    if (header.points !== null) {\n        header.points = parseInt(header.points[1], 10);\n    }\n    if (header.points === null) {\n        header.points = header.width * header.height;\n    }\n    if (header.size !== null) {\n        header.size = header.size[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n        });\n    }\n    if (header.count !== null) {\n        header.count = header.count[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n        });\n    } else {\n        header.count = [];\n        for (let i = 0, l = header.fields.length; i < l; i++) {\n            header.count.push(1);\n        }\n    }\n    header.offset = {};\n    let sizeSum = 0;\n    for (let i = 0, l = header.fields.length; i < l; i++) {\n        if (header.data === 'ascii') {\n            header.offset[header.fields[i]] = i;\n        } else {\n            header.offset[header.fields[i]] = sizeSum;\n            sizeSum += header.size[i] * header.count[i];\n        }\n    }\n    header.rowSize = sizeSum; // For binary only\n    return header;\n}\n\nfunction decodeText(array) {\n    if (typeof TextDecoder !== 'undefined') {\n        return new TextDecoder().decode(array);\n    }\n    let s = '';\n    for (let i = 0, il = array.length; i < il; i++) {\n        s += String.fromCharCode(array[i]);\n    }\n    try {\n        return decodeURIComponent(escape(s));\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction decompressLZF(inData, outLength) { // https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n    const inLength = inData.length;\n    const outData = new Uint8Array(outLength);\n    let inPtr = 0;\n    let outPtr = 0;\n    let ctrl;\n    let len;\n    let ref;\n    do {\n        ctrl = inData[inPtr++];\n        if (ctrl < (1 << 5)) {\n            ctrl++;\n            if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n            if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n            do {\n                outData[outPtr++] = inData[inPtr++];\n            } while (--ctrl);\n        } else {\n            len = ctrl >> 5;\n            ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            if (len === 7) {\n                len += inData[inPtr++];\n                if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            }\n            ref -= inData[inPtr++];\n            if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n            if (ref < 0) throw new Error('Invalid compressed data');\n            if (ref >= outPtr) throw new Error('Invalid compressed data');\n            do {\n                outData[outPtr++] = outData[ref++];\n            } while (--len + 2);\n        }\n    } while (inPtr < inLength);\n    return outData;\n}\n\nexport {parsePCDIntoXKTModel};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/ply\");","import {parse} from '@loaders.gl/core';\nimport {PLYLoader} from '@loaders.gl/ply';\n\n/**\n * @desc Parses PLY file data into an {@link XKTModel}.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a PLY model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"./models/ply/test.ply\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parsePLYIntoXKTModel({data, xktModel}).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer} params.data PLY file data.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when PLY has been parsed.\n */\nasync function parsePLYIntoXKTModel({data, xktModel, stats, log}) {\n\n    if (log) {\n        log(\"Using parser: parsePLYIntoXKTModel\");\n    }\n\n    if (!data) {\n        throw \"Argument expected: data\";\n    }\n\n    if (!xktModel) {\n        throw \"Argument expected: xktModel\";\n    }\n\n    let parsedData;\n    try {\n        parsedData = await parse(data, PLYLoader);\n    } catch (e) {\n        if (log) {\n            log(\"Error: \" + e);\n        }\n        return;\n    }\n\n    const attributes = parsedData.attributes;\n    const hasColors = !!attributes.COLOR_0;\n\n    if (hasColors) {\n        const colorsValue = hasColors ? attributes.COLOR_0.value : null;\n        const colorsCompressed = [];\n        for (let i = 0, len = colorsValue.length; i < len; i += 4) {\n            colorsCompressed.push(colorsValue[i]);\n            colorsCompressed.push(colorsValue[i + 1]);\n            colorsCompressed.push(colorsValue[i + 2]);\n        }\n        xktModel.createGeometry({\n            geometryId: \"plyGeometry\",\n            primitiveType: \"triangles\",\n            positions: attributes.POSITION.value,\n            indices: parsedData.indices ? parsedData.indices.value : [],\n            colorsCompressed: colorsCompressed\n        });\n    } else {\n        xktModel.createGeometry({\n            geometryId: \"plyGeometry\",\n            primitiveType: \"triangles\",\n            positions: attributes.POSITION.value,\n            indices: parsedData.indices ? parsedData.indices.value : []\n        });\n    }\n\n    xktModel.createMesh({\n        meshId: \"plyMesh\",\n        geometryId: \"plyGeometry\",\n        color: (!hasColors) ? [1, 1, 1] : null\n    });\n\n    xktModel.createEntity({\n        entityId: \"ply\",\n        meshIds: [\"plyMesh\"]\n    });\n\n    if (stats) {\n        stats.sourceFormat = \"PLY\";\n        stats.schemaVersion = \"\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numMetaObjects = 2;\n        stats.numPropertySets = 0;\n        stats.numObjects = 1;\n        stats.numGeometries = 1;\n        stats.numVertices = attributes.POSITION.value.length / 3;\n    }\n}\n\nexport {parsePLYIntoXKTModel};\n","import {faceToVertexNormals} from \"../lib/faceToVertexNormals.js\";\nimport {math} from \"../lib/math.js\";\n\n/**\n * @desc Parses STL file data into an {@link XKTModel}.\n *\n * * Supports binary and ASCII STL formats.\n * * Option to create a separate {@link XKTEntity} for each group of faces that share the same vertex colors.\n * * Option to smooth face-aligned normals loaded from STL.\n * * Option to reduce XKT file size by ignoring STL normals and relying on xeokit to auto-generate them.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an STL model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"./models/stl/binary/spurGear.stl\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseSTLIntoXKTModel({data, xktModel});\n *\n *     xktModel.finalize();\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer|String} [params.data] STL file data. Can be binary or string.\n * @param {Boolean} [params.autoNormals=false] When true, the parser will ignore the STL geometry normals, and the STL\n * data will rely on the xeokit ````Viewer```` to automatically generate them. This has the limitation that the\n * normals will be face-aligned, and therefore the ````Viewer```` will only be able to render a flat-shaded representation\n * of the STL.\n * Overrides ````smoothNormals```` when ````true````. This ignores the normals in the STL, and loads no\n * normals from the STL into the {@link XKTModel}, resulting in the XKT file storing no normals for the STL model. The\n * xeokit-sdk will then automatically generate the normals within its shaders. The disadvantages are that auto-normals\n * may slow rendering down a little bit, and that the normals can only be face-aligned (and thus rendered using flat\n * shading). The advantages, however, are a smaller XKT file size, and the ability to apply certain geometry optimizations\n * during parsing, such as removing duplicated STL vertex positions, that are not possible when normals are loaded\n * for the STL vertices.\n * @param {Boolean} [params.smoothNormals=true] When true, automatically converts face-oriented STL normals to vertex normals, for a smooth appearance. Ignored if ````autoNormals```` is ````true````.\n * @param {Number} [params.smoothNormalsAngleThreshold=20] This is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n * @param {Boolean} [params.splitMeshes=true] When true, creates a separate {@link XKTEntity} for each group of faces that share the same vertex colors. Only works with binary STL (ie. when ````data```` is an ArrayBuffer).\n * @param {XKTModel} [params.xktModel] XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when STL has been parsed.\n */\nasync function parseSTLIntoXKTModel({\n                                        data,\n                                        splitMeshes,\n                                        autoNormals,\n                                        smoothNormals,\n                                        smoothNormalsAngleThreshold,\n                                        xktModel,\n                                        stats,\n                                        log\n                                    }) {\n\n    if (log) {\n        log(\"Using parser: parseSTLIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        const rootMetaObjectId = math.createUUID();\n\n        const rootMetaObject = xktModel.createMetaObject({\n            metaObjectId: rootMetaObjectId,\n            metaObjectType: \"Model\",\n            metaObjectName: \"Model\"\n        });\n\n        const ctx = {\n            data,\n            splitMeshes,\n            autoNormals,\n            smoothNormals,\n            smoothNormalsAngleThreshold,\n            xktModel,\n            rootMetaObject,\n            nextId: 0,\n            log: (log || function (msg) {\n            }),\n            stats: {\n                numObjects: 0,\n                numGeometries: 0,\n                numTriangles: 0,\n                numVertices: 0\n            }\n        };\n\n        const binData = ensureBinary(data);\n\n        if (isBinary(binData)) {\n            parseBinary(ctx, binData);\n        } else {\n            parseASCII(ctx, ensureString(data));\n        }\n\n        if (stats) {\n            stats.sourceFormat = \"STL\";\n            stats.schemaVersion = \"\";\n            stats.title = \"\";\n            stats.author = \"\";\n            stats.created = \"\";\n            stats.numMetaObjects = 2;\n            stats.numPropertySets = 0;\n            stats.numObjects = 1;\n            stats.numGeometries = 1;\n            stats.numTriangles = ctx.stats.numTriangles;\n            stats.numVertices = ctx.stats.numVertices;\n        }\n\n        resolve();\n    });\n}\n\nfunction isBinary(data) {\n    const reader = new DataView(data);\n    const numFaces = reader.getUint32(80, true);\n    const faceSize = (32 / 8 * 3) + ((32 / 8 * 3) * 3) + (16 / 8);\n    const numExpectedBytes = 80 + (32 / 8) + (numFaces * faceSize);\n    if (numExpectedBytes === reader.byteLength) {\n        return true;\n    }\n    const solid = [115, 111, 108, 105, 100];\n    for (let i = 0; i < 5; i++) {\n        if (solid[i] !== reader.getUint8(i, false)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction parseBinary(ctx, data) {\n    const reader = new DataView(data);\n    const faces = reader.getUint32(80, true);\n    let r;\n    let g;\n    let b;\n    let hasColors = false;\n    let colors;\n    let defaultR;\n    let defaultG;\n    let defaultB;\n    let lastR = null;\n    let lastG = null;\n    let lastB = null;\n    let newMesh = false;\n    let alpha;\n    for (let index = 0; index < 80 - 10; index++) {\n        if ((reader.getUint32(index, false) === 0x434F4C4F /*COLO*/) &&\n            (reader.getUint8(index + 4) === 0x52 /*'R'*/) &&\n            (reader.getUint8(index + 5) === 0x3D /*'='*/)) {\n            hasColors = true;\n            colors = [];\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n        }\n    }\n    let dataOffset = 84;\n    let faceLength = 12 * 4 + 2;\n    let positions = [];\n    let normals = [];\n    let splitMeshes = ctx.splitMeshes;\n    for (let face = 0; face < faces; face++) {\n        let start = dataOffset + face * faceLength;\n        let normalX = reader.getFloat32(start, true);\n        let normalY = reader.getFloat32(start + 4, true);\n        let normalZ = reader.getFloat32(start + 8, true);\n        if (hasColors) {\n            let packedColor = reader.getUint16(start + 48, true);\n            if ((packedColor & 0x8000) === 0) {\n                r = (packedColor & 0x1F) / 31;\n                g = ((packedColor >> 5) & 0x1F) / 31;\n                b = ((packedColor >> 10) & 0x1F) / 31;\n            } else {\n                r = defaultR;\n                g = defaultG;\n                b = defaultB;\n            }\n            if (splitMeshes && r !== lastR || g !== lastG || b !== lastB) {\n                if (lastR !== null) {\n                    newMesh = true;\n                }\n                lastR = r;\n                lastG = g;\n                lastB = b;\n            }\n        }\n        for (let i = 1; i <= 3; i++) {\n            let vertexstart = start + i * 12;\n            positions.push(reader.getFloat32(vertexstart, true));\n            positions.push(reader.getFloat32(vertexstart + 4, true));\n            positions.push(reader.getFloat32(vertexstart + 8, true));\n            if (!ctx.autoNormals) {\n                normals.push(normalX, normalY, normalZ);\n            }\n            if (hasColors) {\n                colors.push(r, g, b, 1); // TODO: handle alpha\n            }\n        }\n        if (splitMeshes && newMesh) {\n            addMesh(ctx, positions, normals, colors);\n            positions = [];\n            normals = [];\n            colors = colors ? [] : null;\n            newMesh = false;\n        }\n    }\n    if (positions.length > 0) {\n        addMesh(ctx, positions, normals, colors);\n    }\n}\n\nfunction parseASCII(ctx, data) {\n    const faceRegex = /facet([\\s\\S]*?)endfacet/g;\n    let faceCounter = 0;\n    const floatRegex = /[\\s]+([+-]?(?:\\d+.\\d+|\\d+.|\\d+|.\\d+)(?:[eE][+-]?\\d+)?)/.source;\n    const vertexRegex = new RegExp('vertex' + floatRegex + floatRegex + floatRegex, 'g');\n    const normalRegex = new RegExp('normal' + floatRegex + floatRegex + floatRegex, 'g');\n    const positions = [];\n    const normals = [];\n    const colors = null;\n    let normalx;\n    let normaly;\n    let normalz;\n    let result;\n    let verticesPerFace;\n    let normalsPerFace;\n    let text;\n    while ((result = faceRegex.exec(data)) !== null) {\n        verticesPerFace = 0;\n        normalsPerFace = 0;\n        text = result[0];\n        while ((result = normalRegex.exec(text)) !== null) {\n            normalx = parseFloat(result[1]);\n            normaly = parseFloat(result[2]);\n            normalz = parseFloat(result[3]);\n            normalsPerFace++;\n        }\n        while ((result = vertexRegex.exec(text)) !== null) {\n            positions.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normalx, normaly, normalz);\n            verticesPerFace++;\n        }\n        if (normalsPerFace !== 1) {\n            ctx.log(\"Error in normal of face \" + faceCounter);\n            return -1;\n        }\n        if (verticesPerFace !== 3) {\n            ctx.log(\"Error in positions of face \" + faceCounter);\n            return -1;\n        }\n        faceCounter++;\n    }\n    addMesh(ctx, positions, normals, colors);\n}\n\nlet nextGeometryId = 0;\n\nfunction addMesh(ctx, positions, normals, colors) {\n\n    const indices = new Int32Array(positions.length / 3);\n    for (let ni = 0, len = indices.length; ni < len; ni++) {\n        indices[ni] = ni;\n    }\n\n    normals = normals && normals.length > 0 ? normals : null;\n    colors = colors && colors.length > 0 ? colors : null;\n\n    if (!ctx.autoNormals && ctx.smoothNormals) {\n        faceToVertexNormals(positions, normals, {smoothNormalsAngleThreshold: ctx.smoothNormalsAngleThreshold});\n    }\n\n    const geometryId = \"\" + nextGeometryId++;\n    const meshId = \"\" + nextGeometryId++;\n    const entityId = \"\" + nextGeometryId++;\n\n    ctx.xktModel.createGeometry({\n        geometryId: geometryId,\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: (!ctx.autoNormals) ? normals : null,\n        colors: colors,\n        indices: indices\n    });\n\n    ctx.xktModel.createMesh({\n        meshId: meshId,\n        geometryId: geometryId,\n        color: colors ? null : [1, 1, 1],\n        metallic: 0.9,\n        roughness: 0.1\n    });\n\n    ctx.xktModel.createEntity({\n        entityId: entityId,\n        meshIds: [meshId]\n    });\n\n    ctx.xktModel.createMetaObject({\n        metaObjectId: entityId,\n        metaObjectType: \"Default\",\n        metaObjectName: \"STL Mesh\",\n        parentMetaObjectId: ctx.rootMetaObject.metaObjectId\n    });\n\n    ctx.stats.numGeometries++;\n    ctx.stats.numObjects++;\n    ctx.stats.numVertices += positions.length / 3;\n    ctx.stats.numTriangles += indices.length / 3;\n}\n\nfunction ensureString(buffer) {\n    if (typeof buffer !== 'string') {\n        return decodeText(new Uint8Array(buffer));\n    }\n    return buffer;\n}\n\nfunction ensureBinary(buffer) {\n    if (typeof buffer === 'string') {\n        const arrayBuffer = new Uint8Array(buffer.length);\n        for (let i = 0; i < buffer.length; i++) {\n            arrayBuffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n        return arrayBuffer.buffer || arrayBuffer;\n    } else {\n        return buffer;\n    }\n}\n\nfunction decodeText(array) {\n    if (typeof TextDecoder !== 'undefined') {\n        return new TextDecoder().decode(array);\n    }\n    let s = '';\n    for (let i = 0, il = array.length; i < il; i++) {\n        s += String.fromCharCode(array[i]); // Implicitly assumes little-endian.\n    }\n    return decodeURIComponent(escape(s));\n}\n\nexport {parseSTLIntoXKTModel};\n","import {math} from \"./math.js\";\n\n/**\n * Converts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\n * that don't share vertex array elements. Works by finding groups of vertices that have the same location and\n * averaging their normal vectors.\n *\n * @returns {{positions: Array, normals: *}}\n * @private\n */\nfunction faceToVertexNormals(positions, normals, options = {}) {\n    const smoothNormalsAngleThreshold = options.smoothNormalsAngleThreshold || 20;\n    const vertexMap = {};\n    const vertexNormals = [];\n    const vertexNormalAccum = {};\n    let acc;\n    let vx;\n    let vy;\n    let vz;\n    let key;\n    const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    const precision = 10 ** precisionPoints;\n    let posi;\n    let i;\n    let j;\n    let len;\n    let a;\n    let b;\n    let c;\n\n    for (i = 0, len = positions.length; i < len; i += 3) {\n\n        posi = i / 3;\n\n        vx = positions[i];\n        vy = positions[i + 1];\n        vz = positions[i + 2];\n\n        key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n\n        if (vertexMap[key] === undefined) {\n            vertexMap[key] = [posi];\n        } else {\n            vertexMap[key].push(posi);\n        }\n\n        const normal = math.normalizeVec3([normals[i], normals[i + 1], normals[i + 2]]);\n\n        vertexNormals[posi] = normal;\n\n        acc = math.vec4([normal[0], normal[1], normal[2], 1]);\n\n        vertexNormalAccum[posi] = acc;\n    }\n\n    for (key in vertexMap) {\n\n        if (vertexMap.hasOwnProperty(key)) {\n\n            const vertices = vertexMap[key];\n            const numVerts = vertices.length;\n\n            for (i = 0; i < numVerts; i++) {\n\n                const ii = vertices[i];\n\n                acc = vertexNormalAccum[ii];\n\n                for (j = 0; j < numVerts; j++) {\n\n                    if (i === j) {\n                        continue;\n                    }\n\n                    const jj = vertices[j];\n\n                    a = vertexNormals[ii];\n                    b = vertexNormals[jj];\n\n                    const angle = Math.abs(math.angleVec3(a, b) / math.DEGTORAD);\n\n                    if (angle < smoothNormalsAngleThreshold) {\n\n                        acc[0] += b[0];\n                        acc[1] += b[1];\n                        acc[2] += b[2];\n                        acc[3] += 1.0;\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0, len = normals.length; i < len; i += 3) {\n\n        acc = vertexNormalAccum[i / 3];\n\n        normals[i + 0] = acc[0] / acc[3];\n        normals[i + 1] = acc[1] / acc[3];\n        normals[i + 2] = acc[2] / acc[3];\n\n    }\n}\n\nexport {faceToVertexNormals};","/**\n * @desc Creates box-shaped triangle mesh geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a box-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildBoxGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const box = buildBoxGeometry({\n *     primitiveType: \"triangles\" // or \"lines\"\n *     center: [0,0,0],\n *     xSize: 1,  // Half-size on each axis\n *     ySize: 1,\n *     zSize: 1\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"boxGeometry\",\n *      primitiveType: box.primitiveType,\n *      positions: box.positions,\n *      normals: box.normals,\n *      indices: box.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redBoxMesh\",\n *      geometryId: \"boxGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redBox\",\n *      meshIds: [\"redBoxMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildBoxGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1.0]  Half-size on the X-axis.\n * @param {Number} [cfg.ySize=1.0]  Half-size on the Y-axis.\n * @param {Number} [cfg.zSize=1.0]  Half-size on the Z-axis.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildBoxGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let ySize = cfg.ySize || 1;\n    if (ySize < 0) {\n        console.error(\"negative ySize not allowed - will invert\");\n        ySize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const xmin = -xSize + centerX;\n    const ymin = -ySize + centerY;\n    const zmin = -zSize + centerZ;\n    const xmax = xSize + centerX;\n    const ymax = ySize + centerY;\n    const zmax = zSize + centerZ;\n\n    return {\n\n        primitiveType: \"triangles\",\n\n        // The vertices - eight for our cube, each\n        // one spanning three array elements for X,Y and Z\n\n        positions: [\n\n            // v0-v1-v2-v3 front\n            xmax, ymax, zmax,\n            xmin, ymax, zmax,\n            xmin, ymin, zmax,\n            xmax, ymin, zmax,\n\n            // v0-v3-v4-v1 right\n            xmax, ymax, zmax,\n            xmax, ymin, zmax,\n            xmax, ymin, zmin,\n            xmax, ymax, zmin,\n\n            // v0-v1-v6-v1 top\n            xmax, ymax, zmax,\n            xmax, ymax, zmin,\n            xmin, ymax, zmin,\n            xmin, ymax, zmax,\n\n            // v1-v6-v7-v2 left\n            xmin, ymax, zmax,\n            xmin, ymax, zmin,\n            xmin, ymin, zmin,\n            xmin, ymin, zmax,\n\n            // v7-v4-v3-v2 bottom\n            xmin, ymin, zmin,\n            xmax, ymin, zmin,\n            xmax, ymin, zmax,\n            xmin, ymin, zmax,\n\n            // v4-v7-v6-v1 back\n            xmax, ymin, zmin,\n            xmin, ymin, zmin,\n            xmin, ymax, zmin,\n            xmax, ymax, zmin\n        ],\n\n        // Normal vectors, one for each vertex\n        normals: [\n\n            // v0-v1-v2-v3 front\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n\n            // v0-v3-v4-v5 right\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n\n            // v0-v5-v6-v1 top\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n\n            // v1-v6-v7-v2 left\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n\n            // v7-v4-v3-v2 bottom\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n\n            // v4-v7-v6-v5 back\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1\n        ],\n\n        // UV coords\n        uv: [\n\n            // v0-v1-v2-v3 front\n            1, 0,\n            0, 0,\n            0, 1,\n            1, 1,\n\n            // v0-v3-v4-v1 right\n            0, 0,\n            0, 1,\n            1, 1,\n            1, 0,\n\n            // v0-v1-v6-v1 top\n            1, 1,\n            1, 0,\n            0, 0,\n            0, 1,\n\n            // v1-v6-v7-v2 left\n            1, 0,\n            0, 0,\n            0, 1,\n            1, 1,\n\n            // v7-v4-v3-v2 bottom\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0,\n\n            // v4-v7-v6-v1 back\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0\n        ],\n\n        // Indices - these organise the\n        // positions and uv texture coordinates\n        // into geometric primitives in accordance\n        // with the \"primitive\" parameter,\n        // in this case a set of three indices\n        // for each triangle.\n        //\n        // Note that each triangle is specified\n        // in counter-clockwise winding order.\n        //\n        // You can specify them in clockwise\n        // order if you configure the Modes\n        // node's frontFace flag as \"cw\", instead of\n        // the default \"ccw\".\n        indices: [\n            0, 1, 2,\n            0, 2, 3,\n            // front\n            4, 5, 6,\n            4, 6, 7,\n            // right\n            8, 9, 10,\n            8, 10, 11,\n            // top\n            12, 13, 14,\n            12, 14, 15,\n            // left\n            16, 17, 18,\n            16, 18, 19,\n            // bottom\n            20, 21, 22,\n            20, 22, 23\n        ]\n    };\n}\n\nexport {buildBoxGeometry};\n","/**\n * @desc Creates box-shaped line segment geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a box-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildBoxLinesGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const box = buildBoxLinesGeometry({\n *     center: [0,0,0],\n *     xSize: 1,  // Half-size on each axis\n *     ySize: 1,\n *     zSize: 1\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"boxGeometry\",\n *      primitiveType: box.primitiveType, // \"lines\"\n *      positions: box.positions,\n *      normals: box.normals,\n *      indices: box.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redBoxMesh\",\n *      geometryId: \"boxGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redBox\",\n *      meshIds: [\"redBoxMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildBoxLinesGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1.0]  Half-size on the X-axis.\n * @param {Number} [cfg.ySize=1.0]  Half-size on the Y-axis.\n * @param {Number} [cfg.zSize=1.0]  Half-size on the Z-axis.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildBoxLinesGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let ySize = cfg.ySize || 1;\n    if (ySize < 0) {\n        console.error(\"negative ySize not allowed - will invert\");\n        ySize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const xmin = -xSize + centerX;\n    const ymin = -ySize + centerY;\n    const zmin = -zSize + centerZ;\n    const xmax = xSize + centerX;\n    const ymax = ySize + centerY;\n    const zmax = zSize + centerZ;\n\n    return {\n        primitiveType: \"lines\",\n        positions: [\n            xmin, ymin, zmin,\n            xmin, ymin, zmax,\n            xmin, ymax, zmin,\n            xmin, ymax, zmax,\n            xmax, ymin, zmin,\n            xmax, ymin, zmax,\n            xmax, ymax, zmin,\n            xmax, ymax, zmax\n        ],\n        indices: [\n            0, 1,\n            1, 3,\n            3, 2,\n            2, 0,\n            4, 5,\n            5, 7,\n            7, 6,\n            6, 4,\n            0, 4,\n            1, 5,\n            2, 6,\n            3, 7\n        ]\n    }\n}\n\nexport {buildBoxLinesGeometry};\n","/**\n * @desc Creates cylinder-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a cylinder-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildCylinderGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const cylinder = buildCylinderGeometry({\n *      center: [0,0,0],\n *      radiusTop: 2.0,\n *      radiusBottom: 2.0,\n *      height: 5.0,\n *      radialSegments: 20,\n *      heightSegments: 1,\n *      openEnded: false\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"cylinderGeometry\",\n *      primitiveType: cylinder.primitiveType,\n *      positions: cylinder.positions,\n *      normals: cylinder.normals,\n *      indices: cylinder.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redCylinderMesh\",\n *      geometryId: \"cylinderGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redCylinder\",\n *      meshIds: [\"redCylinderMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildCylinderGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center] 3D point indicating the center position.\n * @param {Number} [cfg.radiusTop=1]  Radius of top.\n * @param {Number} [cfg.radiusBottom=1]  Radius of bottom.\n * @param {Number} [cfg.height=1] Height.\n * @param {Number} [cfg.radialSegments=60]  Number of horizontal segments.\n * @param {Number} [cfg.heightSegments=1]  Number of vertical segments.\n * @param {Boolean} [cfg.openEnded=false]  Whether or not the cylinder has solid caps on the ends.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildCylinderGeometry(cfg = {}) {\n\n    let radiusTop = cfg.radiusTop || 1;\n    if (radiusTop < 0) {\n        console.error(\"negative radiusTop not allowed - will invert\");\n        radiusTop *= -1;\n    }\n\n    let radiusBottom = cfg.radiusBottom || 1;\n    if (radiusBottom < 0) {\n        console.error(\"negative radiusBottom not allowed - will invert\");\n        radiusBottom *= -1;\n    }\n\n    let height = cfg.height || 1;\n    if (height < 0) {\n        console.error(\"negative height not allowed - will invert\");\n        height *= -1;\n    }\n\n    let radialSegments = cfg.radialSegments || 32;\n    if (radialSegments < 0) {\n        console.error(\"negative radialSegments not allowed - will invert\");\n        radialSegments *= -1;\n    }\n    if (radialSegments < 3) {\n        radialSegments = 3;\n    }\n\n    let heightSegments = cfg.heightSegments || 1;\n    if (heightSegments < 0) {\n        console.error(\"negative heightSegments not allowed - will invert\");\n        heightSegments *= -1;\n    }\n    if (heightSegments < 1) {\n        heightSegments = 1;\n    }\n\n    const openEnded = !!cfg.openEnded;\n\n    let center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const heightHalf = height / 2;\n    const heightLength = height / heightSegments;\n    const radialAngle = (2.0 * Math.PI / radialSegments);\n    const radialLength = 1.0 / radialSegments;\n    //var nextRadius = this._radiusBottom;\n    const radiusChange = (radiusTop - radiusBottom) / heightSegments;\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let h;\n    let i;\n\n    let x;\n    let z;\n\n    let currentRadius;\n    let currentHeight;\n\n    let first;\n    let second;\n\n    let startIndex;\n    let tu;\n    let tv;\n\n    // create vertices\n    const normalY = (90.0 - (Math.atan(height / (radiusBottom - radiusTop))) * 180 / Math.PI) / 90.0;\n\n    for (h = 0; h <= heightSegments; h++) {\n        currentRadius = radiusTop - h * radiusChange;\n        currentHeight = heightHalf - h * heightLength;\n\n        for (i = 0; i <= radialSegments; i++) {\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n\n            normals.push(currentRadius * x);\n            normals.push(normalY); //todo\n            normals.push(currentRadius * z);\n\n            uvs.push((i * radialLength));\n            uvs.push(h * 1 / heightSegments);\n\n            positions.push((currentRadius * x) + centerX);\n            positions.push((currentHeight) + centerY);\n            positions.push((currentRadius * z) + centerZ);\n        }\n    }\n\n    // create faces\n    for (h = 0; h < heightSegments; h++) {\n        for (i = 0; i <= radialSegments; i++) {\n\n            first = h * (radialSegments + 1) + i;\n            second = first + radialSegments;\n\n            indices.push(first);\n            indices.push(second);\n            indices.push(second + 1);\n\n            indices.push(first);\n            indices.push(second + 1);\n            indices.push(first + 1);\n        }\n    }\n\n    // create top cap\n    if (!openEnded && radiusTop > 0) {\n        startIndex = (positions.length / 3);\n\n        // top center\n        normals.push(0.0);\n        normals.push(1.0);\n        normals.push(0.0);\n\n        uvs.push(0.5);\n        uvs.push(0.5);\n\n        positions.push(0 + centerX);\n        positions.push(heightHalf + centerY);\n        positions.push(0 + centerZ);\n\n        // top triangle fan\n        for (i = 0; i <= radialSegments; i++) {\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n            tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n            tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n            normals.push(radiusTop * x);\n            normals.push(1.0);\n            normals.push(radiusTop * z);\n\n            uvs.push(tu);\n            uvs.push(tv);\n\n            positions.push((radiusTop * x) + centerX);\n            positions.push((heightHalf) + centerY);\n            positions.push((radiusTop * z) + centerZ);\n        }\n\n        for (i = 0; i < radialSegments; i++) {\n            center = startIndex;\n            first = startIndex + 1 + i;\n\n            indices.push(first);\n            indices.push(first + 1);\n            indices.push(center);\n        }\n    }\n\n    // create bottom cap\n    if (!openEnded && radiusBottom > 0) {\n\n        startIndex = (positions.length / 3);\n\n        // top center\n        normals.push(0.0);\n        normals.push(-1.0);\n        normals.push(0.0);\n\n        uvs.push(0.5);\n        uvs.push(0.5);\n\n        positions.push(0 + centerX);\n        positions.push(0 - heightHalf + centerY);\n        positions.push(0 + centerZ);\n\n        // top triangle fan\n        for (i = 0; i <= radialSegments; i++) {\n\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n\n            tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n            tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n            normals.push(radiusBottom * x);\n            normals.push(-1.0);\n            normals.push(radiusBottom * z);\n\n            uvs.push(tu);\n            uvs.push(tv);\n\n            positions.push((radiusBottom * x) + centerX);\n            positions.push((0 - heightHalf) + centerY);\n            positions.push((radiusBottom * z) + centerZ);\n        }\n\n        for (i = 0; i < radialSegments; i++) {\n\n            center = startIndex;\n            first = startIndex + 1 + i;\n\n            indices.push(center);\n            indices.push(first + 1);\n            indices.push(first);\n        }\n    }\n\n    return  {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\n\nexport {buildCylinderGeometry};\n","/**\n * @desc Creates grid-shaped geometry arrays..\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a grid-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildGridGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const grid = buildGridGeometry({\n *      size: 1000,\n *      divisions: 500\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"gridGeometry\",\n *      primitiveType: grid.primitiveType, // Will be \"lines\"\n *      positions: grid.positions,\n *      indices: grid.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redGridMesh\",\n *      geometryId: \"gridGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redGrid\",\n *      meshIds: [\"redGridMesh\"]\n * });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildGridGeometry\n * @param {*} [cfg] Configs\n * @param {Number} [cfg.size=1] Dimension on the X and Z-axis.\n * @param {Number} [cfg.divisions=1] Number of divisions on X and Z axis..\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildGridGeometry(cfg = {}) {\n\n    let size = cfg.size || 1;\n    if (size < 0) {\n        console.error(\"negative size not allowed - will invert\");\n        size *= -1;\n    }\n\n    let divisions = cfg.divisions || 1;\n    if (divisions < 0) {\n        console.error(\"negative divisions not allowed - will invert\");\n        divisions *= -1;\n    }\n    if (divisions < 1) {\n        divisions = 1;\n    }\n\n    size = size || 10;\n    divisions = divisions || 10;\n\n    const step = size / divisions;\n    const halfSize = size / 2;\n\n    const positions = [];\n    const indices = [];\n    let l = 0;\n\n    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\n        positions.push(-halfSize);\n        positions.push(0);\n        positions.push(k);\n\n        positions.push(halfSize);\n        positions.push(0);\n        positions.push(k);\n\n        positions.push(k);\n        positions.push(0);\n        positions.push(-halfSize);\n\n        positions.push(k);\n        positions.push(0);\n        positions.push(halfSize);\n\n        indices.push(l++);\n        indices.push(l++);\n        indices.push(l++);\n        indices.push(l++);\n    }\n\n    return {\n        primitiveType: \"lines\",\n        positions: positions,\n        indices: indices\n    };\n}\n\n\nexport {buildGridGeometry};\n","/**\n * @desc Creates plane-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a plane-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildPlaneGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const plane = buildPlaneGeometry({\n *      center: [0,0,0],\n *      xSize: 2,\n *      zSize: 2,\n *      xSegments: 10,\n *      zSegments: 10\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"planeGeometry\",\n *      primitiveType: plane.primitiveType, // Will be \"triangles\"\n *      positions: plane.positions,\n *      normals: plane.normals,\n *      indices: plane.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redPlaneMesh\",\n *      geometryId: \"planeGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redPlane\",\n *      meshIds: [\"redPlaneMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildPlaneGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1] Dimension on the X-axis.\n * @param {Number} [cfg.zSize=1] Dimension on the Z-axis.\n * @param {Number} [cfg.xSegments=1] Number of segments on the X-axis.\n * @param {Number} [cfg.zSegments=1] Number of segments on the Z-axis.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildPlaneGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    let xSegments = cfg.xSegments || 1;\n    if (xSegments < 0) {\n        console.error(\"negative xSegments not allowed - will invert\");\n        xSegments *= -1;\n    }\n    if (xSegments < 1) {\n        xSegments = 1;\n    }\n\n    let zSegments = cfg.xSegments || 1;\n    if (zSegments < 0) {\n        console.error(\"negative zSegments not allowed - will invert\");\n        zSegments *= -1;\n    }\n    if (zSegments < 1) {\n        zSegments = 1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const halfWidth = xSize / 2;\n    const halfHeight = zSize / 2;\n\n    const planeX = Math.floor(xSegments) || 1;\n    const planeZ = Math.floor(zSegments) || 1;\n\n    const planeX1 = planeX + 1;\n    const planeZ1 = planeZ + 1;\n\n    const segmentWidth = xSize / planeX;\n    const segmentHeight = zSize / planeZ;\n\n    const positions = new Float32Array(planeX1 * planeZ1 * 3);\n    const normals = new Float32Array(planeX1 * planeZ1 * 3);\n    const uvs = new Float32Array(planeX1 * planeZ1 * 2);\n\n    let offset = 0;\n    let offset2 = 0;\n\n    let iz;\n    let ix;\n    let x;\n    let a;\n    let b;\n    let c;\n    let d;\n\n    for (iz = 0; iz < planeZ1; iz++) {\n\n        const z = iz * segmentHeight - halfHeight;\n\n        for (ix = 0; ix < planeX1; ix++) {\n\n            x = ix * segmentWidth - halfWidth;\n\n            positions[offset] = x + centerX;\n            positions[offset + 1] = centerY;\n            positions[offset + 2] = -z + centerZ;\n\n            normals[offset + 2] = -1;\n\n            uvs[offset2] = (ix) / planeX;\n            uvs[offset2 + 1] = ((planeZ - iz) / planeZ);\n\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n\n    offset = 0;\n\n    const indices = new ((positions.length / 3) > 65535 ? Uint32Array : Uint16Array)(planeX * planeZ * 6);\n\n    for (iz = 0; iz < planeZ; iz++) {\n\n        for (ix = 0; ix < planeX; ix++) {\n\n            a = ix + planeX1 * iz;\n            b = ix + planeX1 * (iz + 1);\n            c = (ix + 1) + planeX1 * (iz + 1);\n            d = (ix + 1) + planeX1 * iz;\n\n            indices[offset] = d;\n            indices[offset + 1] = b;\n            indices[offset + 2] = a;\n\n            indices[offset + 3] = d;\n            indices[offset + 4] = c;\n            indices[offset + 5] = b;\n\n            offset += 6;\n        }\n    }\n\n    return {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\nexport {buildPlaneGeometry};\n","/**\n * @desc Creates sphere-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a sphere-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildSphereGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const sphere = buildSphereGeometry({\n *      center: [0,0,0],\n *      radius: 1.5,\n *      heightSegments: 60,\n *      widthSegments: 60\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"sphereGeometry\",\n *      primitiveType: sphere.primitiveType, // Will be \"triangles\"\n *      positions: sphere.positions,\n *      normals: sphere.normals,\n *      indices: sphere.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redSphereMesh\",\n *      geometryId: \"sphereGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n *const xktEntity = xktModel.createEntity({\n *      entityId: \"redSphere\",\n *      meshIds: [\"redSphereMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildSphereGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.radius=1]  Radius.\n * @param {Number} [cfg.heightSegments=24] Number of latitudinal bands.\n * @param  {Number} [cfg.widthSegments=18] Number of longitudinal bands.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildSphereGeometry(cfg = {}) {\n\n    const lod = cfg.lod || 1;\n\n    const centerX = cfg.center ? cfg.center[0] : 0;\n    const centerY = cfg.center ? cfg.center[1] : 0;\n    const centerZ = cfg.center ? cfg.center[2] : 0;\n\n    let radius = cfg.radius || 1;\n    if (radius < 0) {\n        console.error(\"negative radius not allowed - will invert\");\n        radius *= -1;\n    }\n\n    let heightSegments = cfg.heightSegments || 18;\n    if (heightSegments < 0) {\n        console.error(\"negative heightSegments not allowed - will invert\");\n        heightSegments *= -1;\n    }\n    heightSegments = Math.floor(lod * heightSegments);\n    if (heightSegments < 18) {\n        heightSegments = 18;\n    }\n\n    let widthSegments = cfg.widthSegments || 18;\n    if (widthSegments < 0) {\n        console.error(\"negative widthSegments not allowed - will invert\");\n        widthSegments *= -1;\n    }\n    widthSegments = Math.floor(lod * widthSegments);\n    if (widthSegments < 18) {\n        widthSegments = 18;\n    }\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let i;\n    let j;\n\n    let theta;\n    let sinTheta;\n    let cosTheta;\n\n    let phi;\n    let sinPhi;\n    let cosPhi;\n\n    let x;\n    let y;\n    let z;\n\n    let u;\n    let v;\n\n    let first;\n    let second;\n\n    for (i = 0; i <= heightSegments; i++) {\n\n        theta = i * Math.PI / heightSegments;\n        sinTheta = Math.sin(theta);\n        cosTheta = Math.cos(theta);\n\n        for (j = 0; j <= widthSegments; j++) {\n\n            phi = j * 2 * Math.PI / widthSegments;\n            sinPhi = Math.sin(phi);\n            cosPhi = Math.cos(phi);\n\n            x = cosPhi * sinTheta;\n            y = cosTheta;\n            z = sinPhi * sinTheta;\n            u = 1.0 - j / widthSegments;\n            v = i / heightSegments;\n\n            normals.push(x);\n            normals.push(y);\n            normals.push(z);\n\n            uvs.push(u);\n            uvs.push(v);\n\n            positions.push(centerX + radius * x);\n            positions.push(centerY + radius * y);\n            positions.push(centerZ + radius * z);\n        }\n    }\n\n    for (i = 0; i < heightSegments; i++) {\n        for (j = 0; j < widthSegments; j++) {\n\n            first = (i * (widthSegments + 1)) + j;\n            second = first + widthSegments + 1;\n\n            indices.push(first + 1);\n            indices.push(second + 1);\n            indices.push(second);\n            indices.push(first + 1);\n            indices.push(second);\n            indices.push(first);\n        }\n    }\n\n    return {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\nexport {buildSphereGeometry};\n","import {math} from '../lib/math.js';\n\n/**\n * @desc Creates torus-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a torus-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildTorusGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const torus = buildTorusGeometry({\n *      center: [0,0,0],\n *      radius: 1.0,\n *      tube: 0.5,\n *      radialSegments: 32,\n *      tubeSegments: 24,\n *      arc: Math.PI * 2.0\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"torusGeometry\",\n *      primitiveType: torus.primitiveType, // Will be \"triangles\"\n *      positions: torus.positions,\n *      normals: torus.normals,\n *      indices: torus.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redTorusMesh\",\n *      geometryId: \"torusGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redTorus\",\n *      meshIds: [\"redTorusMesh\"]\n * });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildTorusGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center] 3D point indicating the center position.\n * @param {Number} [cfg.radius=1] The overall radius.\n * @param {Number} [cfg.tube=0.3] The tube radius.\n * @param {Number} [cfg.radialSegments=32] The number of radial segments.\n * @param {Number} [cfg.tubeSegments=24] The number of tubular segments.\n * @param {Number} [cfg.arc=Math.PI*0.5] The length of the arc in radians, where Math.PI*2 is a closed torus.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildTorusGeometry(cfg = {}) {\n\n    let radius = cfg.radius || 1;\n    if (radius < 0) {\n        console.error(\"negative radius not allowed - will invert\");\n        radius *= -1;\n    }\n    radius *= 0.5;\n\n    let tube = cfg.tube || 0.3;\n    if (tube < 0) {\n        console.error(\"negative tube not allowed - will invert\");\n        tube *= -1;\n    }\n\n    let radialSegments = cfg.radialSegments || 32;\n    if (radialSegments < 0) {\n        console.error(\"negative radialSegments not allowed - will invert\");\n        radialSegments *= -1;\n    }\n    if (radialSegments < 4) {\n        radialSegments = 4;\n    }\n\n    let tubeSegments = cfg.tubeSegments || 24;\n    if (tubeSegments < 0) {\n        console.error(\"negative tubeSegments not allowed - will invert\");\n        tubeSegments *= -1;\n    }\n    if (tubeSegments < 4) {\n        tubeSegments = 4;\n    }\n\n    let arc = cfg.arc || Math.PI * 2;\n    if (arc < 0) {\n        console.warn(\"negative arc not allowed - will invert\");\n        arc *= -1;\n    }\n    if (arc > 360) {\n        arc = 360;\n    }\n\n    const center = cfg.center;\n    let centerX = center ? center[0] : 0;\n    let centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let u;\n    let v;\n    let x;\n    let y;\n    let z;\n    let vec;\n\n    let i;\n    let j;\n\n    for (j = 0; j <= tubeSegments; j++) {\n        for (i = 0; i <= radialSegments; i++) {\n\n            u = i / radialSegments * arc;\n            v = 0.785398 + (j / tubeSegments * Math.PI * 2);\n\n            centerX = radius * Math.cos(u);\n            centerY = radius * Math.sin(u);\n\n            x = (radius + tube * Math.cos(v)) * Math.cos(u);\n            y = (radius + tube * Math.cos(v)) * Math.sin(u);\n            z = tube * Math.sin(v);\n\n            positions.push(x + centerX);\n            positions.push(y + centerY);\n            positions.push(z + centerZ);\n\n            uvs.push(1 - (i / radialSegments));\n            uvs.push((j / tubeSegments));\n\n            vec = math.normalizeVec3(math.subVec3([x, y, z], [centerX, centerY, centerZ], []), []);\n\n            normals.push(vec[0]);\n            normals.push(vec[1]);\n            normals.push(vec[2]);\n        }\n    }\n\n    let a;\n    let b;\n    let c;\n    let d;\n\n    for (j = 1; j <= tubeSegments; j++) {\n        for (i = 1; i <= radialSegments; i++) {\n\n            a = (radialSegments + 1) * j + i - 1;\n            b = (radialSegments + 1) * (j - 1) + i - 1;\n            c = (radialSegments + 1) * (j - 1) + i;\n            d = (radialSegments + 1) * j + i;\n\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n\n            indices.push(c);\n            indices.push(d);\n            indices.push(a);\n        }\n    }\n\n    return {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\nexport {buildTorusGeometry};\n","const letters = {\n    ' ': {width: 16, points: []},\n    '!': {\n        width: 10, points: [\n            [5, 21],\n            [5, 7],\n            [-1, -1],\n            [5, 2],\n            [4, 1],\n            [5, 0],\n            [6, 1],\n            [5, 2]\n        ]\n    },\n    '\"': {\n        width: 16, points: [\n            [4, 21],\n            [4, 14],\n            [-1, -1],\n            [12, 21],\n            [12, 14]\n        ]\n    },\n    '#': {\n        width: 21, points: [\n            [11, 25],\n            [4, -7],\n            [-1, -1],\n            [17, 25],\n            [10, -7],\n            [-1, -1],\n            [4, 12],\n            [18, 12],\n            [-1, -1],\n            [3, 6],\n            [17, 6]\n        ]\n    },\n    '$': {\n        width: 20, points: [\n            [8, 25],\n            [8, -4],\n            [-1, -1],\n            [12, 25],\n            [12, -4],\n            [-1, -1],\n            [17, 18],\n            [15, 20],\n            [12, 21],\n            [8, 21],\n            [5, 20],\n            [3, 18],\n            [3, 16],\n            [4, 14],\n            [5, 13],\n            [7, 12],\n            [13, 10],\n            [15, 9],\n            [16, 8],\n            [17, 6],\n            [17, 3],\n            [15, 1],\n            [12, 0],\n            [8, 0],\n            [5, 1],\n            [3, 3]\n        ]\n    },\n    '%': {\n        width: 24, points: [\n            [21, 21],\n            [3, 0],\n            [-1, -1],\n            [8, 21],\n            [10, 19],\n            [10, 17],\n            [9, 15],\n            [7, 14],\n            [5, 14],\n            [3, 16],\n            [3, 18],\n            [4, 20],\n            [6, 21],\n            [8, 21],\n            [10, 20],\n            [13, 19],\n            [16, 19],\n            [19, 20],\n            [21, 21],\n            [-1, -1],\n            [17, 7],\n            [15, 6],\n            [14, 4],\n            [14, 2],\n            [16, 0],\n            [18, 0],\n            [20, 1],\n            [21, 3],\n            [21, 5],\n            [19, 7],\n            [17, 7]\n        ]\n    },\n    '&': {\n        width: 26, points: [\n            [23, 12],\n            [23, 13],\n            [22, 14],\n            [21, 14],\n            [20, 13],\n            [19, 11],\n            [17, 6],\n            [15, 3],\n            [13, 1],\n            [11, 0],\n            [7, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4],\n            [3, 6],\n            [4, 8],\n            [5, 9],\n            [12, 13],\n            [13, 14],\n            [14, 16],\n            [14, 18],\n            [13, 20],\n            [11, 21],\n            [9, 20],\n            [8, 18],\n            [8, 16],\n            [9, 13],\n            [11, 10],\n            [16, 3],\n            [18, 1],\n            [20, 0],\n            [22, 0],\n            [23, 1],\n            [23, 2]\n        ]\n    },\n    '\\'': {\n        width: 10, points: [\n            [5, 19],\n            [4, 20],\n            [5, 21],\n            [6, 20],\n            [6, 18],\n            [5, 16],\n            [4, 15]\n        ]\n    },\n    '(': {\n        width: 14, points: [\n            [11, 25],\n            [9, 23],\n            [7, 20],\n            [5, 16],\n            [4, 11],\n            [4, 7],\n            [5, 2],\n            [7, -2],\n            [9, -5],\n            [11, -7]\n        ]\n    },\n    ')': {\n        width: 14, points: [\n            [3, 25],\n            [5, 23],\n            [7, 20],\n            [9, 16],\n            [10, 11],\n            [10, 7],\n            [9, 2],\n            [7, -2],\n            [5, -5],\n            [3, -7]\n        ]\n    },\n    '*': {\n        width: 16, points: [\n            [8, 21],\n            [8, 9],\n            [-1, -1],\n            [3, 18],\n            [13, 12],\n            [-1, -1],\n            [13, 18],\n            [3, 12]\n        ]\n    },\n    '+': {\n        width: 26, points: [\n            [13, 18],\n            [13, 0],\n            [-1, -1],\n            [4, 9],\n            [22, 9]\n        ]\n    },\n    ',': {\n        width: 10, points: [\n            [6, 1],\n            [5, 0],\n            [4, 1],\n            [5, 2],\n            [6, 1],\n            [6, -1],\n            [5, -3],\n            [4, -4]\n        ]\n    },\n    '-': {\n        width: 26, points: [\n            [4, 9],\n            [22, 9]\n        ]\n    },\n    '.': {\n        width: 10, points: [\n            [5, 2],\n            [4, 1],\n            [5, 0],\n            [6, 1],\n            [5, 2]\n        ]\n    },\n    '/': {\n        width: 22, points: [\n            [20, 25],\n            [2, -7]\n        ]\n    },\n    '0': {\n        width: 20, points: [\n            [9, 21],\n            [6, 20],\n            [4, 17],\n            [3, 12],\n            [3, 9],\n            [4, 4],\n            [6, 1],\n            [9, 0],\n            [11, 0],\n            [14, 1],\n            [16, 4],\n            [17, 9],\n            [17, 12],\n            [16, 17],\n            [14, 20],\n            [11, 21],\n            [9, 21]\n        ]\n    },\n    '1': {\n        width: 20, points: [\n            [6, 17],\n            [8, 18],\n            [11, 21],\n            [11, 0]\n        ]\n    },\n    '2': {\n        width: 20, points: [\n            [4, 16],\n            [4, 17],\n            [5, 19],\n            [6, 20],\n            [8, 21],\n            [12, 21],\n            [14, 20],\n            [15, 19],\n            [16, 17],\n            [16, 15],\n            [15, 13],\n            [13, 10],\n            [3, 0],\n            [17, 0]\n        ]\n    },\n    '3': {\n        width: 20, points: [\n            [5, 21],\n            [16, 21],\n            [10, 13],\n            [13, 13],\n            [15, 12],\n            [16, 11],\n            [17, 8],\n            [17, 6],\n            [16, 3],\n            [14, 1],\n            [11, 0],\n            [8, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4]\n        ]\n    },\n    '4': {\n        width: 20, points: [\n            [13, 21],\n            [3, 7],\n            [18, 7],\n            [-1, -1],\n            [13, 21],\n            [13, 0]\n        ]\n    },\n    '5': {\n        width: 20, points: [\n            [15, 21],\n            [5, 21],\n            [4, 12],\n            [5, 13],\n            [8, 14],\n            [11, 14],\n            [14, 13],\n            [16, 11],\n            [17, 8],\n            [17, 6],\n            [16, 3],\n            [14, 1],\n            [11, 0],\n            [8, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4]\n        ]\n    },\n    '6': {\n        width: 20, points: [\n            [16, 18],\n            [15, 20],\n            [12, 21],\n            [10, 21],\n            [7, 20],\n            [5, 17],\n            [4, 12],\n            [4, 7],\n            [5, 3],\n            [7, 1],\n            [10, 0],\n            [11, 0],\n            [14, 1],\n            [16, 3],\n            [17, 6],\n            [17, 7],\n            [16, 10],\n            [14, 12],\n            [11, 13],\n            [10, 13],\n            [7, 12],\n            [5, 10],\n            [4, 7]\n        ]\n    },\n    '7': {\n        width: 20, points: [\n            [17, 21],\n            [7, 0],\n            [-1, -1],\n            [3, 21],\n            [17, 21]\n        ]\n    },\n    '8': {\n        width: 20, points: [\n            [8, 21],\n            [5, 20],\n            [4, 18],\n            [4, 16],\n            [5, 14],\n            [7, 13],\n            [11, 12],\n            [14, 11],\n            [16, 9],\n            [17, 7],\n            [17, 4],\n            [16, 2],\n            [15, 1],\n            [12, 0],\n            [8, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4],\n            [3, 7],\n            [4, 9],\n            [6, 11],\n            [9, 12],\n            [13, 13],\n            [15, 14],\n            [16, 16],\n            [16, 18],\n            [15, 20],\n            [12, 21],\n            [8, 21]\n        ]\n    },\n    '9': {\n        width: 20, points: [\n            [16, 14],\n            [15, 11],\n            [13, 9],\n            [10, 8],\n            [9, 8],\n            [6, 9],\n            [4, 11],\n            [3, 14],\n            [3, 15],\n            [4, 18],\n            [6, 20],\n            [9, 21],\n            [10, 21],\n            [13, 20],\n            [15, 18],\n            [16, 14],\n            [16, 9],\n            [15, 4],\n            [13, 1],\n            [10, 0],\n            [8, 0],\n            [5, 1],\n            [4, 3]\n        ]\n    },\n    ':': {\n        width: 10, points: [\n            [5, 14],\n            [4, 13],\n            [5, 12],\n            [6, 13],\n            [5, 14],\n            [-1, -1],\n            [5, 2],\n            [4, 1],\n            [5, 0],\n            [6, 1],\n            [5, 2]\n        ]\n    },\n    ';': {\n        width: 10, points: [\n            [5, 14],\n            [4, 13],\n            [5, 12],\n            [6, 13],\n            [5, 14],\n            [-1, -1],\n            [6, 1],\n            [5, 0],\n            [4, 1],\n            [5, 2],\n            [6, 1],\n            [6, -1],\n            [5, -3],\n            [4, -4]\n        ]\n    },\n    '<': {\n        width: 24, points: [\n            [20, 18],\n            [4, 9],\n            [20, 0]\n        ]\n    },\n    '=': {\n        width: 26, points: [\n            [4, 12],\n            [22, 12],\n            [-1, -1],\n            [4, 6],\n            [22, 6]\n        ]\n    },\n    '>': {\n        width: 24, points: [\n            [4, 18],\n            [20, 9],\n            [4, 0]\n        ]\n    },\n    '?': {\n        width: 18, points: [\n            [3, 16],\n            [3, 17],\n            [4, 19],\n            [5, 20],\n            [7, 21],\n            [11, 21],\n            [13, 20],\n            [14, 19],\n            [15, 17],\n            [15, 15],\n            [14, 13],\n            [13, 12],\n            [9, 10],\n            [9, 7],\n            [-1, -1],\n            [9, 2],\n            [8, 1],\n            [9, 0],\n            [10, 1],\n            [9, 2]\n        ]\n    },\n    '@': {\n        width: 27, points: [\n            [18, 13],\n            [17, 15],\n            [15, 16],\n            [12, 16],\n            [10, 15],\n            [9, 14],\n            [8, 11],\n            [8, 8],\n            [9, 6],\n            [11, 5],\n            [14, 5],\n            [16, 6],\n            [17, 8],\n            [-1, -1],\n            [12, 16],\n            [10, 14],\n            [9, 11],\n            [9, 8],\n            [10, 6],\n            [11, 5],\n            [-1, -1],\n            [18, 16],\n            [17, 8],\n            [17, 6],\n            [19, 5],\n            [21, 5],\n            [23, 7],\n            [24, 10],\n            [24, 12],\n            [23, 15],\n            [22, 17],\n            [20, 19],\n            [18, 20],\n            [15, 21],\n            [12, 21],\n            [9, 20],\n            [7, 19],\n            [5, 17],\n            [4, 15],\n            [3, 12],\n            [3, 9],\n            [4, 6],\n            [5, 4],\n            [7, 2],\n            [9, 1],\n            [12, 0],\n            [15, 0],\n            [18, 1],\n            [20, 2],\n            [21, 3],\n            [-1, -1],\n            [19, 16],\n            [18, 8],\n            [18, 6],\n            [19, 5]\n        ]\n    },\n    'A': {\n        width: 18, points: [\n            [9, 21],\n            [1, 0],\n            [-1, -1],\n            [9, 21],\n            [17, 0],\n            [-1, -1],\n            [4, 7],\n            [14, 7]\n        ]\n    },\n    'B': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [13, 21],\n            [16, 20],\n            [17, 19],\n            [18, 17],\n            [18, 15],\n            [17, 13],\n            [16, 12],\n            [13, 11],\n            [-1, -1],\n            [4, 11],\n            [13, 11],\n            [16, 10],\n            [17, 9],\n            [18, 7],\n            [18, 4],\n            [17, 2],\n            [16, 1],\n            [13, 0],\n            [4, 0]\n        ]\n    },\n    'C': {\n        width: 21, points: [\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5]\n        ]\n    },\n    'D': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [11, 21],\n            [14, 20],\n            [16, 18],\n            [17, 16],\n            [18, 13],\n            [18, 8],\n            [17, 5],\n            [16, 3],\n            [14, 1],\n            [11, 0],\n            [4, 0]\n        ]\n    },\n    'E': {\n        width: 19, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [17, 21],\n            [-1, -1],\n            [4, 11],\n            [12, 11],\n            [-1, -1],\n            [4, 0],\n            [17, 0]\n        ]\n    },\n    'F': {\n        width: 18, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [17, 21],\n            [-1, -1],\n            [4, 11],\n            [12, 11]\n        ]\n    },\n    'G': {\n        width: 21, points: [\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5],\n            [18, 8],\n            [-1, -1],\n            [13, 8],\n            [18, 8]\n        ]\n    },\n    'H': {\n        width: 22, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [18, 21],\n            [18, 0],\n            [-1, -1],\n            [4, 11],\n            [18, 11]\n        ]\n    },\n    'I': {\n        width: 8, points: [\n            [4, 21],\n            [4, 0]\n        ]\n    },\n    'J': {\n        width: 16, points: [\n            [12, 21],\n            [12, 5],\n            [11, 2],\n            [10, 1],\n            [8, 0],\n            [6, 0],\n            [4, 1],\n            [3, 2],\n            [2, 5],\n            [2, 7]\n        ]\n    },\n    'K': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [18, 21],\n            [4, 7],\n            [-1, -1],\n            [9, 12],\n            [18, 0]\n        ]\n    },\n    'L': {\n        width: 17, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 0],\n            [16, 0]\n        ]\n    },\n    'M': {\n        width: 24, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [12, 0],\n            [-1, -1],\n            [20, 21],\n            [12, 0],\n            [-1, -1],\n            [20, 21],\n            [20, 0]\n        ]\n    },\n    'N': {\n        width: 22, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [18, 0],\n            [-1, -1],\n            [18, 21],\n            [18, 0]\n        ]\n    },\n    'O': {\n        width: 22, points: [\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5],\n            [19, 8],\n            [19, 13],\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21]\n        ]\n    },\n    'P': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [13, 21],\n            [16, 20],\n            [17, 19],\n            [18, 17],\n            [18, 14],\n            [17, 12],\n            [16, 11],\n            [13, 10],\n            [4, 10]\n        ]\n    },\n    'Q': {\n        width: 22, points: [\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5],\n            [19, 8],\n            [19, 13],\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21],\n            [-1, -1],\n            [12, 4],\n            [18, -2]\n        ]\n    },\n    'R': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [13, 21],\n            [16, 20],\n            [17, 19],\n            [18, 17],\n            [18, 15],\n            [17, 13],\n            [16, 12],\n            [13, 11],\n            [4, 11],\n            [-1, -1],\n            [11, 11],\n            [18, 0]\n        ]\n    },\n    'S': {\n        width: 20, points: [\n            [17, 18],\n            [15, 20],\n            [12, 21],\n            [8, 21],\n            [5, 20],\n            [3, 18],\n            [3, 16],\n            [4, 14],\n            [5, 13],\n            [7, 12],\n            [13, 10],\n            [15, 9],\n            [16, 8],\n            [17, 6],\n            [17, 3],\n            [15, 1],\n            [12, 0],\n            [8, 0],\n            [5, 1],\n            [3, 3]\n        ]\n    },\n    'T': {\n        width: 16, points: [\n            [8, 21],\n            [8, 0],\n            [-1, -1],\n            [1, 21],\n            [15, 21]\n        ]\n    },\n    'U': {\n        width: 22, points: [\n            [4, 21],\n            [4, 6],\n            [5, 3],\n            [7, 1],\n            [10, 0],\n            [12, 0],\n            [15, 1],\n            [17, 3],\n            [18, 6],\n            [18, 21]\n        ]\n    },\n    'V': {\n        width: 18, points: [\n            [1, 21],\n            [9, 0],\n            [-1, -1],\n            [17, 21],\n            [9, 0]\n        ]\n    },\n    'W': {\n        width: 24, points: [\n            [2, 21],\n            [7, 0],\n            [-1, -1],\n            [12, 21],\n            [7, 0],\n            [-1, -1],\n            [12, 21],\n            [17, 0],\n            [-1, -1],\n            [22, 21],\n            [17, 0]\n        ]\n    },\n    'X': {\n        width: 20, points: [\n            [3, 21],\n            [17, 0],\n            [-1, -1],\n            [17, 21],\n            [3, 0]\n        ]\n    },\n    'Y': {\n        width: 18, points: [\n            [1, 21],\n            [9, 11],\n            [9, 0],\n            [-1, -1],\n            [17, 21],\n            [9, 11]\n        ]\n    },\n    'Z': {\n        width: 20, points: [\n            [17, 21],\n            [3, 0],\n            [-1, -1],\n            [3, 21],\n            [17, 21],\n            [-1, -1],\n            [3, 0],\n            [17, 0]\n        ]\n    },\n    '[': {\n        width: 14, points: [\n            [4, 25],\n            [4, -7],\n            [-1, -1],\n            [5, 25],\n            [5, -7],\n            [-1, -1],\n            [4, 25],\n            [11, 25],\n            [-1, -1],\n            [4, -7],\n            [11, -7]\n        ]\n    },\n    '\\\\': {\n        width: 14, points: [\n            [0, 21],\n            [14, -3]\n        ]\n    },\n    ']': {\n        width: 14, points: [\n            [9, 25],\n            [9, -7],\n            [-1, -1],\n            [10, 25],\n            [10, -7],\n            [-1, -1],\n            [3, 25],\n            [10, 25],\n            [-1, -1],\n            [3, -7],\n            [10, -7]\n        ]\n    },\n    '^': {\n        width: 16, points: [\n            [6, 15],\n            [8, 18],\n            [10, 15],\n            [-1, -1],\n            [3, 12],\n            [8, 17],\n            [13, 12],\n            [-1, -1],\n            [8, 17],\n            [8, 0]\n        ]\n    },\n    '_': {\n        width: 16, points: [\n            [0, -2],\n            [16, -2]\n        ]\n    },\n    '`': {\n        width: 10, points: [\n            [6, 21],\n            [5, 20],\n            [4, 18],\n            [4, 16],\n            [5, 15],\n            [6, 16],\n            [5, 17]\n        ]\n    },\n    'a': {\n        width: 19, points: [\n            [15, 14],\n            [15, 0],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'b': {\n        width: 19, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 11],\n            [6, 13],\n            [8, 14],\n            [11, 14],\n            [13, 13],\n            [15, 11],\n            [16, 8],\n            [16, 6],\n            [15, 3],\n            [13, 1],\n            [11, 0],\n            [8, 0],\n            [6, 1],\n            [4, 3]\n        ]\n    },\n    'c': {\n        width: 18, points: [\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'd': {\n        width: 19, points: [\n            [15, 21],\n            [15, 0],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'e': {\n        width: 18, points: [\n            [3, 8],\n            [15, 8],\n            [15, 10],\n            [14, 12],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'f': {\n        width: 12, points: [\n            [10, 21],\n            [8, 21],\n            [6, 20],\n            [5, 17],\n            [5, 0],\n            [-1, -1],\n            [2, 14],\n            [9, 14]\n        ]\n    },\n    'g': {\n        width: 19, points: [\n            [15, 14],\n            [15, -2],\n            [14, -5],\n            [13, -6],\n            [11, -7],\n            [8, -7],\n            [6, -6],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'h': {\n        width: 19, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 10],\n            [7, 13],\n            [9, 14],\n            [12, 14],\n            [14, 13],\n            [15, 10],\n            [15, 0]\n        ]\n    },\n    'i': {\n        width: 8, points: [\n            [3, 21],\n            [4, 20],\n            [5, 21],\n            [4, 22],\n            [3, 21],\n            [-1, -1],\n            [4, 14],\n            [4, 0]\n        ]\n    },\n    'j': {\n        width: 10, points: [\n            [5, 21],\n            [6, 20],\n            [7, 21],\n            [6, 22],\n            [5, 21],\n            [-1, -1],\n            [6, 14],\n            [6, -3],\n            [5, -6],\n            [3, -7],\n            [1, -7]\n        ]\n    },\n    'k': {\n        width: 17, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [14, 14],\n            [4, 4],\n            [-1, -1],\n            [8, 8],\n            [15, 0]\n        ]\n    },\n    'l': {\n        width: 8, points: [\n            [4, 21],\n            [4, 0]\n        ]\n    },\n    'm': {\n        width: 30, points: [\n            [4, 14],\n            [4, 0],\n            [-1, -1],\n            [4, 10],\n            [7, 13],\n            [9, 14],\n            [12, 14],\n            [14, 13],\n            [15, 10],\n            [15, 0],\n            [-1, -1],\n            [15, 10],\n            [18, 13],\n            [20, 14],\n            [23, 14],\n            [25, 13],\n            [26, 10],\n            [26, 0]\n        ]\n    },\n    'n': {\n        width: 19, points: [\n            [4, 14],\n            [4, 0],\n            [-1, -1],\n            [4, 10],\n            [7, 13],\n            [9, 14],\n            [12, 14],\n            [14, 13],\n            [15, 10],\n            [15, 0]\n        ]\n    },\n    'o': {\n        width: 19, points: [\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3],\n            [16, 6],\n            [16, 8],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14]\n        ]\n    },\n    'p': {\n        width: 19, points: [\n            [4, 14],\n            [4, -7],\n            [-1, -1],\n            [4, 11],\n            [6, 13],\n            [8, 14],\n            [11, 14],\n            [13, 13],\n            [15, 11],\n            [16, 8],\n            [16, 6],\n            [15, 3],\n            [13, 1],\n            [11, 0],\n            [8, 0],\n            [6, 1],\n            [4, 3]\n        ]\n    },\n    'q': {\n        width: 19, points: [\n            [15, 14],\n            [15, -7],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'r': {\n        width: 13, points: [\n            [4, 14],\n            [4, 0],\n            [-1, -1],\n            [4, 8],\n            [5, 11],\n            [7, 13],\n            [9, 14],\n            [12, 14]\n        ]\n    },\n    's': {\n        width: 17, points: [\n            [14, 11],\n            [13, 13],\n            [10, 14],\n            [7, 14],\n            [4, 13],\n            [3, 11],\n            [4, 9],\n            [6, 8],\n            [11, 7],\n            [13, 6],\n            [14, 4],\n            [14, 3],\n            [13, 1],\n            [10, 0],\n            [7, 0],\n            [4, 1],\n            [3, 3]\n        ]\n    },\n    't': {\n        width: 12, points: [\n            [5, 21],\n            [5, 4],\n            [6, 1],\n            [8, 0],\n            [10, 0],\n            [-1, -1],\n            [2, 14],\n            [9, 14]\n        ]\n    },\n    'u': {\n        width: 19, points: [\n            [4, 14],\n            [4, 4],\n            [5, 1],\n            [7, 0],\n            [10, 0],\n            [12, 1],\n            [15, 4],\n            [-1, -1],\n            [15, 14],\n            [15, 0]\n        ]\n    },\n    'v': {\n        width: 16, points: [\n            [2, 14],\n            [8, 0],\n            [-1, -1],\n            [14, 14],\n            [8, 0]\n        ]\n    },\n    'w': {\n        width: 22, points: [\n            [3, 14],\n            [7, 0],\n            [-1, -1],\n            [11, 14],\n            [7, 0],\n            [-1, -1],\n            [11, 14],\n            [15, 0],\n            [-1, -1],\n            [19, 14],\n            [15, 0]\n        ]\n    },\n    'x': {\n        width: 17, points: [\n            [3, 14],\n            [14, 0],\n            [-1, -1],\n            [14, 14],\n            [3, 0]\n        ]\n    },\n    'y': {\n        width: 16, points: [\n            [2, 14],\n            [8, 0],\n            [-1, -1],\n            [14, 14],\n            [8, 0],\n            [6, -4],\n            [4, -6],\n            [2, -7],\n            [1, -7]\n        ]\n    },\n    'z': {\n        width: 17, points: [\n            [14, 14],\n            [3, 0],\n            [-1, -1],\n            [3, 14],\n            [14, 14],\n            [-1, -1],\n            [3, 0],\n            [14, 0]\n        ]\n    },\n    '{': {\n        width: 14, points: [\n            [9, 25],\n            [7, 24],\n            [6, 23],\n            [5, 21],\n            [5, 19],\n            [6, 17],\n            [7, 16],\n            [8, 14],\n            [8, 12],\n            [6, 10],\n            [-1, -1],\n            [7, 24],\n            [6, 22],\n            [6, 20],\n            [7, 18],\n            [8, 17],\n            [9, 15],\n            [9, 13],\n            [8, 11],\n            [4, 9],\n            [8, 7],\n            [9, 5],\n            [9, 3],\n            [8, 1],\n            [7, 0],\n            [6, -2],\n            [6, -4],\n            [7, -6],\n            [-1, -1],\n            [6, 8],\n            [8, 6],\n            [8, 4],\n            [7, 2],\n            [6, 1],\n            [5, -1],\n            [5, -3],\n            [6, -5],\n            [7, -6],\n            [9, -7]\n        ]\n    },\n    '|': {\n        width: 8, points: [\n            [4, 25],\n            [4, -7]\n        ]\n    },\n    '}': {\n        width: 14, points: [\n            [5, 25],\n            [7, 24],\n            [8, 23],\n            [9, 21],\n            [9, 19],\n            [8, 17],\n            [7, 16],\n            [6, 14],\n            [6, 12],\n            [8, 10],\n            [-1, -1],\n            [7, 24],\n            [8, 22],\n            [8, 20],\n            [7, 18],\n            [6, 17],\n            [5, 15],\n            [5, 13],\n            [6, 11],\n            [10, 9],\n            [6, 7],\n            [5, 5],\n            [5, 3],\n            [6, 1],\n            [7, 0],\n            [8, -2],\n            [8, -4],\n            [7, -6],\n            [-1, -1],\n            [8, 8],\n            [6, 6],\n            [6, 4],\n            [7, 2],\n            [8, 1],\n            [9, -1],\n            [9, -3],\n            [8, -5],\n            [7, -6],\n            [5, -7]\n        ]\n    },\n    '~': {\n        width: 24, points: [\n            [3, 6],\n            [3, 8],\n            [4, 11],\n            [6, 12],\n            [8, 12],\n            [10, 11],\n            [14, 8],\n            [16, 7],\n            [18, 7],\n            [20, 8],\n            [21, 10],\n            [-1, -1],\n            [3, 8],\n            [4, 10],\n            [6, 11],\n            [8, 11],\n            [10, 10],\n            [14, 7],\n            [16, 6],\n            [18, 6],\n            [20, 7],\n            [21, 10],\n            [21, 12]\n        ]\n    }\n};\n\n/**\n * @desc Creates wireframe text-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a text-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildVectorTextGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const text = buildVectorTextGeometry({\n *      origin: [0,0,0],\n *      text: \"On the other side of the screen, it all looked so easy\"\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"textGeometry\",\n *      primitiveType: text.primitiveType, // Will be \"lines\"\n *      positions: text.positions,\n *      indices: text.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redTextMesh\",\n *      geometryId: \"textGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redText\",\n *      meshIds: [\"redTextMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildVectorTextGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number[]} [cfg.origin] 3D point indicating the top left corner.\n * @param {Number} [cfg.size=1] Size of each character.\n * @param {String} [cfg.text=\"\"] The text.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildVectorTextGeometry(cfg = {}) {\n\n    var origin = cfg.origin || [0, 0, 0];\n    var xOrigin = origin[0];\n    var yOrigin = origin[1];\n    var zOrigin = origin[2];\n    var size = cfg.size || 1;\n\n    var positions = [];\n    var indices = [];\n    var text = (\"\" + cfg.text).trim();\n    var lines = (text || \"\").split(\"\\n\");\n    var countVerts = 0;\n    var y = 0;\n    var x;\n    var str;\n    var len;\n    var c;\n    var mag = 1.0 / 25.0;\n    var penUp;\n    var p1;\n    var p2;\n    var needLine;\n    var pointsLen;\n    var a;\n\n    for (var iLine = 0; iLine < lines.length; iLine++) {\n\n        x = 0;\n        str = lines[iLine];\n        len = str.length;\n\n        for (var i = 0; i < len; i++) {\n\n            c = letters[str.charAt(i)];\n\n            if (c === '\\n') {\n                //alert(\"newline\");\n            }\n\n            if (!c) {\n                continue;\n            }\n\n            penUp = 1;\n            p1 = -1;\n            p2 = -1;\n            needLine = false;\n\n            pointsLen = c.points.length;\n\n            for (var j = 0; j < pointsLen; j++) {\n                a = c.points[j];\n\n                if (a[0] === -1 && a[1] === -1) {\n                    penUp = 1;\n                    needLine = false;\n                    continue;\n                }\n\n                positions.push((x + (a[0] * size) * mag) + xOrigin);\n                positions.push((y + (a[1] * size) * mag) + yOrigin);\n                positions.push(0 + zOrigin);\n\n                if (p1 === -1) {\n                    p1 = countVerts;\n                } else if (p2 === -1) {\n                    p2 = countVerts;\n                } else {\n                    p1 = p2;\n                    p2 = countVerts;\n                }\n                countVerts++;\n\n                if (penUp) {\n                    penUp = false;\n\n                } else {\n                    indices.push(p1);\n                    indices.push(p2);\n                }\n\n                needLine = true;\n            }\n            x += c.width * mag * size;\n\n        }\n        y -= 35 * mag * size;\n    }\n\n    return {\n        primitiveType: \"lines\",\n        positions: positions,\n        indices: indices\n    };\n}\n\n\nexport {buildVectorTextGeometry}\n","/**\n * @private\n * @param buf\n * @returns {ArrayBuffer}\n */\nexport function toArrayBuffer(buf) {\n    const ab = new ArrayBuffer(buf.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buf.length; ++i) {\n        view[i] = buf[i];\n    }\n    return ab;\n}","import {XKT_INFO} from \"./XKT_INFO.js\";\nimport {XKTModel} from \"./XKTModel/XKTModel.js\";\nimport {parseMetaModelIntoXKTModel} from \"./parsers/parseMetaModelIntoXKTModel.js\";\nimport {parseCityJSONIntoXKTModel} from \"./parsers/parseCityJSONIntoXKTModel.js\";\nimport {parseGLTFIntoXKTModel} from \"./parsers/parseGLTFIntoXKTModel.js\";\nimport {parseIFCIntoXKTModel} from \"./parsers/parseIFCIntoXKTModel.js\";\nimport {parseLASIntoXKTModel} from \"./parsers/parseLASIntoXKTModel.js\";\nimport {parsePCDIntoXKTModel} from \"./parsers/parsePCDIntoXKTModel.js\";\nimport {parsePLYIntoXKTModel} from \"./parsers/parsePLYIntoXKTModel.js\";\nimport {parseSTLIntoXKTModel} from \"./parsers/parseSTLIntoXKTModel.js\";\nimport {writeXKTModelToArrayBuffer} from \"./exporters/xkt/writeXKTModelToArrayBuffer.js\";\n\nimport {toArrayBuffer} from \"./XKTModel/lib/toArraybuffer\";\nimport {parseGLTFJSONIntoXKTModel} from \"./parsers/parseGLTFJSONIntoXKTModel\";\n\nconst fs = require('fs');\n\n/**\n * Converts model files into xeokit's native XKT format.\n *\n * Supported source formats are: IFC, CityJSON, glTF, LAZ and LAS.\n *\n * **Only bundled in xeokit-convert.cjs.js.**\n *\n * ## Usage\n *\n * ````javascript\n * const convert2xkt = require(\"@xeokit/xeokit-convert/dist/convert2xkt.cjs.js\");\n * const fs = require('fs');\n *\n * convert2xkt({\n *      sourceData: fs.readFileSync(\"rme_advanced_sample_project.ifc\"),\n *      outputXKT: (xtkArrayBuffer) => {\n *          fs.writeFileSync(\"rme_advanced_sample_project.ifc.xkt\", xtkArrayBuffer);\n *      }\n *  }).then(() => {\n *      console.log(\"Converted.\");\n *  }, (errMsg) => {\n *      console.error(\"Conversion failed: \" + errMsg)\n *  });\n ````\n * @param {Object} params Conversion parameters.\n * @param {Object} params.WebIFC The WebIFC library. We pass this in as an external dependency, in order to give the\n * caller the choice of whether to use the Browser or NodeJS version.\n * @param {String} [params.source] Path to source file. Alternative to ````sourceData````.\n * @param {ArrayBuffer|JSON} [params.sourceData] Source file data. Alternative to ````source````.\n * @param {String} [params.sourceFormat] Format of source file/data. Always needed with ````sourceData````, but not normally needed with ````source````, because convert2xkt will determine the format automatically from the file extension of ````source````.\n * @param {String} [params.metaModelDataStr] Source file data. Overrides metadata from ````metaModelSource````, ````sourceData```` and ````source````.\n * @param {String} [params.metaModelSource] Path to source metaModel file. Overrides metadata from ````sourceData```` and ````source````. Overridden by ````metaModelData````.\n * @param {String} [params.output] Path to destination XKT file. Directories on this path are automatically created if not existing.\n * @param {Function} [params.outputXKTModel] Callback to collect the ````XKTModel```` that is internally build by this method.\n * @param {Function} [params.outputXKT] Callback to collect XKT file data.\n * @param {String[]} [params.includeTypes] Option to only convert objects of these types.\n * @param {String[]} [params.excludeTypes] Option to never convert objects of these types.\n * @param {Object} [stats] Collects conversion statistics. Statistics are attached to this object if provided.\n * @param {Function} [params.outputStats] Callback to collect statistics.\n * @param {Boolean} [params.rotateX=false] Whether to rotate the model 90 degrees about the X axis to make the Y axis \"up\", if necessary. Applies to CityJSON and LAS/LAZ models.\n * @param {Boolean} [params.reuseGeometries=true] When true, will enable geometry reuse within the XKT. When false,\n * will automatically \"expand\" all reused geometries into duplicate copies. This has the drawback of increasing the XKT\n * file size (~10-30% for typical models), but can make the model more responsive in the xeokit Viewer, especially if the model\n * has excessive geometry reuse. An example of excessive geometry reuse would be when a model (eg. glTF) has 4000 geometries that are\n * shared amongst 2000 objects, ie. a large number of geometries with a low amount of reuse, which can present a\n * pathological performance case for xeokit's underlying graphics APIs (WebGL, WebGPU etc).\n * @param {Boolean} [params.includeTextures=true] Whether to convert textures. Only works for ````glTF```` models.\n * @param {Boolean} [params.includeNormals=true] Whether to convert normals. When false, the parser will ignore\n * geometry normals, and the modelwill rely on the xeokit ````Viewer```` to automatically generate them. This has\n * the limitation that the normals will be face-aligned, and therefore the ````Viewer```` will only be able to render\n * a flat-shaded non-PBR representation of the model.\n * @param {Number} [params.minTileSize=200] Minimum RTC coordinate tile size. Set this to a value between 100 and 10000,\n * depending on how far from the coordinate origin the model's vertex positions are; specify larger tile sizes when close\n * to the origin, and smaller sizes when distant.  This compensates for decreasing precision as floats get bigger.\n * @param {Function} [params.log] Logging callback.\n * @return {Promise<number>}\n */\nfunction convert2xkt({\n                         WebIFC,\n                         source,\n                         sourceData,\n                         sourceFormat,\n                         metaModelSource,\n                         metaModelDataStr,\n                         modelAABB,\n                         output,\n                         outputXKTModel,\n                         outputXKT,\n                         includeTypes,\n                         excludeTypes,\n                         reuseGeometries = true,\n                         minTileSize = 200,\n                         stats = {},\n                         outputStats,\n                         rotateX = false,\n                         includeTextures = true,\n                         includeNormals = true,\n                         log = function (msg) {\n                         }\n                     }) {\n\n    stats.sourceFormat = \"\";\n    stats.schemaVersion = \"\";\n    stats.title = \"\";\n    stats.author = \"\";\n    stats.created = \"\";\n    stats.numMetaObjects = 0;\n    stats.numPropertySets = 0;\n    stats.numTriangles = 0;\n    stats.numVertices = 0;\n    stats.numNormals = 0;\n    stats.numUVs = 0;\n    stats.numTextures = 0;\n    stats.numTextureSets = 0;\n    stats.numObjects = 0;\n    stats.numGeometries = 0;\n    stats.numTiles= 0;\n    stats.sourceSize = 0;\n    stats.xktSize = 0;\n    stats.texturesSize = 0;\n    stats.xktVersion = \"\";\n    stats.compressionRatio = 0;\n    stats.conversionTime = 0;\n    stats.aabb = null;\n    stats.minTileSize = minTileSize || 500;\n\n    return new Promise(function (resolve, reject) {\n        const _log = log;\n        log = (msg) => {\n            _log(`[convert2xkt] ${msg}`)\n        }\n\n        if (!source && !sourceData) {\n            reject(\"Argument expected: source or sourceData\");\n            return;\n        }\n\n        if (!sourceFormat && sourceData) {\n            reject(\"Argument expected: sourceFormat is required with sourceData\");\n            return;\n        }\n\n        if (!output && !outputXKTModel && !outputXKT) {\n            reject(\"Argument expected: output, outputXKTModel or outputXKT\");\n            return;\n        }\n\n        if (source) {\n            log('Reading input file: ' + source);\n        }\n\n        const startTime = new Date();\n\n        const ext = sourceFormat || source.split('.').pop();\n\n        if (!sourceData) {\n            try {\n                sourceData = fs.readFileSync(source);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n        }\n\n        const sourceFileSizeBytes = sourceData.byteLength;\n\n        log(\"Input file size: \" + (sourceFileSizeBytes / 1000).toFixed(2) + \" kB\");\n\n        if (!metaModelDataStr && metaModelSource) {\n            log('Reading input metadata file: ' + metaModelSource);\n            try {\n                metaModelDataStr = fs.readFileSync(metaModelSource);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n        }\n\n        let metaModelJSON;\n\n        if (metaModelDataStr) {\n            try {\n             metaModelJSON = JSON.parse(metaModelDataStr);\n            } catch (e) {\n                log(`Error parsing metadata JSON: ${e}`);\n            }\n        }\n\n        if (reuseGeometries === false) {\n            log(\"Geometry reuse is disabled\");\n        }\n\n        const xktModel = new XKTModel({\n            minTileSize,\n            modelAABB\n        });\n\n        switch (ext) {\n            case \"json\":\n                convert(parseCityJSONIntoXKTModel, {\n                    data: JSON.parse(sourceData),\n                    xktModel,\n                    stats,\n                    rotateX,\n                    log\n                });\n                break;\n\n            case \"glb\":\n                sourceData = toArrayBuffer(sourceData);\n                convert(parseGLTFIntoXKTModel, {\n                    data: sourceData,\n                    reuseGeometries,\n                    includeTextures,\n                    includeNormals,\n                    metaModelData: metaModelJSON,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"gltf\":\n                const gltfJSON = JSON.parse(sourceData);\n                const gltfBasePath = source ? getBasePath(source) : \"\";\n                convert(parseGLTFJSONIntoXKTModel, {\n                    baseUri: gltfBasePath,\n                    data: gltfJSON,\n                    reuseGeometries,\n                    includeTextures,\n                    includeNormals,\n                    metaModelData: metaModelJSON,\n                    xktModel,\n                    getAttachment: async (name) => {\n                        const filePath = gltfBasePath + name;\n                        log(`Reading attachment file: ${filePath}`);\n                        const buffer = fs.readFileSync(filePath);\n                        const arrayBuf = toArrayBuffer(buffer);\n                        return arrayBuf;\n                    },\n                    stats,\n                    log\n                });\n                break;\n\n            case \"ifc\":\n                convert(parseIFCIntoXKTModel, {\n                    WebIFC,\n                    data: sourceData,\n                    xktModel,\n                    wasmPath: \"./\",\n                    includeTypes,\n                    excludeTypes,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"laz\":\n                convert(parseLASIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    rotateX,\n                    log\n                });\n                break;\n\n            case \"las\":\n                convert(parseLASIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    rotateX,\n                    log\n                });\n                break;\n\n            case \"pcd\":\n                convert(parsePCDIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"ply\":\n                convert(parsePLYIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"stl\":\n                convert(parseSTLIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            default:\n                reject(`Error: unsupported source format: \"${ext}\".`);\n                return;\n        }\n\n        function convert(parser, converterParams) {\n\n            parser(converterParams).then(() => {\n\n                if (!metaModelJSON) {\n                    xktModel.createDefaultMetaObjects();\n                }\n\n                log(\"Input file parsed OK. Building XKT document...\");\n\n                xktModel.finalize().then(() => {\n\n                    log(\"XKT document built OK. Writing to XKT file...\");\n\n                    const xktArrayBuffer = writeXKTModelToArrayBuffer(xktModel, metaModelJSON, stats);\n\n                    const xktContent = Buffer.from(xktArrayBuffer);\n\n                    const targetFileSizeBytes = xktArrayBuffer.byteLength;\n\n                    stats.sourceSize = (sourceFileSizeBytes / 1000).toFixed(2);\n                    stats.xktSize = (targetFileSizeBytes / 1000).toFixed(2);\n                    stats.xktVersion = XKT_INFO.xktVersion;\n                    stats.compressionRatio = (sourceFileSizeBytes / targetFileSizeBytes).toFixed(2);\n                    stats.conversionTime = ((new Date() - startTime) / 1000.0).toFixed(2);\n                    stats.aabb = xktModel.aabb;\n                    log(`Converted to: XKT v${stats.xktVersion}`);\n                    if (includeTypes) {\n                        log(\"Include types: \" + (includeTypes ? includeTypes : \"(include all)\"));\n                    }\n                    if (excludeTypes) {\n                        log(\"Exclude types: \" + (excludeTypes ? excludeTypes : \"(exclude none)\"));\n                    }\n                    log(\"XKT size: \" + stats.xktSize + \" kB\");\n                    log(\"XKT textures size: \" + (stats.texturesSize / 1000).toFixed(2) + \"kB\");\n                    log(\"Compression ratio: \" + stats.compressionRatio);\n                    log(\"Conversion time: \" + stats.conversionTime + \" s\");\n                    log(\"Converted metaobjects: \" + stats.numMetaObjects);\n                    log(\"Converted property sets: \" + stats.numPropertySets);\n                    log(\"Converted drawable objects: \" + stats.numObjects);\n                    log(\"Converted geometries: \" + stats.numGeometries);\n                    log(\"Converted textures: \" + stats.numTextures);\n                    log(\"Converted textureSets: \" + stats.numTextureSets);\n                    log(\"Converted triangles: \" + stats.numTriangles);\n                    log(\"Converted vertices: \" + stats.numVertices);\n                    log(\"Converted UVs: \" + stats.numUVs);\n                    log(\"Converted normals: \" + stats.numNormals);\n                    log(\"Number of tiles: \" + stats.numTiles);\n                    log(\"minTileSize: \" + stats.minTileSize);\n\n                    if (output) {\n                        const outputDir = getBasePath(output).trim();\n                        if (outputDir !== \"\" && !fs.existsSync(outputDir)) {\n                            fs.mkdirSync(outputDir, {recursive: true});\n                        }\n                        log('Writing XKT file: ' + output);\n                        fs.writeFileSync(output, xktContent);\n                    }\n\n                    if (outputXKTModel) {\n                        outputXKTModel(xktModel);\n                    }\n\n                    if (outputXKT) {\n                        outputXKT(xktContent);\n                    }\n\n                    if (outputStats) {\n                        outputStats(stats);\n                    }\n\n                    resolve();\n                });\n            }, (err) => {\n                reject(err);\n            });\n        }\n    });\n}\n\nfunction getBasePath(src) {\n    const i = src.lastIndexOf(\"/\");\n    return (i !== 0) ? src.substring(0, i + 1) : \"\";\n}\n\nexport {convert2xkt};","import '@loaders.gl/polyfills';\nimport {installFilePolyfills} from '@loaders.gl/polyfills';\n\ninstallFilePolyfills();\n\nexport * from \"./src/index.js\";\nexport {convert2xkt} from \"./src/convert2xkt.js\"; // convert2xkt is only bundled for Node.js\n"],"names":["root","factory","exports","module","define","amd","global","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","mat","mat2","mat3","xyz","tempVec3","vec","translate","scale","XKT_INFO","xktVersion","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","GIFMediaType","JPEGMediaType","PNGMediaType","FloatArrayType","Float64Array","tempMat1","tempMat2","tempVec4","math","MIN_DOUBLE","Number","MAX_SAFE_INTEGER","MAX_DOUBLE","DEGTORAD","RADTODEG","vec2","values","vec3","vec4","mat3ToMat4","mat4","arguments","length","mat4ToMat3","createUUID","lut","i","toString","d0","Math","random","d1","d2","d3","concat","clamp","min","max","fmod","a","b","console","error","negateVec4","v","dest","addVec4","u","addVec4Scalar","s","addVec3","addVec3Scalar","subVec4","subVec3","subVec2","subVec4Scalar","subScalarVec4","mulVec4","mulVec4Scalar","mulVec3Scalar","mulVec2Scalar","divVec3","divVec4","divScalarVec3","divVec3Scalar","divVec4Scalar","divScalarVec4","dotVec4","cross3Vec4","u0","u1","u2","v0","v1","v2","cross3Vec3","x","y","z","x2","y2","z2","sqLenVec4","lenVec4","sqrt","dotVec3","dotVec2","sqLenVec3","sqLenVec2","lenVec3","distVec3","w","lenVec2","distVec2","rcpVec3","normalizeVec4","f","normalizeVec3","normalizeVec2","angleVec3","theta","acos","vec3FromMat4Scale","m","vecToArray","trunc","round","len","Array","slice","xyzArrayToObject","arr","xyzObjectToArray","arry","dupMat4","mat4To3","m4s","setMat4ToZeroes","setMat4ToOnes","diagonalMat4v","diagonalMat4c","diagonalMat4s","identityMat4","identityMat3","isIdentityMat4","negateMat4","addMat4","addMat4Scalar","addScalarMat4","subMat4","subMat4Scalar","subScalarMat4","mulMat4","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","mulMat3","mulMat4Scalar","mulMat4v4","v3","transposeMat4","m4","m14","m8","m13","m12","m9","transposeMat3","determinantMat4","inverseMat4","b04","b05","b06","b07","b08","b09","invDet","traceMat4","translationMat4v","translationMat3v","translationMat4c","translationMat4s","translateMat4v","translateMat4c","OLDtranslateMat4c","m15","m3","m7","m11","rotationMat4v","anglerad","axis","xy","yz","zx","xs","ys","zs","ax","sin","c","cos","q","rotationMat4c","scalingMat4v","scalingMat3v","scalingMat4c","scaleMat4c","scaleMat4v","scalingMat4s","rotationTranslationMat4","xx","xz","yy","zz","wx","wy","wz","mat4ToEuler","order","m21","m22","m23","m31","m32","m33","asin","abs","atan2","composeMat4","position","quaternion","quaternionToRotationMat4","decomposeMat4","matrix","sx","sy","sz","set","invSX","invSY","invSZ","mat4ToQuaternion","this","lookAtMat4v","pos","target","up","z0","z1","x0","x1","y0","y1","posx","posy","posz","upx","upy","upz","targetx","targety","targetz","lookAtMat4c","orthoMat4c","left","right","bottom","top","near","far","rl","tb","fn","frustumMat4v","fmin","fmax","fmin4","fmax4","t","tempMat20","tempMat21","tempMat22","frustumMat4","perspectiveMat4","fovyrad","aspectratio","znear","zfar","pmin","pmax","tan","transformPoint3","transformPoint4","transformPoints3","points","points2","p0","p1","p2","pi","result","m0","m1","m2","m5","m6","m10","transformPositions3","transformPositions4","transformVec3","transformVec4","rotateVec3X","rotateVec3Y","rotateVec3Z","projectVec4","unprojectVec3","viewMat","projMat","lerpVec3","t1","t2","flatten","leni","j","lenj","item","push","identityQuaternion","eulerToQuaternion","euler","c1","c2","c3","s1","s2","s3","trace","vec3PairToQuaternion","norm_u_norm_v","real_part","normalizeQuaternion","angleAxisToQuaternion","angleAxis","halfAngle","fsin","quaternionToEuler","mulQuaternions","p3","q0","q1","q2","q3","vec3ApplyQuaternion","qx","qy","qz","qw","ix","iy","iz","iw","quaternionToMat4","tx","ty","tz","twx","twy","twz","txx","txy","txz","tyy","tyz","tzz","conjugateQuaternion","inverseQuaternion","quaternionToAngleAxis","angle","AABB3","AABB2","OBB3","OBB2","Sphere3","transformOBB3","containsAABB3","aabb1","aabb2","getAABB3Diag","aabb","getAABB3DiagPoint","diagVec","xneg","xpos","yneg","ypos","zneg","zpos","getAABB3Center","getAABB2Center","collapseAABB3","decompressAABB","decodeMatrix","AABB3ToOBB3","obb","positions3ToAABB3","positions","positionsDecodeMatrix","xmin","ymin","zmin","xmax","ymax","zmax","decompressPosition","OBB3ToAABB3","points3ToAABB3","points3ToSphere3","sphere","numPoints","dist","radius","positions3ToSphere3","tempVec3a","tempVec3b","lenPositions","numPositions","OBB3ToSphere3","point","lenPoints","getSphere3Center","expandAABB3","expandAABB3Point3","expandAABB3Points3","triangleNormal","normal","p1x","p1y","p1z","p2x","p2y","p2z","p3x","p3y","p3z","mag","octEncodeVec3","array","xfunc","yfunc","tempx","tempy","Int8Array","octDecodeVec2","oct","dot","uniquePositions","indicesLookup","indicesReverseLookup","weldedIndices","faces","numFaces","compa","compb","compc","cb","ab","cross","inverseNormal","geometryCompression","quantizePositions","quantizedPositions","maxInt","xMultiplier","yMultiplier","zMultiplier","verify","num","floor","compressPosition","multiplier","Float32Array","createPositionsDecodeMatrix","xwid","ywid","zwid","transformAndOctEncodeNormals","modelNormalMatrix","normals","lenNormals","compressedNormals","lenCompressedNormals","best","currentCos","bestCos","localNormal","worldNormal","octEncodeNormals","buildEdgeIndices","Uint16Array","indices","edgeThreshold","vx","vy","vz","positionsMap","precision","pow","lenUniquePositions","weldVertices","numIndices","ia","ib","ic","face","buildFaces","edge1","edge2","index1","index2","edge","normal1","normal2","edgeIndices","thresholdDot","edges","largeIndex","faceIndex","face1","face2","dot2","Uint32Array","isTriangleMeshSolid","vertexIndexMapping","compareIndexPositions","posA","posB","newIndices","sort","uniqueVertexIndex","a2","b2","temp","compareEdges","e1","e2","sameEdgeCount","XKTMesh","_createClass","cfg","_classCallCheck","meshId","meshIndex","geometry","color","metallic","roughness","opacity","textureSet","entity","bucketsForIndices","compareBuckets","aa1","aa2","aa3","bb1","bb2","bb3","aa","bb","minBucketA","minBucketB","maxBucketA","maxBucketB","compareEdgeIndices","compareIndices","retVal","comparePositions","compareVertex","res","seqInit","XKTGeometry","geometryId","primitiveType","geometryIndex","numInstances","positionsQuantized","normalsOctEncoded","colorsCompressed","uvs","uvsCompressed","solid","_buckets","uniquePositionsCompressed","uniqueIndices","uniqueEdgeIndices","_uniquifyPositions2","log","_positions","_indices","_edgeIndices","maxPositions","setMaxNumberOfPositions","seq","remappings","uniqueIdx","newPositions","newEdgeIndices","uniquifyPositions","positionsCompressed","numUniquePositions","mesh","bitsPerBucket","checkResult","Int32Array","sortedIndices","preSortIndices","tmp","sortedEdgeIndices","preSortEdgeIndices","edgeSearch","el0","el1","compare_fn","n","k","cmp","alreadyOutputEdgeIndices","fill","bucketIndicesRemap","buckets","addEmptyBucket","newBucket","maxNumPositions","bucketNumber","currentBucket","additonalPositionsInBucket","ii0","ii1","ii2","edgeIndex","prevBytesPerIndex","newBytesPerIndex","originalSize","newSize","forEach","bucket","meshDict","edgesDict","doCheckResult","rebucketPositions","XKTEntity","entityId","meshes","entityIndex","hasReusedGeometries","XKTTile","entities","KDNode","XKTMetaObject","metaObjectId","propertySetIds","metaObjectType","metaObjectName","parentMetaObjectId","XKTPropertySet","propertySetId","propertySetType","propertySetName","properties","XKTTexture","textureId","textureIndex","imageData","channel","width","height","src","compressed","mediaType","minFilter","magFilter","wrapS","wrapT","wrapR","XKTTextureSet","textureSetId","textureSetIndex","materialType","materialIndex","colorTexture","metallicRoughnessTexture","normalsTexture","emissiveTexture","occlusionTexture","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","_typeof","__await","then","unwrapped","previousPromise","callInvokeWithMethodAndArg","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_defineProperties","props","descriptor","input","hint","prim","toPrimitive","String","_toPrimitive","tempVec4a","tempVec4b","tempMat4","tempMat4b","kdTreeDimLength","TEXTURE_ENCODING_OPTIONS","useSRGB","qualityLevel","encodeUASTC","mipmaps","XKTModel","instance","Constructor","modelId","projectId","revisionId","author","createdAt","creatingApplication","schema","minTileSize","modelAABB","propertySets","propertySetsList","metaObjects","metaObjectsList","reusedGeometriesDecodeMatrix","geometries","geometriesList","textures","texturesList","textureSets","textureSetsList","meshesList","entitiesList","tilesList","finalized","protoProps","_finalize","params","propertySet","metaObject","_rootMetaObject","fileExt","split","texture","colorTextureId","metallicRoughnessTextureId","normalsTextureId","emissiveTextureId","occlusionTextureId","triangles","lines","line_strip","colors","xktGeometryCfg","uv","Uint8Array","mergedPositions","mergedIndices","mergeVertices","rotation","meshIds","meshIdIdx","meshIdLen","warn","createMetaObject","_callee","rootKDNode","_context","_removeUnusedTextures","_compressTextures","_bakeSingleUseGeometryPositions","_bakeAndOctEncodeNormals","_createEntityAABBs","_createKDTree","_createTilesFromKDTree","_createReusedGeometriesDecodeMatrix","_flagSolidGeometries","args","apply","_this","countTextures","_loop","encodingOptions","load","ImageLoader","image","encode","KTX2BasisWriter","encodedData","encodedImageData","entityAABB","_insertEntityIntoKDTree","kdNode","nodeAABB","dim","aabbLeft","aabbRight","_createTilesFromKDNode","_createTileFromEntities","tileAABB","tileCenter","tileCenterNeg","rtcAABB","reused","lenk","tile","reusedGeometriesAABB","countReusedGeometries","numGeometries","maxNumIndices","XKT_VERSION","NUM_TEXTURE_ATTRIBUTES","NUM_MATERIAL_ATTRIBUTES","writeXKTModelToArrayBuffer","xktModel","metaModelJSON","stats","data","metaModelDataStr","numPropertySets","numMetaObjects","numTextures","numTextureSets","numMeshes","numEntities","numTiles","lenColors","lenUVs","lenIndices","lenEdgeIndices","lenMatrices","lenTextures","xktTexture","byteLength","numCompressedTextures","metadata","textureData","eachTextureDataPortion","eachTextureAttributes","eachTextureSetTextures","matrices","eachGeometryPrimitiveType","eachGeometryPositionsPortion","eachGeometryNormalsPortion","eachGeometryColorsPortion","eachGeometryUVsPortion","eachGeometryIndicesPortion","eachGeometryEdgeIndicesPortion","eachMeshGeometriesPortion","eachMeshMatricesPortion","eachMeshTextureSet","eachMeshMaterialAttributes","eachEntityId","eachEntityMeshesPortion","eachTileAABB","eachTileEntitiesPortion","countPositions","countNormals","countColors","countUVs","countIndices","countEdgeIndices","id","propertySetsIndex","propertySetJSON","metaObjectsIndex","metaObjectJSON","parent","external","portionIdx","textureAttrIdx","eachTextureSetTexturesIndex","countEntityMeshesPortion","eachMeshMaterialAttributesIndex","matricesIndex","tileIndex","tileEntities","numTileEntities","entityMeshes","numEntityMeshes","tileAABBIndex","getModelData","deflatedData","metaModelBytes","deflatedJSON","deflateJSON","pako","buffer","JSON","stringify","replace","chr","charCodeAt","substr","deflateData","texturesSize","arrayBuffer","elements","indexData","dataLen","elementsize","indexBuf","dataArray","offset","element","toArrayBuffer","createArrayBuffer","strings","earcut","holeIndices","minX","minY","maxX","maxY","invSize","hasHoles","outerLen","outerNode","linkedList","list","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","e","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","maxZ","intersects","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","Infinity","sectorContainsSector","findHoleBridge","leftmost","ay","bx","by","cx","cy","px","py","intersectsPolygon","inside","middleInside","o1","sign","o2","o3","o4","onSegment","Node","an","bp","sum","deviation","polygonArea","trianglesArea","vertices","holes","dimensions","holeIndex","tempVec2a","tempVec3c","parseCityJSONIntoXKTModel","_ref","_ref$stats","transform","transformedVertices","transformVertices","sourceFormat","schemaVersion","version","title","created","numTriangles","numVertices","numObjects","rootMetaObjectId","modelMetaObjectId","ctx","msg","nextId","cityObjects","CityObjects","objectId","parseCityObject","parseCityJSON","cityObject","parents","objectMaterial","surfaceMaterials","appearance","materials","geometryMaterial","material","themeIds","theme","surfaceMaterial","parseGeometrySurfacesWithOwnMaterials","parseGeometrySurfacesWithSharedMaterial","createEntity","parseSurfacesWithOwnMaterials","boundaries","shells","solids","surfaces","surface","diffuseColor","transparency","sharedIndices","geometryCfg","newFace","extractLocalIndices","_toConsumableArray","pList","getNormalOfPositions","pv","to2D","unshift","tr","createGeometry","createMesh","parseSurfacesWithSharedMaterial","primitiveCfg","boundary","newBoundary","index","includes","vertexIndex","indexOf","nexti","_p","_n","re","x3","tmp2","y3","utils","isString","parseGLTFIntoXKTModel","baseUri","metaModelData","_ref$includeTextures","includeTextures","_ref$includeNormals","includeNormals","getAttachment","numNormals","numUVs","parse","GLTFLoader","gltfData","metaModelCorrections","getMetaModelCorrections","geometryCreated","parseTexture","parseTextures","_textureSetId","parseTextureSet","_attributes","parseMaterialAttributes","parseMaterials","scene","scenes","nodes","countMeshUsage","parseNode","parseScene","parseDefaultScene","errMsg","eachRootStats","eachChildRoot","metaObjectsMap","metaObjectParent","rootMetaObject","numChildren","countChildren","source","sampler","createTexture","flipY","_textureId","textureSetCfg","normalTexture","normalTextureId","metallicPBR","pbrMetallicRoughness","baseColorTexture","extensions","specularPBR","specularTexture","specularColorTexture","createTextureSet","materialAttributes","diffuseFactor","common","technique","blinn","phong","lambert","diffuse","transparent","baseColorFactor","metallicFactor","roughnessFactor","node","instances","children","childNode","deferredMeshIds","depth","localMatrix","translation","numPrimitives","primitives","primitive","_xktGeometryId","xktGeometryId","mode","attributes","POSITION","NORMAL","COLOR_0","TEXCOORD_0","xktMeshId","meshCfg","nodeName","xktEntityId","rootMetaObjectStats","atob2","atob","Buffer","from","WEBGL_COMPONENT_TYPES","Int16Array","WEBGL_TYPE_SIZES","parseGLTFJSONIntoXKTModel","reuseGeometries","gltf","createXKTGeometryIds","nextMeshId","buffers","all","map","bufferInfo","_arrayBuffer","_buffer","uri","dataUriRegexResult","match","isBase64","decodeURIComponent","ArrayBuffer","view","parseArrayBuffer","parseBuffer","parseBuffers","bufferViewsInfo","bufferViews","parseBufferView","parseBufferViews","freeBuffers","materialsInfo","materialInfo","parseMaterial","_materialData","defaultSceneInfo","sceneInfo","glTFNode","bufferViewInfo","_typedArray","byteOffset","gltfMeshId","meshInfo","numPrimitivesInMesh","primitiveInfo","geometryHash","createPrimitiveGeometryHash","geometryArrays","parsePrimitiveGeometry","childNodeIdx","childGLTFNode","join","accessors","indicesIndex","accessorInfo","parseAccessorTypedArray","positionsIndex","normalsIndex","colorsIndex","bufferView","itemSize","TypedArray","componentType","itemBytes","BYTES_PER_ELEMENT","byteStride","count","parseIFCIntoXKTModel","WebIFC","_ref$autoNormals","autoNormals","includeTypes","excludeTypes","wasmPath","ifcAPI","IfcAPI","SetWasmPath","Init","modelID","OpenModel","ifcProjectId","GetLineIDsWithType","IFCPROJECT","GetLine","ifcProject","parseSpatialChildren","parseMetadata","flatMeshes","LoadAllGeometry","size","createObject","IFCSPACE","ifcSpaceId","flatMesh","GetFlatMesh","parseGeometry","IFCRELDEFINESBYPROPERTIES","relID","rel","relatingPropertyDefinition","RelatingPropertyDefinition","GlobalId","relatedObjects","RelatedObjects","HasProperties","Name","nominalValue","NominalValue","property","valueType","Description","description","createPropertySet","parsePropertySets","ifcElement","parseRelatedItemsOfType","expressID","IFCRELAGGREGATES","IFCRELCONTAINEDINSPATIALSTRUCTURE","relation","related","relatedItems","isArray","element2","flatMeshExpressID","placedGeometries","placedGeometry","geometryExpressID","GetGeometry","vertexData","GetVertexArray","GetVertexData","GetVertexDataSize","GetIndexArray","GetIndexData","GetIndexDataSize","flatTransformation","parseLASIntoXKTModel","_ref$rotateX","rotateX","_ref$colorDepth","colorDepth","_ref$fp","fp64","_ref$skip","skip","_ref$log","LASLoader","las","parsedData","loaderData","pointsFormatId","positionsValue","intensity","readPositions","readIntensities","readColorsAndIntensities","attributesPosition","attributesColor","attributesIntensity","colorSize","intensities","colorsCompressedSize","parseMetaModelIntoXKTModel","includeTypesMap","excludeTypesMap","newObject","countMetaObjects","parsePCDIntoXKTModel","_ref$littleEndian","littleEndian","textData","TextDecoder","decode","il","fromCharCode","escape","decodeText","header","result1","search","result2","exec","headerLen","str","fields","viewpoint","parseFloat","parseInt","l","sizeSum","rowSize","parseHeader","line","rgb","g","sizes","compressedSize","decompressedSize","decompressed","inData","outLength","ctrl","ref","inLength","outData","inPtr","outPtr","decompressLZF","dataview","DataView","getFloat32","getUint8","row","parsePLYIntoXKTModel","_x","_parsePLYIntoXKTModel","hasColors","colorsValue","PLYLoader","t0","parseSTLIntoXKTModel","_parseSTLIntoXKTModel","splitMeshes","smoothNormals","smoothNormalsAngleThreshold","binData","ensureBinary","isBinary","parseBinary","parseASCII","reader","getUint32","defaultR","defaultG","defaultB","lastR","lastG","lastB","newMesh","normalX","normalY","normalZ","packedColor","getUint16","vertexstart","addMesh","normalx","normaly","normalz","verticesPerFace","normalsPerFace","text","faceRegex","faceCounter","floatRegex","vertexRegex","RegExp","normalRegex","nextGeometryId","ni","acc","posi","vertexMap","vertexNormals","vertexNormalAccum","numVerts","ii","jj","faceToVertexNormals","buildBoxGeometry","xSize","ySize","zSize","center","centerX","centerY","centerZ","buildBoxLinesGeometry","buildCylinderGeometry","radiusTop","radiusBottom","radialSegments","heightSegments","h","currentRadius","currentHeight","first","second","startIndex","tu","tv","openEnded","heightHalf","heightLength","radialAngle","PI","radialLength","radiusChange","atan","buildGridGeometry","divisions","step","halfSize","buildPlaneGeometry","xSegments","zSegments","halfWidth","halfHeight","planeX","planeZ","planeX1","planeZ1","segmentWidth","segmentHeight","offset2","buildSphereGeometry","lod","widthSegments","sinTheta","cosTheta","phi","sinPhi","buildTorusGeometry","tube","tubeSegments","arc","letters","buildVectorTextGeometry","penUp","pointsLen","origin","xOrigin","yOrigin","zOrigin","trim","countVerts","iLine","buf","fs","convert2xkt","sourceData","metaModelSource","output","outputXKTModel","outputXKT","_ref$reuseGeometries","_ref$minTileSize","outputStats","sourceSize","xktSize","compressionRatio","conversionTime","_log","startTime","Date","ext","readFileSync","sourceFileSizeBytes","toFixed","_getAttachment","convert","gltfJSON","gltfBasePath","getBasePath","filePath","arrayBuf","parser","converterParams","createDefaultMetaObjects","finalize","xktArrayBuffer","xktContent","targetFileSizeBytes","outputDir","existsSync","mkdirSync","recursive","writeFileSync","lastIndexOf","substring","installFilePolyfills"],"sourceRoot":""}